
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000230

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x000112e0 memsz 0x000112e0 flags r-x
    LOAD off    0x00012300 vaddr 0x02011300 paddr 0x02012dec align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x000148d8 vaddr 0x020148d8 paddr 0x020148d8 align 2**12
         filesz 0x00000000 memsz 0x0004b164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010d58  02000230  02000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000378  02010f88  02010f88  00011f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  02011300  02012dec  00012300  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0004b164  020148d8  020148d8  000148d8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00013dec  2**0
                  CONTENTS
  7 .sdram        00000000  0205fa3c  0205fa3c  00013dec  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00013dec  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f78  00000000  00000000  00013e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000239c0  00000000  00000000  00014d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000092a9  00000000  00000000  00038748  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b825  00000000  00000000  000419f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000245c  00000000  00000000  0004d218  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003a6a  00000000  00000000  0004f674  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001786c  00000000  00000000  000530de  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0006a94c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018d0  00000000  00000000  0006a990  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006f6d2  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006f6d5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006f6e1  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006f6e2  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006f6e3  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006f6e7  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006f6eb  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006f6ef  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006f6fa  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006f705  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0006f710  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000019  00000000  00000000  0006f71b  2**0
                  CONTENTS, READONLY
 30 .jdi          0000554b  00000000  00000000  0006f734  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00099ba1  00000000  00000000  00074c7f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
02000230 l    d  .text	00000000 .text
02010f88 l    d  .rodata	00000000 .rodata
02011300 l    d  .rwdata	00000000 .rwdata
020148d8 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
0205fa3c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
02000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 frame_buffer.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
020148d8 l     O .bss	00000002 no_device.3600
020148da l     O .bss	00000002 ctl_reg.3599
00000000 l    df *ABS*	00000000 pics.c
00000000 l    df *ABS*	00000000 sram.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
02011046 l     O .rodata	00000010 zeroes.4404
02003d20 l     F .text	000000bc __sbprintf
02011056 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
02003f30 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
02005a88 l     F .text	00000008 __fp_unlock
02005a9c l     F .text	0000019c __sinit.part.1
02005c38 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
02011300 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
02011744 l     O .rwdata	00000020 lc_ctype_charset
02011724 l     O .rwdata	00000020 lc_message_charset
02011764 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
02011088 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0200910c l     F .text	000000fc __sprint_r.part.0
020111ac l     O .rodata	00000010 zeroes.4349
0200a748 l     F .text	000000bc __sbprintf
020111bc l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0200e768 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0200e87c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0200e8a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0200e99c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0200ea84 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0200eb70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0200ed4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
02012ddc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0200eff0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0200f12c l     F .text	00000034 alt_dev_reg
02011d4c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0200f408 l     F .text	0000020c altera_avalon_jtag_uart_irq
0200f614 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0200fef0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02010350 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
020104b0 l     F .text	0000003c alt_get_errno
020104ec l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
02014910 g     O .bss	00000004 alt_instruction_exception_handler
020005bc g     F .text	0000004c read_image
02008750 g     F .text	00000074 _mprec_log10
0200883c g     F .text	0000008c __any_on
0200acfc g     F .text	00000054 _isatty_r
02011094 g     O .rodata	00000028 __mprec_tinytens
0200ec88 g     F .text	0000007c alt_main
020018bc g     F .text	000000c0 _puts_r
0205f93c g     O .bss	00000100 alt_irq
0200ad50 g     F .text	00000060 _lseek_r
02012dec g       *ABS*	00000000 __flash_rwdata_start
0200d140 g     F .text	00000088 .hidden __eqdf2
0205fa3c g       *ABS*	00000000 __alt_heap_start
02001880 g     F .text	0000003c printf
0200af68 g     F .text	0000009c _wcrtomb_r
02008fcc g     F .text	0000005c __sseek
02005de8 g     F .text	00000010 __sinit
0200ae10 g     F .text	00000140 __swbuf_r
020068bc g     F .text	0000007c _setlocale_r
02005c40 g     F .text	00000078 __sfmoreglue
0200ed28 g     F .text	00000024 __malloc_unlock
02001728 g     F .text	00000080 UsbGetRetryCnt
0200758c g     F .text	0000015c memmove
02000390 g     F .text	00000088 IO_init
02005dd0 g     F .text	00000018 _cleanup
02007810 g     F .text	000000a8 _Balloc
0200d1c8 g     F .text	000000dc .hidden __gtdf2
020108d8 g     F .text	00000024 altera_nios2_gen2_irq_init
02000000 g     F .entry	0000000c __reset
02000020 g       *ABS*	00000000 __flash_exceptions_start
0200aca0 g     F .text	0000005c _fstat_r
020148f4 g     O .bss	00000004 errno
02008f48 g     F .text	00000008 __seofread
020148fc g     O .bss	00000004 alt_argv
0201adac g       *ABS*	00000000 _gp
0200efc0 g     F .text	00000030 usleep
02011bcc g     O .rwdata	00000180 alt_fd_list
020108fc g     F .text	00000090 alt_find_dev
02007444 g     F .text	00000148 memcpy
02005a90 g     F .text	0000000c _cleanup_r
0200e580 g     F .text	000000dc .hidden __floatsidf
02010434 g     F .text	0000007c alt_io_redirect
0200d2a4 g     F .text	000000f4 .hidden __ltdf2
02010f88 g       *ABS*	00000000 __DTOR_END__
0200197c g     F .text	00000014 puts
02010b58 g     F .text	0000009c alt_exception_cause_generated_bad_addr
02008e2c g     F .text	00000074 __fpclassifyd
020086ac g     F .text	000000a4 __ratio
0200a72c g     F .text	0000001c __vfiprintf_internal
0200f80c g     F .text	0000021c altera_avalon_jtag_uart_read
02001850 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0200be08 g     F .text	00000064 .hidden __udivsi3
0200e9d8 g     F .text	000000ac isatty
020110e4 g     O .rodata	000000c8 __mprec_tens
02006938 g     F .text	0000000c __locale_charset
020148f0 g     O .bss	00000004 __malloc_top_pad
02000db4 g     F .text	00000268 UsbGetConfigDesc2
02000640 g     F .text	00000074 sram_read
02012db4 g     O .rwdata	00000004 __mb_cur_max
02006968 g     F .text	0000000c _localeconv_r
02007c44 g     F .text	0000003c __i2b
0200626c g     F .text	000004c8 __sfvwrite_r
02008ea0 g     F .text	00000054 _sbrk_r
0200adb0 g     F .text	00000060 _read_r
02012dd4 g     O .rwdata	00000004 alt_max_fd
0200a994 g     F .text	000000f0 _fclose_r
02005a58 g     F .text	00000030 fflush
020148ec g     O .bss	00000004 __malloc_max_sbrked_mem
0200bec4 g     F .text	000008ac .hidden __adddf3
02008454 g     F .text	0000010c __b2d
0200b74c g     F .text	000005c4 .hidden __umoddi3
0200ebac g     F .text	000000dc lseek
02012dac g     O .rwdata	00000004 _global_impure_ptr
020088c8 g     F .text	00000564 _realloc_r
0205fa3c g       *ABS*	00000000 __bss_end
02010260 g     F .text	000000f0 alt_iic_isr_register
020107d0 g     F .text	00000108 alt_tick
0200b150 g     F .text	000005fc .hidden __udivdi3
0200abfc g     F .text	00000024 _fputwc_r
020110bc g     O .rodata	00000028 __mprec_bigtens
02007a28 g     F .text	00000104 __s2b
0200e65c g     F .text	000000a8 .hidden __floatunsidf
02008194 g     F .text	00000060 __mcmp
02000804 g     F .text	00000100 UsbSetAddress
02005e08 g     F .text	00000018 __fp_lock_all
02010214 g     F .text	0000004c alt_ic_irq_enabled
02010734 g     F .text	0000009c alt_alarm_stop
02014904 g     O .bss	00000004 alt_irq_active
020000fc g     F .exceptions	000000d4 alt_irq_handler
02011ba4 g     O .rwdata	00000028 alt_dev_null
0200fed0 g     F .text	00000020 alt_dcache_flush_all
02007b2c g     F .text	00000068 __hi0bits
02000488 g     F .text	00000068 IO_read
0200e500 g     F .text	00000080 .hidden __fixdfsi
02012dec g       *ABS*	00000000 __ram_rwdata_end
02012dcc g     O .rwdata	00000008 alt_dev_list
0200f02c g     F .text	00000100 write
02011300 g       *ABS*	00000000 __ram_rodata_end
0200e8e4 g     F .text	000000b8 fstat
0200d2a4 g     F .text	000000f4 .hidden __ledf2
020017a8 g     F .text	00000080 UsbPrintMem
02007f0c g     F .text	00000140 __pow5mult
02009220 g     F .text	0000150c ___vfiprintf_internal_r
020148e4 g     O .bss	00000004 __nlocale_changed
0200be6c g     F .text	00000058 .hidden __umodsi3
0205fa3c g       *ABS*	00000000 end
0200f348 g     F .text	000000c0 altera_avalon_jtag_uart_init
020001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
02010f88 g       *ABS*	00000000 __CTOR_LIST__
03000000 g       *ABS*	00000000 __alt_stack_pointer
0200e704 g     F .text	00000064 .hidden __clzsi2
0200fa28 g     F .text	00000224 altera_avalon_jtag_uart_write
02005df8 g     F .text	00000004 __sfp_lock_acquire
02007360 g     F .text	000000e4 memchr
02001a28 g     F .text	000022dc ___vfprintf_internal_r
0200111c g     F .text	00000100 UsbClassRequest
02005f5c g     F .text	00000310 _free_r
02006944 g     F .text	00000010 __locale_mb_cur_max
02010dd4 g     F .text	00000180 __call_exitprocs
020148e0 g     O .bss	00000004 __mlocale_changed
02012db8 g     O .rwdata	00000004 __malloc_sbrk_base
02000230 g     F .text	0000003c _start
02014908 g     O .bss	00000004 _alt_tick_rate
0200804c g     F .text	00000148 __lshift
0201490c g     O .bss	00000004 _alt_nticks
0200ed88 g     F .text	00000104 read
0200f198 g     F .text	0000004c alt_sys_init
02010cbc g     F .text	00000118 __register_exitproc
02007c80 g     F .text	0000028c __multiply
0200f6b4 g     F .text	00000068 altera_avalon_jtag_uart_close
02001828 g     F .text	00000028 .hidden __mulsi3
02011300 g       *ABS*	00000000 __ram_rwdata_start
02010f88 g       *ABS*	00000000 __ram_rodata_start
02014914 g     O .bss	00000028 __malloc_current_mallinfo
02008560 g     F .text	0000014c __d2b
0201493c g     O .bss	0004b000 bg_data
02000904 g     F .text	00000148 UsbGetDeviceDesc1
0200f1e4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
02010a94 g     F .text	000000c4 alt_get_fd
0200fd78 g     F .text	00000158 alt_busy_sleep
02000608 g     F .text	00000038 image_init
0200a864 g     F .text	00000054 _close_r
02010c40 g     F .text	0000007c memcmp
0200f2a4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0205fa3c g       *ABS*	00000000 __alt_stack_base
0200f2f4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
02003ddc g     F .text	00000154 __swsetup_r
0200c770 g     F .text	000009d0 .hidden __divdf3
02005cb8 g     F .text	00000118 __sfp
020087c4 g     F .text	00000078 __copybits
0201179c g     O .rwdata	00000408 __malloc_av_
02005e04 g     F .text	00000004 __sinit_lock_release
0200d398 g     F .text	0000086c .hidden __muldf3
02008ef4 g     F .text	00000054 __sread
020016a4 g     F .text	00000084 UsbWaitTDListDone
0201098c g     F .text	00000108 alt_find_file
0200ff2c g     F .text	000000a4 alt_dev_llist_insert
0200ed04 g     F .text	00000024 __malloc_lock
0200ef10 g     F .text	000000b0 sbrk
020059fc g     F .text	0000005c _fflush_r
0200a8b8 g     F .text	000000dc _calloc_r
020148d8 g       *ABS*	00000000 __bss_start
020076e8 g     F .text	00000128 memset
020004f0 g     F .text	000000cc main
02014900 g     O .bss	00000004 alt_envp
020148e8 g     O .bss	00000004 __malloc_max_total_mem
0200f244 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0200101c g     F .text	00000100 UsbSetConfig
0200af50 g     F .text	00000018 __swbuf
02009028 g     F .text	00000008 __sclose
03000000 g       *ABS*	00000000 __alt_heap_limit
0200aa84 g     F .text	00000014 fclose
02004158 g     F .text	00001688 _dtoa_r
02006b54 g     F .text	0000080c _malloc_r
0200b0c4 g     F .text	00000030 __ascii_wctomb
02012dd8 g     O .rwdata	00000004 alt_errno
02006734 g     F .text	000000c4 _fwalk
0200bd10 g     F .text	00000084 .hidden __divsi3
02005e38 g     F .text	00000124 _malloc_trim_r
0200121c g     F .text	00000148 UsbGetHidDesc
02010f88 g       *ABS*	00000000 __CTOR_END__
02009030 g     F .text	000000dc strcmp
02010f88 g       *ABS*	00000000 __flash_rodata_start
02010f88 g       *ABS*	00000000 __DTOR_LIST__
0200d140 g     F .text	00000088 .hidden __nedf2
0200070c g     F .text	00000044 UsbRead
0200f160 g     F .text	00000038 alt_irq_init
0200ee8c g     F .text	00000084 alt_release_fd
020111cc g     O .rodata	00000100 .hidden __clz_tab
020148dc g     O .bss	00000004 _PathLocale
02010bf4 g     F .text	00000014 atexit
0200a804 g     F .text	00000060 _write_r
02006974 g     F .text	00000018 setlocale
02012db0 g     O .rwdata	00000004 _impure_ptr
020148f8 g     O .bss	00000004 alt_argc
020057e0 g     F .text	0000021c __sflush_r
02010030 g     F .text	00000060 _do_dtors
02006960 g     F .text	00000008 __locale_cjk_lang
02000020 g       .exceptions	00000000 alt_irq_entry
020083f0 g     F .text	00000064 __ulp
02005e20 g     F .text	00000018 __fp_unlock_all
02012dc4 g     O .rwdata	00000008 alt_fs_list
0200026c g     F .text	00000124 write_to_ocm
02001364 g     F .text	00000340 UsbGetReportDesc
02000020 g       *ABS*	00000000 __ram_exceptions_start
0200698c g     F .text	0000000c localeconv
020100b0 g     F .text	00000050 alt_ic_isr_register
02012dec g       *ABS*	00000000 _edata
0205fa3c g       *ABS*	00000000 _end
020006b4 g     F .text	00000058 UsbWrite
0200aa98 g     F .text	00000164 __fputwc
02000230 g       *ABS*	00000000 __ram_exceptions_end
0200f71c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
02010188 g     F .text	0000008c alt_ic_irq_disable
02008f50 g     F .text	0000007c __swrite
02012dbc g     O .rwdata	00000004 __malloc_trim_threshold
02006954 g     F .text	0000000c __locale_msgcharset
02010c08 g     F .text	00000038 exit
020067f8 g     F .text	000000c4 _fwalk_reent
020081f4 g     F .text	000001fc __mdiff
0200bd94 g     F .text	00000074 .hidden __modsi3
03000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
02005dfc g     F .text	00000004 __sfp_lock_release
02000000 g       *ABS*	00000000 __alt_mem_sdram
02000418 g     F .text	00000070 IO_write
02010f54 g     F .text	00000034 _exit
0200fc4c g     F .text	0000012c alt_alarm_start
02006998 g     F .text	000001bc __smakebuf_r
02001990 g     F .text	00000098 strlen
020105d8 g     F .text	0000015c open
0200d1c8 g     F .text	000000dc .hidden __gedf2
02012dc0 g     O .rwdata	00000004 __wctomb
02009208 g     F .text	00000018 __sprint_r
02010090 g     F .text	00000020 alt_icache_flush_all
02012de0 g     O .rwdata	00000004 alt_priority_mask
02010100 g     F .text	00000088 alt_ic_irq_enable
02003d04 g     F .text	0000001c __vfprintf_internal
0200b0f4 g     F .text	0000005c _wctomb_r
0200dc04 g     F .text	000008fc .hidden __subdf3
02007b94 g     F .text	000000b0 __lo0bits
02000c24 g     F .text	00000190 UsbGetConfigDesc1
02012de4 g     O .rwdata	00000008 alt_alarm_list
0200ffd0 g     F .text	00000060 _do_ctors
02000750 g     F .text	000000b4 UsbSoftReset
0200b004 g     F .text	000000c0 wcrtomb
0200e7a4 g     F .text	000000d8 close
02000a4c g     F .text	000001d8 UsbGetDeviceDesc2
0200eaec g     F .text	00000084 alt_load
0200ac20 g     F .text	00000080 fputwc
02005e00 g     F .text	00000004 __sinit_lock_acquire
020078e0 g     F .text	00000148 __multadd
020078b8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

02000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000000:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000004:	08408c14 	ori	at,at,560
    jmp r1
 2000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000fc0 	call	20000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000706 	br	20000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 200008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2000098:	20001d00 	call	20001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 200009c:	1000021e 	bne	r2,zero,20000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000f8:	ef80083a 	eret

020000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000fc:	defff904 	addi	sp,sp,-28
 2000100:	dfc00615 	stw	ra,24(sp)
 2000104:	df000515 	stw	fp,20(sp)
 2000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000110:	0005313a 	rdctl	r2,ipending
 2000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000124:	00800044 	movi	r2,1
 2000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200012c:	e0fffb17 	ldw	r3,-20(fp)
 2000130:	e0bffc17 	ldw	r2,-16(fp)
 2000134:	1884703a 	and	r2,r3,r2
 2000138:	10001426 	beq	r2,zero,200018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200013c:	008081b4 	movhi	r2,518
 2000140:	10be4f04 	addi	r2,r2,-1732
 2000144:	e0fffd17 	ldw	r3,-12(fp)
 2000148:	180690fa 	slli	r3,r3,3
 200014c:	10c5883a 	add	r2,r2,r3
 2000150:	10c00017 	ldw	r3,0(r2)
 2000154:	008081b4 	movhi	r2,518
 2000158:	10be4f04 	addi	r2,r2,-1732
 200015c:	e13ffd17 	ldw	r4,-12(fp)
 2000160:	200890fa 	slli	r4,r4,3
 2000164:	1105883a 	add	r2,r2,r4
 2000168:	10800104 	addi	r2,r2,4
 200016c:	10800017 	ldw	r2,0(r2)
 2000170:	1009883a 	mov	r4,r2
 2000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200017c:	0005313a 	rdctl	r2,ipending
 2000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000184:	e0bfff17 	ldw	r2,-4(fp)
 2000188:	00000706 	br	20001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 200018c:	e0bffc17 	ldw	r2,-16(fp)
 2000190:	1085883a 	add	r2,r2,r2
 2000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000198:	e0bffd17 	ldw	r2,-12(fp)
 200019c:	10800044 	addi	r2,r2,1
 20001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a4:	003fe106 	br	200012c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 20001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 20001ac:	e0bffb17 	ldw	r2,-20(fp)
 20001b0:	103fdb1e 	bne	r2,zero,2000120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20001b4:	0001883a 	nop
}
 20001b8:	0001883a 	nop
 20001bc:	e037883a 	mov	sp,fp
 20001c0:	dfc00117 	ldw	ra,4(sp)
 20001c4:	df000017 	ldw	fp,0(sp)
 20001c8:	dec00204 	addi	sp,sp,8
 20001cc:	f800283a 	ret

020001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20001d0:	defffb04 	addi	sp,sp,-20
 20001d4:	dfc00415 	stw	ra,16(sp)
 20001d8:	df000315 	stw	fp,12(sp)
 20001dc:	df000304 	addi	fp,sp,12
 20001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 20001e4:	00bfffc4 	movi	r2,-1
 20001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 20001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 20001f0:	d0a6d917 	ldw	r2,-25756(gp)
 20001f4:	10000726 	beq	r2,zero,2000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20001f8:	d0a6d917 	ldw	r2,-25756(gp)
 20001fc:	e0fffd17 	ldw	r3,-12(fp)
 2000200:	e1bffe17 	ldw	r6,-8(fp)
 2000204:	e17fff17 	ldw	r5,-4(fp)
 2000208:	1809883a 	mov	r4,r3
 200020c:	103ee83a 	callr	r2
 2000210:	00000206 	br	200021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 2000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 2000218:	0005883a 	mov	r2,zero
}
 200021c:	e037883a 	mov	sp,fp
 2000220:	dfc00117 	ldw	ra,4(sp)
 2000224:	df000017 	ldw	fp,0(sp)
 2000228:	dec00204 	addi	sp,sp,8
 200022c:	f800283a 	ret

Disassembly of section .text:

02000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000230:	06c0c034 	movhi	sp,768
    ori sp, sp, %lo(__alt_stack_pointer)
 2000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2000238:	06808074 	movhi	gp,513
    ori gp, gp, %lo(_gp)
 200023c:	d6ab6b14 	ori	gp,gp,44460
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000240:	00808074 	movhi	r2,513
    ori r2, r2, %lo(__bss_start)
 2000244:	10923614 	ori	r2,r2,18648

    movhi r3, %hi(__bss_end)
 2000248:	00c08174 	movhi	r3,517
    ori r3, r3, %lo(__bss_end)
 200024c:	18fe8f14 	ori	r3,r3,64060

    beq r2, r3, 1f
 2000250:	10c00326 	beq	r2,r3,2000260 <_start+0x30>

0:
    stw zero, (r2)
 2000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 200025c:	10fffd36 	bltu	r2,r3,2000254 <__alt_data_end+0xff000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2000260:	200eaec0 	call	200eaec <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000264:	200ec880 	call	200ec88 <alt_main>

02000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000268:	003fff06 	br	2000268 <__alt_data_end+0xff000268>

0200026c <write_to_ocm>:
//			buffer[i*SCREEN_WIDTH + j] = bg_data[i][j];
//		}
//	write_to_ocm();
//}

void write_to_ocm(unsigned char* buffer) {
 200026c:	defff904 	addi	sp,sp,-28
 2000270:	dfc00615 	stw	ra,24(sp)
 2000274:	df000515 	stw	fp,20(sp)
 2000278:	df000504 	addi	fp,sp,20
 200027c:	e13fff15 	stw	r4,-4(fp)
	*ws_base = 0x0001;
 2000280:	00803404 	movi	r2,208
 2000284:	00c00044 	movi	r3,1
 2000288:	10c00005 	stb	r3,0(r2)
	for (int i = 0; i < SCREEN_HEIGHT; i++)
 200028c:	e03ffb15 	stw	zero,-20(fp)
 2000290:	00003406 	br	2000364 <write_to_ocm+0xf8>
		for (int j = 0; j < SCREEN_WIDTH; j++){
 2000294:	e03ffc15 	stw	zero,-16(fp)
 2000298:	00002c06 	br	200034c <write_to_ocm+0xe0>
			unsigned int address = (i*SCREEN_WIDTH + j)&0x00FFFFFF;
 200029c:	0140a004 	movi	r5,640
 20002a0:	e13ffb17 	ldw	r4,-20(fp)
 20002a4:	20018280 	call	2001828 <__mulsi3>
 20002a8:	1006d7fa 	srli	r3,r2,31
 20002ac:	1885883a 	add	r2,r3,r2
 20002b0:	1005d07a 	srai	r2,r2,1
 20002b4:	1007883a 	mov	r3,r2
 20002b8:	e0bffc17 	ldw	r2,-16(fp)
 20002bc:	1885883a 	add	r2,r3,r2
 20002c0:	1007883a 	mov	r3,r2
 20002c4:	00804034 	movhi	r2,256
 20002c8:	10bfffc4 	addi	r2,r2,-1
 20002cc:	1884703a 	and	r2,r3,r2
 20002d0:	e0bffd15 	stw	r2,-12(fp)
			unsigned int data = buffer[i*SCREEN_WIDTH + j];
 20002d4:	0140a004 	movi	r5,640
 20002d8:	e13ffb17 	ldw	r4,-20(fp)
 20002dc:	20018280 	call	2001828 <__mulsi3>
 20002e0:	1006d7fa 	srli	r3,r2,31
 20002e4:	1885883a 	add	r2,r3,r2
 20002e8:	1005d07a 	srai	r2,r2,1
 20002ec:	1007883a 	mov	r3,r2
 20002f0:	e0bffc17 	ldw	r2,-16(fp)
 20002f4:	1885883a 	add	r2,r3,r2
 20002f8:	1007883a 	mov	r3,r2
 20002fc:	e0bfff17 	ldw	r2,-4(fp)
 2000300:	10c5883a 	add	r2,r2,r3
 2000304:	10800003 	ldbu	r2,0(r2)
 2000308:	10803fcc 	andi	r2,r2,255
 200030c:	e0bffe15 	stw	r2,-8(fp)
			//printf("%d: %2x\n", address, data);
			data = (data<<24) + address;
 2000310:	e0bffe17 	ldw	r2,-8(fp)
 2000314:	1006963a 	slli	r3,r2,24
 2000318:	e0bffd17 	ldw	r2,-12(fp)
 200031c:	1885883a 	add	r2,r3,r2
 2000320:	e0bffe15 	stw	r2,-8(fp)
			//while ((*input_base)!=0);
			//printf("%2x", *input_base);
			*output_base = data;
 2000324:	00803804 	movi	r2,224
 2000328:	e0fffe17 	ldw	r3,-8(fp)
 200032c:	10c00015 	stw	r3,0(r2)

			//while ((*input_base)!=1) {}

			*output_base = 0x00FFFFFF;
 2000330:	00c03804 	movi	r3,224
 2000334:	00804034 	movhi	r2,256
 2000338:	10bfffc4 	addi	r2,r2,-1
 200033c:	18800015 	stw	r2,0(r3)
//}

void write_to_ocm(unsigned char* buffer) {
	*ws_base = 0x0001;
	for (int i = 0; i < SCREEN_HEIGHT; i++)
		for (int j = 0; j < SCREEN_WIDTH; j++){
 2000340:	e0bffc17 	ldw	r2,-16(fp)
 2000344:	10800044 	addi	r2,r2,1
 2000348:	e0bffc15 	stw	r2,-16(fp)
 200034c:	e0bffc17 	ldw	r2,-16(fp)
 2000350:	10805010 	cmplti	r2,r2,320
 2000354:	103fd11e 	bne	r2,zero,200029c <__alt_data_end+0xff00029c>
//	write_to_ocm();
//}

void write_to_ocm(unsigned char* buffer) {
	*ws_base = 0x0001;
	for (int i = 0; i < SCREEN_HEIGHT; i++)
 2000358:	e0bffb17 	ldw	r2,-20(fp)
 200035c:	10800044 	addi	r2,r2,1
 2000360:	e0bffb15 	stw	r2,-20(fp)
 2000364:	e0bffb17 	ldw	r2,-20(fp)
 2000368:	10803c10 	cmplti	r2,r2,240
 200036c:	103fc91e 	bne	r2,zero,2000294 <__alt_data_end+0xff000294>

			//while ((*input_base)!=1) {}

			*output_base = 0x00FFFFFF;
		}
	*ws_base = 0x0000;
 2000370:	00803404 	movi	r2,208
 2000374:	10000005 	stb	zero,0(r2)
}
 2000378:	0001883a 	nop
 200037c:	e037883a 	mov	sp,fp
 2000380:	dfc00117 	ldw	ra,4(sp)
 2000384:	df000017 	ldw	fp,0(sp)
 2000388:	dec00204 	addi	sp,sp,8
 200038c:	f800283a 	ret

02000390 <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
 2000390:	deffff04 	addi	sp,sp,-4
 2000394:	df000015 	stw	fp,0(sp)
 2000398:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
 200039c:	00804404 	movi	r2,272
 20003a0:	00c00044 	movi	r3,1
 20003a4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
 20003a8:	00804804 	movi	r2,288
 20003ac:	00c00044 	movi	r3,1
 20003b0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
 20003b4:	00805004 	movi	r2,320
 20003b8:	00c00044 	movi	r3,1
 20003bc:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
 20003c0:	00804c04 	movi	r2,304
 20003c4:	00c00044 	movi	r3,1
 20003c8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
 20003cc:	00805804 	movi	r2,352
 20003d0:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
 20003d4:	00805404 	movi	r2,336
 20003d8:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
 20003dc:	00804804 	movi	r2,288
 20003e0:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
 20003e4:	00804404 	movi	r2,272
 20003e8:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
 20003ec:	00804404 	movi	r2,272
 20003f0:	00c00044 	movi	r3,1
 20003f4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
 20003f8:	00804804 	movi	r2,288
 20003fc:	00c00044 	movi	r3,1
 2000400:	10c00005 	stb	r3,0(r2)
}
 2000404:	0001883a 	nop
 2000408:	e037883a 	mov	sp,fp
 200040c:	df000017 	ldw	fp,0(sp)
 2000410:	dec00104 	addi	sp,sp,4
 2000414:	f800283a 	ret

02000418 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
 2000418:	defffd04 	addi	sp,sp,-12
 200041c:	df000215 	stw	fp,8(sp)
 2000420:	df000204 	addi	fp,sp,8
 2000424:	2007883a 	mov	r3,r4
 2000428:	2805883a 	mov	r2,r5
 200042c:	e0fffe05 	stb	r3,-8(fp)
 2000430:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;	// set address
 2000434:	00805804 	movi	r2,352
 2000438:	e0fffe03 	ldbu	r3,-8(fp)
 200043c:	10c00015 	stw	r3,0(r2)

	*otg_hpi_cs = 0;
 2000440:	00804804 	movi	r2,288
 2000444:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
 2000448:	00804c04 	movi	r2,304
 200044c:	10000005 	stb	zero,0(r2)
	*otg_hpi_data = Data;
 2000450:	00805404 	movi	r2,336
 2000454:	e0ffff0b 	ldhu	r3,-4(fp)
 2000458:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 1;
 200045c:	00804c04 	movi	r2,304
 2000460:	00c00044 	movi	r3,1
 2000464:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
 2000468:	00804804 	movi	r2,288
 200046c:	00c00044 	movi	r3,1
 2000470:	10c00005 	stb	r3,0(r2)
	// refresh otg_hpi_w and set data
}
 2000474:	0001883a 	nop
 2000478:	e037883a 	mov	sp,fp
 200047c:	df000017 	ldw	fp,0(sp)
 2000480:	dec00104 	addi	sp,sp,4
 2000484:	f800283a 	ret

02000488 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
 2000488:	defffd04 	addi	sp,sp,-12
 200048c:	df000215 	stw	fp,8(sp)
 2000490:	df000204 	addi	fp,sp,8
 2000494:	2005883a 	mov	r2,r4
 2000498:	e0bfff05 	stb	r2,-4(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	//printf("%x\n",temp);
	*otg_hpi_address = Address; // set address
 200049c:	00805804 	movi	r2,352
 20004a0:	e0ffff03 	ldbu	r3,-4(fp)
 20004a4:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
 20004a8:	00804804 	movi	r2,288
 20004ac:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
 20004b0:	00805004 	movi	r2,320
 20004b4:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
 20004b8:	00805404 	movi	r2,336
 20004bc:	10800017 	ldw	r2,0(r2)
 20004c0:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
 20004c4:	00805004 	movi	r2,320
 20004c8:	00c00044 	movi	r3,1
 20004cc:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
 20004d0:	00804804 	movi	r2,288
 20004d4:	00c00044 	movi	r3,1
 20004d8:	10c00005 	stb	r3,0(r2)
	// refresh otg_hpi_r and read data
	return temp;
 20004dc:	e0bffe0b 	ldhu	r2,-8(fp)
}
 20004e0:	e037883a 	mov	sp,fp
 20004e4:	df000017 	ldw	fp,0(sp)
 20004e8:	dec00104 	addi	sp,sp,4
 20004ec:	f800283a 	ret

020004f0 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
 20004f0:	defffd04 	addi	sp,sp,-12
 20004f4:	dfc00215 	stw	ra,8(sp)
 20004f8:	df000115 	stw	fp,4(sp)
 20004fc:	df000104 	addi	fp,sp,4

	//image_init();
	unsigned char* s = BUFFER_0_BASE;
 2000500:	00806a04 	movi	r2,424
 2000504:	e0bfff15 	stw	r2,-4(fp)
	*s = 0x06;
 2000508:	e0bfff17 	ldw	r2,-4(fp)
 200050c:	00c00184 	movi	r3,6
 2000510:	10c00005 	stb	r3,0(r2)
	*(s+1) = 0x02;
 2000514:	e0bfff17 	ldw	r2,-4(fp)
 2000518:	10800044 	addi	r2,r2,1
 200051c:	00c00084 	movi	r3,2
 2000520:	10c00005 	stb	r3,0(r2)
	*(s+2) = 0x03;
 2000524:	e0bfff17 	ldw	r2,-4(fp)
 2000528:	10800084 	addi	r2,r2,2
 200052c:	00c000c4 	movi	r3,3
 2000530:	10c00005 	stb	r3,0(r2)
	*(s+3) = 0x03;
 2000534:	e0bfff17 	ldw	r2,-4(fp)
 2000538:	108000c4 	addi	r2,r2,3
 200053c:	00c000c4 	movi	r3,3
 2000540:	10c00005 	stb	r3,0(r2)
	*(s+4) = 0x03;
 2000544:	e0bfff17 	ldw	r2,-4(fp)
 2000548:	10800104 	addi	r2,r2,4
 200054c:	00c000c4 	movi	r3,3
 2000550:	10c00005 	stb	r3,0(r2)
	*(s+5) = 0x03;
 2000554:	e0bfff17 	ldw	r2,-4(fp)
 2000558:	10800144 	addi	r2,r2,5
 200055c:	00c000c4 	movi	r3,3
 2000560:	10c00005 	stb	r3,0(r2)
	*(s+6) = 0x05;
 2000564:	e0bfff17 	ldw	r2,-4(fp)
 2000568:	10800184 	addi	r2,r2,6
 200056c:	00c00144 	movi	r3,5
 2000570:	10c00005 	stb	r3,0(r2)
	*(s+7) = 0x05;
 2000574:	e0bfff17 	ldw	r2,-4(fp)
 2000578:	108001c4 	addi	r2,r2,7
 200057c:	00c00144 	movi	r3,5
 2000580:	10c00005 	stb	r3,0(r2)
	printf("%2x", *(s+6));
 2000584:	e0bfff17 	ldw	r2,-4(fp)
 2000588:	10800184 	addi	r2,r2,6
 200058c:	10800003 	ldbu	r2,0(r2)
 2000590:	10803fcc 	andi	r2,r2,255
 2000594:	100b883a 	mov	r5,r2
 2000598:	01008074 	movhi	r4,513
 200059c:	2103e204 	addi	r4,r4,3976
 20005a0:	20018800 	call	2001880 <printf>
//	for (int i = 0; i < SCREEN_HEIGHT; i++)
//		for (int j =0; j < SCREEN_WIDTH; j++) {
//			s[i*SCREEN_WIDTH + j] = bg_data[i][j];
//		}
//	write_to_ocm(bg_data);
	return 0;
 20005a4:	0005883a 	mov	r2,zero
		}

	}//end while

	return 0;
}
 20005a8:	e037883a 	mov	sp,fp
 20005ac:	dfc00117 	ldw	ra,4(sp)
 20005b0:	df000017 	ldw	fp,0(sp)
 20005b4:	dec00204 	addi	sp,sp,8
 20005b8:	f800283a 	ret

020005bc <read_image>:
#include "sram.h"
#include <stdio.h>

unsigned char bg_data[BG_HEIGHT][BG_WIDTH];

void read_image(pic_name_t pic_type, unsigned char* buffer) {
 20005bc:	defffc04 	addi	sp,sp,-16
 20005c0:	dfc00315 	stw	ra,12(sp)
 20005c4:	df000215 	stw	fp,8(sp)
 20005c8:	df000204 	addi	fp,sp,8
 20005cc:	e13ffe15 	stw	r4,-8(fp)
 20005d0:	e17fff15 	stw	r5,-4(fp)
	if (pic_type == BACKGROUND) {
 20005d4:	e0bffe17 	ldw	r2,-8(fp)
 20005d8:	1000051e 	bne	r2,zero,20005f0 <read_image+0x34>
		sram_read(buffer, BG_START_ADDR, BG_WIDTH*BG_HEIGHT);
 20005dc:	01800174 	movhi	r6,5
 20005e0:	31ac0004 	addi	r6,r6,-20480
 20005e4:	01400084 	movi	r5,2
 20005e8:	e13fff17 	ldw	r4,-4(fp)
 20005ec:	20006400 	call	2000640 <sram_read>
	}
}
 20005f0:	0001883a 	nop
 20005f4:	e037883a 	mov	sp,fp
 20005f8:	dfc00117 	ldw	ra,4(sp)
 20005fc:	df000017 	ldw	fp,0(sp)
 2000600:	dec00204 	addi	sp,sp,8
 2000604:	f800283a 	ret

02000608 <image_init>:

void image_init() {
 2000608:	defffe04 	addi	sp,sp,-8
 200060c:	dfc00115 	stw	ra,4(sp)
 2000610:	df000015 	stw	fp,0(sp)
 2000614:	d839883a 	mov	fp,sp
	read_image(BACKGROUND, bg_data);
 2000618:	01408074 	movhi	r5,513
 200061c:	29524f04 	addi	r5,r5,18748
 2000620:	0009883a 	mov	r4,zero
 2000624:	20005bc0 	call	20005bc <read_image>
}
 2000628:	0001883a 	nop
 200062c:	e037883a 	mov	sp,fp
 2000630:	dfc00117 	ldw	ra,4(sp)
 2000634:	df000017 	ldw	fp,0(sp)
 2000638:	dec00204 	addi	sp,sp,8
 200063c:	f800283a 	ret

02000640 <sram_read>:
#include "sram.h"
#include "pics.h"
#include <stdio.h>

void sram_read(unsigned char* buffer, int addr_start, int len) {
 2000640:	defffb04 	addi	sp,sp,-20
 2000644:	df000415 	stw	fp,16(sp)
 2000648:	df000404 	addi	fp,sp,16
 200064c:	e13ffd15 	stw	r4,-12(fp)
 2000650:	e17ffe15 	stw	r5,-8(fp)
 2000654:	e1bfff15 	stw	r6,-4(fp)

	for (int i = 0; i < len; i++)
 2000658:	e03ffc15 	stw	zero,-16(fp)
 200065c:	00000d06 	br	2000694 <sram_read+0x54>
		buffer[i] = *(sram_base+addr_start+i);
 2000660:	e0bffc17 	ldw	r2,-16(fp)
 2000664:	e0fffd17 	ldw	r3,-12(fp)
 2000668:	1885883a 	add	r2,r3,r2
 200066c:	e13ffe17 	ldw	r4,-8(fp)
 2000670:	e0fffc17 	ldw	r3,-16(fp)
 2000674:	20c9883a 	add	r4,r4,r3
 2000678:	00c01034 	movhi	r3,64
 200067c:	20c7883a 	add	r3,r4,r3
 2000680:	18c00003 	ldbu	r3,0(r3)
 2000684:	10c00005 	stb	r3,0(r2)
#include "pics.h"
#include <stdio.h>

void sram_read(unsigned char* buffer, int addr_start, int len) {

	for (int i = 0; i < len; i++)
 2000688:	e0bffc17 	ldw	r2,-16(fp)
 200068c:	10800044 	addi	r2,r2,1
 2000690:	e0bffc15 	stw	r2,-16(fp)
 2000694:	e0fffc17 	ldw	r3,-16(fp)
 2000698:	e0bfff17 	ldw	r2,-4(fp)
 200069c:	18bff016 	blt	r3,r2,2000660 <__alt_data_end+0xff000660>
		buffer[i] = *(sram_base+addr_start+i);
}
 20006a0:	0001883a 	nop
 20006a4:	e037883a 	mov	sp,fp
 20006a8:	df000017 	ldw	fp,0(sp)
 20006ac:	dec00104 	addi	sp,sp,4
 20006b0:	f800283a 	ret

020006b4 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
 20006b4:	defffc04 	addi	sp,sp,-16
 20006b8:	dfc00315 	stw	ra,12(sp)
 20006bc:	df000215 	stw	fp,8(sp)
 20006c0:	df000204 	addi	fp,sp,8
 20006c4:	2007883a 	mov	r3,r4
 20006c8:	2805883a 	mov	r2,r5
 20006cc:	e0fffe0d 	sth	r3,-8(fp)
 20006d0:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
 20006d4:	e0bffe0b 	ldhu	r2,-8(fp)
 20006d8:	100b883a 	mov	r5,r2
 20006dc:	01000084 	movi	r4,2
 20006e0:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA, Data);
 20006e4:	e0bfff0b 	ldhu	r2,-4(fp)
 20006e8:	100b883a 	mov	r5,r2
 20006ec:	0009883a 	mov	r4,zero
 20006f0:	20004180 	call	2000418 <IO_write>
	// write address and data
}
 20006f4:	0001883a 	nop
 20006f8:	e037883a 	mov	sp,fp
 20006fc:	dfc00117 	ldw	ra,4(sp)
 2000700:	df000017 	ldw	fp,0(sp)
 2000704:	dec00204 	addi	sp,sp,8
 2000708:	f800283a 	ret

0200070c <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
 200070c:	defffd04 	addi	sp,sp,-12
 2000710:	dfc00215 	stw	ra,8(sp)
 2000714:	df000115 	stw	fp,4(sp)
 2000718:	df000104 	addi	fp,sp,4
 200071c:	2005883a 	mov	r2,r4
 2000720:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
 2000724:	e0bfff0b 	ldhu	r2,-4(fp)
 2000728:	100b883a 	mov	r5,r2
 200072c:	01000084 	movi	r4,2
 2000730:	20004180 	call	2000418 <IO_write>
	return IO_read(HPI_DATA);
 2000734:	0009883a 	mov	r4,zero
 2000738:	20004880 	call	2000488 <IO_read>
	// pass address and read data
}
 200073c:	e037883a 	mov	sp,fp
 2000740:	dfc00117 	ldw	ra,4(sp)
 2000744:	df000017 	ldw	fp,0(sp)
 2000748:	dec00204 	addi	sp,sp,8
 200074c:	f800283a 	ret

02000750 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
 2000750:	defffe04 	addi	sp,sp,-8
 2000754:	dfc00115 	stw	ra,4(sp)
 2000758:	df000015 	stw	fp,0(sp)
 200075c:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
 2000760:	017e9414 	movui	r5,64080
 2000764:	01000044 	movi	r4,1
 2000768:	20004180 	call	2000418 <IO_write>
	usleep(100000);
 200076c:	010000b4 	movhi	r4,2
 2000770:	2121a804 	addi	r4,r4,-31072
 2000774:	200efc00 	call	200efc0 <usleep>
	printf("[USB INIT]:reset finished!\n");
 2000778:	01008074 	movhi	r4,513
 200077c:	2103e304 	addi	r4,r4,3980
 2000780:	200197c0 	call	200197c <puts>

	usleep(500000);
 2000784:	01000234 	movhi	r4,8
 2000788:	21284804 	addi	r4,r4,-24288
 200078c:	200efc00 	call	200efc0 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
 2000790:	01008074 	movhi	r4,513
 2000794:	2103ea04 	addi	r4,r4,4008
 2000798:	200197c0 	call	200197c <puts>
	IO_read(HPI_MAILBOX);
 200079c:	01000044 	movi	r4,1
 20007a0:	20004880 	call	2000488 <IO_read>
	IO_read(HPI_STATUS);
 20007a4:	010000c4 	movi	r4,3
 20007a8:	20004880 	call	2000488 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
 20007ac:	01005104 	movi	r4,324
 20007b0:	200070c0 	call	200070c <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 20007b4:	000b883a 	mov	r5,zero
 20007b8:	01005104 	movi	r4,324
 20007bc:	20006b40 	call	20006b4 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
 20007c0:	01005204 	movi	r4,328
 20007c4:	200070c0 	call	200070c <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
 20007c8:	000b883a 	mov	r5,zero
 20007cc:	01005204 	movi	r4,328
 20007d0:	20006b40 	call	20006b4 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 20007d4:	017fffd4 	movui	r5,65535
 20007d8:	01302414 	movui	r4,49296
 20007dc:	20006b40 	call	20006b4 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
 20007e0:	017fffd4 	movui	r5,65535
 20007e4:	01302c14 	movui	r4,49328
 20007e8:	20006b40 	call	20006b4 <UsbWrite>
}
 20007ec:	0001883a 	nop
 20007f0:	e037883a 	mov	sp,fp
 20007f4:	dfc00117 	ldw	ra,4(sp)
 20007f8:	df000017 	ldw	fp,0(sp)
 20007fc:	dec00204 	addi	sp,sp,8
 2000800:	f800283a 	ret

02000804 <UsbSetAddress>:


void UsbSetAddress()
{
 2000804:	defffe04 	addi	sp,sp,-8
 2000808:	dfc00115 	stw	ra,4(sp)
 200080c:	df000015 	stw	fp,0(sp)
 2000810:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 2000814:	01414004 	movi	r5,1280
 2000818:	01000084 	movi	r4,2
 200081c:	20004180 	call	2000418 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
 2000820:	01414304 	movi	r5,1292
 2000824:	0009883a 	mov	r4,zero
 2000828:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 200082c:	01400204 	movi	r5,8
 2000830:	0009883a 	mov	r4,zero
 2000834:	20004180 	call	2000418 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
 2000838:	01403404 	movi	r5,208
 200083c:	0009883a 	mov	r4,zero
 2000840:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0001);
 2000844:	01400044 	movi	r5,1
 2000848:	0009883a 	mov	r4,zero
 200084c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);
 2000850:	014004c4 	movi	r5,19
 2000854:	0009883a 	mov	r4,zero
 2000858:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0514);
 200085c:	01414504 	movi	r5,1300
 2000860:	0009883a 	mov	r4,zero
 2000864:	20004180 	call	2000418 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
 2000868:	01414004 	movi	r5,1280
 200086c:	0009883a 	mov	r4,zero
 2000870:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0002);
 2000874:	01400084 	movi	r5,2
 2000878:	0009883a 	mov	r4,zero
 200087c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);
 2000880:	000b883a 	mov	r5,zero
 2000884:	0009883a 	mov	r4,zero
 2000888:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);
 200088c:	000b883a 	mov	r5,zero
 2000890:	0009883a 	mov	r4,zero
 2000894:	20004180 	call	2000418 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
 2000898:	000b883a 	mov	r5,zero
 200089c:	0009883a 	mov	r4,zero
 20008a0:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);//
 20008a4:	000b883a 	mov	r5,zero
 20008a8:	0009883a 	mov	r4,zero
 20008ac:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0090);//
 20008b0:	01402404 	movi	r5,144
 20008b4:	0009883a 	mov	r4,zero
 20008b8:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0041);
 20008bc:	01401044 	movi	r5,65
 20008c0:	0009883a 	mov	r4,zero
 20008c4:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);
 20008c8:	014004c4 	movi	r5,19
 20008cc:	0009883a 	mov	r4,zero
 20008d0:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);
 20008d4:	000b883a 	mov	r5,zero
 20008d8:	0009883a 	mov	r4,zero
 20008dc:	20004180 	call	2000418 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 20008e0:	01414004 	movi	r5,1280
 20008e4:	01006c04 	movi	r4,432
 20008e8:	20006b40 	call	20006b4 <UsbWrite>
}
 20008ec:	0001883a 	nop
 20008f0:	e037883a 	mov	sp,fp
 20008f4:	dfc00117 	ldw	ra,4(sp)
 20008f8:	df000017 	ldw	fp,0(sp)
 20008fc:	dec00204 	addi	sp,sp,8
 2000900:	f800283a 	ret

02000904 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
 2000904:	defffe04 	addi	sp,sp,-8
 2000908:	dfc00115 	stw	ra,4(sp)
 200090c:	df000015 	stw	fp,0(sp)
 2000910:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 2000914:	01414004 	movi	r5,1280
 2000918:	01000084 	movi	r4,2
 200091c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x050C);
 2000920:	01414304 	movi	r5,1292
 2000924:	0009883a 	mov	r4,zero
 2000928:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 200092c:	01400204 	movi	r5,8
 2000930:	0009883a 	mov	r4,zero
 2000934:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 2000938:	0140b404 	movi	r5,720
 200093c:	0009883a 	mov	r4,zero
 2000940:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0001);
 2000944:	01400044 	movi	r5,1
 2000948:	0009883a 	mov	r4,zero
 200094c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);
 2000950:	014004c4 	movi	r5,19
 2000954:	0009883a 	mov	r4,zero
 2000958:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0514);
 200095c:	01414504 	movi	r5,1300
 2000960:	0009883a 	mov	r4,zero
 2000964:	20004180 	call	2000418 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 2000968:	0141a004 	movi	r5,1664
 200096c:	0009883a 	mov	r4,zero
 2000970:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
 2000974:	01404004 	movi	r5,256
 2000978:	0009883a 	mov	r4,zero
 200097c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);
 2000980:	000b883a 	mov	r5,zero
 2000984:	0009883a 	mov	r4,zero
 2000988:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0008);
 200098c:	01400204 	movi	r5,8
 2000990:	0009883a 	mov	r4,zero
 2000994:	20004180 	call	2000418 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
 2000998:	01414b04 	movi	r5,1324
 200099c:	0009883a 	mov	r4,zero
 20009a0:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0008);//
 20009a4:	01400204 	movi	r5,8
 20009a8:	0009883a 	mov	r4,zero
 20009ac:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0290);//
 20009b0:	0140a404 	movi	r5,656
 20009b4:	0009883a 	mov	r4,zero
 20009b8:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0041);
 20009bc:	01401044 	movi	r5,65
 20009c0:	0009883a 	mov	r4,zero
 20009c4:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);
 20009c8:	014004c4 	movi	r5,19
 20009cc:	0009883a 	mov	r4,zero
 20009d0:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0520);
 20009d4:	01414804 	movi	r5,1312
 20009d8:	0009883a 	mov	r4,zero
 20009dc:	20004180 	call	2000418 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
 20009e0:	000b883a 	mov	r5,zero
 20009e4:	0009883a 	mov	r4,zero
 20009e8:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
 20009ec:	000b883a 	mov	r5,zero
 20009f0:	0009883a 	mov	r4,zero
 20009f4:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
 20009f8:	01408404 	movi	r5,528
 20009fc:	0009883a 	mov	r4,zero
 2000a00:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0041);
 2000a04:	01401044 	movi	r5,65
 2000a08:	0009883a 	mov	r4,zero
 2000a0c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);
 2000a10:	014004c4 	movi	r5,19
 2000a14:	0009883a 	mov	r4,zero
 2000a18:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);
 2000a1c:	000b883a 	mov	r5,zero
 2000a20:	0009883a 	mov	r4,zero
 2000a24:	20004180 	call	2000418 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 2000a28:	01414004 	movi	r5,1280
 2000a2c:	01006c04 	movi	r4,432
 2000a30:	20006b40 	call	20006b4 <UsbWrite>
}
 2000a34:	0001883a 	nop
 2000a38:	e037883a 	mov	sp,fp
 2000a3c:	dfc00117 	ldw	ra,4(sp)
 2000a40:	df000017 	ldw	fp,0(sp)
 2000a44:	dec00204 	addi	sp,sp,8
 2000a48:	f800283a 	ret

02000a4c <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
 2000a4c:	defffe04 	addi	sp,sp,-8
 2000a50:	dfc00115 	stw	ra,4(sp)
 2000a54:	df000015 	stw	fp,0(sp)
 2000a58:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 2000a5c:	01414004 	movi	r5,1280
 2000a60:	01000084 	movi	r4,2
 2000a64:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x050C);
 2000a68:	01414304 	movi	r5,1292
 2000a6c:	0009883a 	mov	r4,zero
 2000a70:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 2000a74:	01400204 	movi	r5,8
 2000a78:	0009883a 	mov	r4,zero
 2000a7c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 2000a80:	0140b404 	movi	r5,720
 2000a84:	0009883a 	mov	r4,zero
 2000a88:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0001);
 2000a8c:	01400044 	movi	r5,1
 2000a90:	0009883a 	mov	r4,zero
 2000a94:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);
 2000a98:	014004c4 	movi	r5,19
 2000a9c:	0009883a 	mov	r4,zero
 2000aa0:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0514);
 2000aa4:	01414504 	movi	r5,1300
 2000aa8:	0009883a 	mov	r4,zero
 2000aac:	20004180 	call	2000418 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 2000ab0:	0141a004 	movi	r5,1664
 2000ab4:	0009883a 	mov	r4,zero
 2000ab8:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
 2000abc:	01404004 	movi	r5,256
 2000ac0:	0009883a 	mov	r4,zero
 2000ac4:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 2000ac8:	000b883a 	mov	r5,zero
 2000acc:	0009883a 	mov	r4,zero
 2000ad0:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
 2000ad4:	01400484 	movi	r5,18
 2000ad8:	0009883a 	mov	r4,zero
 2000adc:	20004180 	call	2000418 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 2000ae0:	01415104 	movi	r5,1348
 2000ae4:	0009883a 	mov	r4,zero
 2000ae8:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 2000aec:	01400204 	movi	r5,8
 2000af0:	0009883a 	mov	r4,zero
 2000af4:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 2000af8:	0140a404 	movi	r5,656
 2000afc:	0009883a 	mov	r4,zero
 2000b00:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 2000b04:	01401044 	movi	r5,65
 2000b08:	0009883a 	mov	r4,zero
 2000b0c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 2000b10:	014004c4 	movi	r5,19
 2000b14:	0009883a 	mov	r4,zero
 2000b18:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 2000b1c:	01414804 	movi	r5,1312
 2000b20:	0009883a 	mov	r4,zero
 2000b24:	20004180 	call	2000418 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
 2000b28:	01415304 	movi	r5,1356
 2000b2c:	0009883a 	mov	r4,zero
 2000b30:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 2000b34:	01400204 	movi	r5,8
 2000b38:	0009883a 	mov	r4,zero
 2000b3c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 2000b40:	0140a404 	movi	r5,656
 2000b44:	0009883a 	mov	r4,zero
 2000b48:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
 2000b4c:	01400044 	movi	r5,1
 2000b50:	0009883a 	mov	r4,zero
 2000b54:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 2000b58:	014004c4 	movi	r5,19
 2000b5c:	0009883a 	mov	r4,zero
 2000b60:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 2000b64:	01414b04 	movi	r5,1324
 2000b68:	0009883a 	mov	r4,zero
 2000b6c:	20004180 	call	2000418 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
 2000b70:	01415504 	movi	r5,1364
 2000b74:	0009883a 	mov	r4,zero
 2000b78:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
 2000b7c:	01400084 	movi	r5,2
 2000b80:	0009883a 	mov	r4,zero
 2000b84:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 2000b88:	0140a404 	movi	r5,656
 2000b8c:	0009883a 	mov	r4,zero
 2000b90:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 2000b94:	01401044 	movi	r5,65
 2000b98:	0009883a 	mov	r4,zero
 2000b9c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 2000ba0:	014004c4 	movi	r5,19
 2000ba4:	0009883a 	mov	r4,zero
 2000ba8:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 2000bac:	01414e04 	movi	r5,1336
 2000bb0:	0009883a 	mov	r4,zero
 2000bb4:	20004180 	call	2000418 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
 2000bb8:	000b883a 	mov	r5,zero
 2000bbc:	0009883a 	mov	r4,zero
 2000bc0:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
 2000bc4:	000b883a 	mov	r5,zero
 2000bc8:	0009883a 	mov	r4,zero
 2000bcc:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
 2000bd0:	01408404 	movi	r5,528
 2000bd4:	0009883a 	mov	r4,zero
 2000bd8:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
 2000bdc:	01401044 	movi	r5,65
 2000be0:	0009883a 	mov	r4,zero
 2000be4:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 2000be8:	014004c4 	movi	r5,19
 2000bec:	0009883a 	mov	r4,zero
 2000bf0:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
 2000bf4:	000b883a 	mov	r5,zero
 2000bf8:	0009883a 	mov	r4,zero
 2000bfc:	20004180 	call	2000418 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 2000c00:	01414004 	movi	r5,1280
 2000c04:	01006c04 	movi	r4,432
 2000c08:	20006b40 	call	20006b4 <UsbWrite>
}
 2000c0c:	0001883a 	nop
 2000c10:	e037883a 	mov	sp,fp
 2000c14:	dfc00117 	ldw	ra,4(sp)
 2000c18:	df000017 	ldw	fp,0(sp)
 2000c1c:	dec00204 	addi	sp,sp,8
 2000c20:	f800283a 	ret

02000c24 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
 2000c24:	defffe04 	addi	sp,sp,-8
 2000c28:	dfc00115 	stw	ra,4(sp)
 2000c2c:	df000015 	stw	fp,0(sp)
 2000c30:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 2000c34:	01414004 	movi	r5,1280
 2000c38:	01000084 	movi	r4,2
 2000c3c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x050C);
 2000c40:	01414304 	movi	r5,1292
 2000c44:	0009883a 	mov	r4,zero
 2000c48:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 2000c4c:	01400204 	movi	r5,8
 2000c50:	0009883a 	mov	r4,zero
 2000c54:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 2000c58:	0140b404 	movi	r5,720
 2000c5c:	0009883a 	mov	r4,zero
 2000c60:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0001);
 2000c64:	01400044 	movi	r5,1
 2000c68:	0009883a 	mov	r4,zero
 2000c6c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);
 2000c70:	014004c4 	movi	r5,19
 2000c74:	0009883a 	mov	r4,zero
 2000c78:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0514);
 2000c7c:	01414504 	movi	r5,1300
 2000c80:	0009883a 	mov	r4,zero
 2000c84:	20004180 	call	2000418 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 2000c88:	0141a004 	movi	r5,1664
 2000c8c:	0009883a 	mov	r4,zero
 2000c90:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
 2000c94:	01408004 	movi	r5,512
 2000c98:	0009883a 	mov	r4,zero
 2000c9c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 2000ca0:	000b883a 	mov	r5,zero
 2000ca4:	0009883a 	mov	r4,zero
 2000ca8:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
 2000cac:	01400244 	movi	r5,9
 2000cb0:	0009883a 	mov	r4,zero
 2000cb4:	20004180 	call	2000418 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 2000cb8:	01415104 	movi	r5,1348
 2000cbc:	0009883a 	mov	r4,zero
 2000cc0:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 2000cc4:	01400204 	movi	r5,8
 2000cc8:	0009883a 	mov	r4,zero
 2000ccc:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 2000cd0:	0140a404 	movi	r5,656
 2000cd4:	0009883a 	mov	r4,zero
 2000cd8:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 2000cdc:	01401044 	movi	r5,65
 2000ce0:	0009883a 	mov	r4,zero
 2000ce4:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 2000ce8:	014004c4 	movi	r5,19
 2000cec:	0009883a 	mov	r4,zero
 2000cf0:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 2000cf4:	01414804 	movi	r5,1312
 2000cf8:	0009883a 	mov	r4,zero
 2000cfc:	20004180 	call	2000418 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
 2000d00:	01415304 	movi	r5,1356
 2000d04:	0009883a 	mov	r4,zero
 2000d08:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
 2000d0c:	01400044 	movi	r5,1
 2000d10:	0009883a 	mov	r4,zero
 2000d14:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 2000d18:	0140a404 	movi	r5,656
 2000d1c:	0009883a 	mov	r4,zero
 2000d20:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 2000d24:	01400044 	movi	r5,1
 2000d28:	0009883a 	mov	r4,zero
 2000d2c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 2000d30:	014004c4 	movi	r5,19
 2000d34:	0009883a 	mov	r4,zero
 2000d38:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 2000d3c:	01414b04 	movi	r5,1324
 2000d40:	0009883a 	mov	r4,zero
 2000d44:	20004180 	call	2000418 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
 2000d48:	000b883a 	mov	r5,zero
 2000d4c:	0009883a 	mov	r4,zero
 2000d50:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 2000d54:	000b883a 	mov	r5,zero
 2000d58:	0009883a 	mov	r4,zero
 2000d5c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
 2000d60:	01408404 	movi	r5,528
 2000d64:	0009883a 	mov	r4,zero
 2000d68:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 2000d6c:	01401044 	movi	r5,65
 2000d70:	0009883a 	mov	r4,zero
 2000d74:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 2000d78:	014004c4 	movi	r5,19
 2000d7c:	0009883a 	mov	r4,zero
 2000d80:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 2000d84:	000b883a 	mov	r5,zero
 2000d88:	0009883a 	mov	r4,zero
 2000d8c:	20004180 	call	2000418 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 2000d90:	01414004 	movi	r5,1280
 2000d94:	01006c04 	movi	r4,432
 2000d98:	20006b40 	call	20006b4 <UsbWrite>
}
 2000d9c:	0001883a 	nop
 2000da0:	e037883a 	mov	sp,fp
 2000da4:	dfc00117 	ldw	ra,4(sp)
 2000da8:	df000017 	ldw	fp,0(sp)
 2000dac:	dec00204 	addi	sp,sp,8
 2000db0:	f800283a 	ret

02000db4 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
 2000db4:	defffe04 	addi	sp,sp,-8
 2000db8:	dfc00115 	stw	ra,4(sp)
 2000dbc:	df000015 	stw	fp,0(sp)
 2000dc0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 2000dc4:	01414004 	movi	r5,1280
 2000dc8:	01000084 	movi	r4,2
 2000dcc:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x050C);
 2000dd0:	01414304 	movi	r5,1292
 2000dd4:	0009883a 	mov	r4,zero
 2000dd8:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 2000ddc:	01400204 	movi	r5,8
 2000de0:	0009883a 	mov	r4,zero
 2000de4:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 2000de8:	0140b404 	movi	r5,720
 2000dec:	0009883a 	mov	r4,zero
 2000df0:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0001);
 2000df4:	01400044 	movi	r5,1
 2000df8:	0009883a 	mov	r4,zero
 2000dfc:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);
 2000e00:	014004c4 	movi	r5,19
 2000e04:	0009883a 	mov	r4,zero
 2000e08:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0514);
 2000e0c:	01414504 	movi	r5,1300
 2000e10:	0009883a 	mov	r4,zero
 2000e14:	20004180 	call	2000418 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 2000e18:	0141a004 	movi	r5,1664
 2000e1c:	0009883a 	mov	r4,zero
 2000e20:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
 2000e24:	01408004 	movi	r5,512
 2000e28:	0009883a 	mov	r4,zero
 2000e2c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 2000e30:	000b883a 	mov	r5,zero
 2000e34:	0009883a 	mov	r4,zero
 2000e38:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
 2000e3c:	01403fc4 	movi	r5,255
 2000e40:	0009883a 	mov	r4,zero
 2000e44:	20004180 	call	2000418 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
 2000e48:	01415704 	movi	r5,1372
 2000e4c:	0009883a 	mov	r4,zero
 2000e50:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 2000e54:	01400204 	movi	r5,8
 2000e58:	0009883a 	mov	r4,zero
 2000e5c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 2000e60:	0140a404 	movi	r5,656
 2000e64:	0009883a 	mov	r4,zero
 2000e68:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 2000e6c:	01401044 	movi	r5,65
 2000e70:	0009883a 	mov	r4,zero
 2000e74:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 2000e78:	014004c4 	movi	r5,19
 2000e7c:	0009883a 	mov	r4,zero
 2000e80:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 2000e84:	01414804 	movi	r5,1312
 2000e88:	0009883a 	mov	r4,zero
 2000e8c:	20004180 	call	2000418 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
 2000e90:	01415904 	movi	r5,1380
 2000e94:	0009883a 	mov	r4,zero
 2000e98:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 2000e9c:	01400204 	movi	r5,8
 2000ea0:	0009883a 	mov	r4,zero
 2000ea4:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 2000ea8:	0140a404 	movi	r5,656
 2000eac:	0009883a 	mov	r4,zero
 2000eb0:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 2000eb4:	01400044 	movi	r5,1
 2000eb8:	0009883a 	mov	r4,zero
 2000ebc:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 2000ec0:	014004c4 	movi	r5,19
 2000ec4:	0009883a 	mov	r4,zero
 2000ec8:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 2000ecc:	01414b04 	movi	r5,1324
 2000ed0:	0009883a 	mov	r4,zero
 2000ed4:	20004180 	call	2000418 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
 2000ed8:	01415b04 	movi	r5,1388
 2000edc:	0009883a 	mov	r4,zero
 2000ee0:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 2000ee4:	01400204 	movi	r5,8
 2000ee8:	0009883a 	mov	r4,zero
 2000eec:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 2000ef0:	0140a404 	movi	r5,656
 2000ef4:	0009883a 	mov	r4,zero
 2000ef8:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 2000efc:	01401044 	movi	r5,65
 2000f00:	0009883a 	mov	r4,zero
 2000f04:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 2000f08:	014004c4 	movi	r5,19
 2000f0c:	0009883a 	mov	r4,zero
 2000f10:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 2000f14:	01414e04 	movi	r5,1336
 2000f18:	0009883a 	mov	r4,zero
 2000f1c:	20004180 	call	2000418 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
 2000f20:	01415d04 	movi	r5,1396
 2000f24:	0009883a 	mov	r4,zero
 2000f28:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
 2000f2c:	01400204 	movi	r5,8
 2000f30:	0009883a 	mov	r4,zero
 2000f34:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 2000f38:	0140a404 	movi	r5,656
 2000f3c:	0009883a 	mov	r4,zero
 2000f40:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 2000f44:	01400044 	movi	r5,1
 2000f48:	0009883a 	mov	r4,zero
 2000f4c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 2000f50:	014004c4 	movi	r5,19
 2000f54:	0009883a 	mov	r4,zero
 2000f58:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
 2000f5c:	01415104 	movi	r5,1348
 2000f60:	0009883a 	mov	r4,zero
 2000f64:	20004180 	call	2000418 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
 2000f68:	01415f04 	movi	r5,1404
 2000f6c:	0009883a 	mov	r4,zero
 2000f70:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
 2000f74:	01400084 	movi	r5,2
 2000f78:	0009883a 	mov	r4,zero
 2000f7c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 2000f80:	0140a404 	movi	r5,656
 2000f84:	0009883a 	mov	r4,zero
 2000f88:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
 2000f8c:	01401044 	movi	r5,65
 2000f90:	0009883a 	mov	r4,zero
 2000f94:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 2000f98:	014004c4 	movi	r5,19
 2000f9c:	0009883a 	mov	r4,zero
 2000fa0:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
 2000fa4:	01415404 	movi	r5,1360
 2000fa8:	0009883a 	mov	r4,zero
 2000fac:	20004180 	call	2000418 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
 2000fb0:	000b883a 	mov	r5,zero
 2000fb4:	0009883a 	mov	r4,zero
 2000fb8:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
 2000fbc:	000b883a 	mov	r5,zero
 2000fc0:	0009883a 	mov	r4,zero
 2000fc4:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
 2000fc8:	01408404 	movi	r5,528
 2000fcc:	0009883a 	mov	r4,zero
 2000fd0:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
 2000fd4:	01401044 	movi	r5,65
 2000fd8:	0009883a 	mov	r4,zero
 2000fdc:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 2000fe0:	014004c4 	movi	r5,19
 2000fe4:	0009883a 	mov	r4,zero
 2000fe8:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
 2000fec:	000b883a 	mov	r5,zero
 2000ff0:	0009883a 	mov	r4,zero
 2000ff4:	20004180 	call	2000418 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 2000ff8:	01414004 	movi	r5,1280
 2000ffc:	01006c04 	movi	r4,432
 2001000:	20006b40 	call	20006b4 <UsbWrite>
}
 2001004:	0001883a 	nop
 2001008:	e037883a 	mov	sp,fp
 200100c:	dfc00117 	ldw	ra,4(sp)
 2001010:	df000017 	ldw	fp,0(sp)
 2001014:	dec00204 	addi	sp,sp,8
 2001018:	f800283a 	ret

0200101c <UsbSetConfig>:

void UsbSetConfig()
{
 200101c:	defffe04 	addi	sp,sp,-8
 2001020:	dfc00115 	stw	ra,4(sp)
 2001024:	df000015 	stw	fp,0(sp)
 2001028:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 200102c:	01414004 	movi	r5,1280
 2001030:	01000084 	movi	r4,2
 2001034:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x050C);
 2001038:	01414304 	movi	r5,1292
 200103c:	0009883a 	mov	r4,zero
 2001040:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 2001044:	01400204 	movi	r5,8
 2001048:	0009883a 	mov	r4,zero
 200104c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 2001050:	0140b404 	movi	r5,720
 2001054:	0009883a 	mov	r4,zero
 2001058:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0001);
 200105c:	01400044 	movi	r5,1
 2001060:	0009883a 	mov	r4,zero
 2001064:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);
 2001068:	014004c4 	movi	r5,19
 200106c:	0009883a 	mov	r4,zero
 2001070:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0514);
 2001074:	01414504 	movi	r5,1300
 2001078:	0009883a 	mov	r4,zero
 200107c:	20004180 	call	2000418 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
 2001080:	01424004 	movi	r5,2304
 2001084:	0009883a 	mov	r4,zero
 2001088:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
 200108c:	01400044 	movi	r5,1
 2001090:	0009883a 	mov	r4,zero
 2001094:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);
 2001098:	000b883a 	mov	r5,zero
 200109c:	0009883a 	mov	r4,zero
 20010a0:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);
 20010a4:	000b883a 	mov	r5,zero
 20010a8:	0009883a 	mov	r4,zero
 20010ac:	20004180 	call	2000418 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
 20010b0:	000b883a 	mov	r5,zero
 20010b4:	0009883a 	mov	r4,zero
 20010b8:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
 20010bc:	000b883a 	mov	r5,zero
 20010c0:	0009883a 	mov	r4,zero
 20010c4:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
 20010c8:	0140a404 	movi	r5,656
 20010cc:	0009883a 	mov	r4,zero
 20010d0:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
 20010d4:	01401044 	movi	r5,65
 20010d8:	0009883a 	mov	r4,zero
 20010dc:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);
 20010e0:	014004c4 	movi	r5,19
 20010e4:	0009883a 	mov	r4,zero
 20010e8:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);
 20010ec:	000b883a 	mov	r5,zero
 20010f0:	0009883a 	mov	r4,zero
 20010f4:	20004180 	call	2000418 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 20010f8:	01414004 	movi	r5,1280
 20010fc:	01006c04 	movi	r4,432
 2001100:	20006b40 	call	20006b4 <UsbWrite>

}
 2001104:	0001883a 	nop
 2001108:	e037883a 	mov	sp,fp
 200110c:	dfc00117 	ldw	ra,4(sp)
 2001110:	df000017 	ldw	fp,0(sp)
 2001114:	dec00204 	addi	sp,sp,8
 2001118:	f800283a 	ret

0200111c <UsbClassRequest>:

void UsbClassRequest()
{
 200111c:	defffe04 	addi	sp,sp,-8
 2001120:	dfc00115 	stw	ra,4(sp)
 2001124:	df000015 	stw	fp,0(sp)
 2001128:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 200112c:	01414004 	movi	r5,1280
 2001130:	01000084 	movi	r4,2
 2001134:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x050C);
 2001138:	01414304 	movi	r5,1292
 200113c:	0009883a 	mov	r4,zero
 2001140:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 2001144:	01400204 	movi	r5,8
 2001148:	0009883a 	mov	r4,zero
 200114c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 2001150:	0140b404 	movi	r5,720
 2001154:	0009883a 	mov	r4,zero
 2001158:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0001);
 200115c:	01400044 	movi	r5,1
 2001160:	0009883a 	mov	r4,zero
 2001164:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);
 2001168:	014004c4 	movi	r5,19
 200116c:	0009883a 	mov	r4,zero
 2001170:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0514);
 2001174:	01414504 	movi	r5,1300
 2001178:	0009883a 	mov	r4,zero
 200117c:	20004180 	call	2000418 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
 2001180:	01428844 	movi	r5,2593
 2001184:	0009883a 	mov	r4,zero
 2001188:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
 200118c:	000b883a 	mov	r5,zero
 2001190:	0009883a 	mov	r4,zero
 2001194:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);
 2001198:	000b883a 	mov	r5,zero
 200119c:	0009883a 	mov	r4,zero
 20011a0:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);
 20011a4:	000b883a 	mov	r5,zero
 20011a8:	0009883a 	mov	r4,zero
 20011ac:	20004180 	call	2000418 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
 20011b0:	000b883a 	mov	r5,zero
 20011b4:	0009883a 	mov	r4,zero
 20011b8:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
 20011bc:	000b883a 	mov	r5,zero
 20011c0:	0009883a 	mov	r4,zero
 20011c4:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
 20011c8:	0140a404 	movi	r5,656
 20011cc:	0009883a 	mov	r4,zero
 20011d0:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
 20011d4:	01401044 	movi	r5,65
 20011d8:	0009883a 	mov	r4,zero
 20011dc:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);
 20011e0:	014004c4 	movi	r5,19
 20011e4:	0009883a 	mov	r4,zero
 20011e8:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);
 20011ec:	000b883a 	mov	r5,zero
 20011f0:	0009883a 	mov	r4,zero
 20011f4:	20004180 	call	2000418 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 20011f8:	01414004 	movi	r5,1280
 20011fc:	01006c04 	movi	r4,432
 2001200:	20006b40 	call	20006b4 <UsbWrite>
}
 2001204:	0001883a 	nop
 2001208:	e037883a 	mov	sp,fp
 200120c:	dfc00117 	ldw	ra,4(sp)
 2001210:	df000017 	ldw	fp,0(sp)
 2001214:	dec00204 	addi	sp,sp,8
 2001218:	f800283a 	ret

0200121c <UsbGetHidDesc>:


void UsbGetHidDesc()
{
 200121c:	defffe04 	addi	sp,sp,-8
 2001220:	dfc00115 	stw	ra,4(sp)
 2001224:	df000015 	stw	fp,0(sp)
 2001228:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 200122c:	01414004 	movi	r5,1280
 2001230:	01000084 	movi	r4,2
 2001234:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x050C);
 2001238:	01414304 	movi	r5,1292
 200123c:	0009883a 	mov	r4,zero
 2001240:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 2001244:	01400204 	movi	r5,8
 2001248:	0009883a 	mov	r4,zero
 200124c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 2001250:	0140b404 	movi	r5,720
 2001254:	0009883a 	mov	r4,zero
 2001258:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0001);
 200125c:	01400044 	movi	r5,1
 2001260:	0009883a 	mov	r4,zero
 2001264:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);
 2001268:	014004c4 	movi	r5,19
 200126c:	0009883a 	mov	r4,zero
 2001270:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0514);
 2001274:	01414504 	movi	r5,1300
 2001278:	0009883a 	mov	r4,zero
 200127c:	20004180 	call	2000418 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
 2001280:	0141a044 	movi	r5,1665
 2001284:	0009883a 	mov	r4,zero
 2001288:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
 200128c:	01484004 	movi	r5,8448
 2001290:	0009883a 	mov	r4,zero
 2001294:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 2001298:	000b883a 	mov	r5,zero
 200129c:	0009883a 	mov	r4,zero
 20012a0:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
 20012a4:	01401ec4 	movi	r5,123
 20012a8:	0009883a 	mov	r4,zero
 20012ac:	20004180 	call	2000418 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 20012b0:	01415104 	movi	r5,1348
 20012b4:	0009883a 	mov	r4,zero
 20012b8:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 20012bc:	01400204 	movi	r5,8
 20012c0:	0009883a 	mov	r4,zero
 20012c4:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 20012c8:	0140a404 	movi	r5,656
 20012cc:	0009883a 	mov	r4,zero
 20012d0:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 20012d4:	01401044 	movi	r5,65
 20012d8:	0009883a 	mov	r4,zero
 20012dc:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 20012e0:	014004c4 	movi	r5,19
 20012e4:	0009883a 	mov	r4,zero
 20012e8:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 20012ec:	01414804 	movi	r5,1312
 20012f0:	0009883a 	mov	r4,zero
 20012f4:	20004180 	call	2000418 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
 20012f8:	000b883a 	mov	r5,zero
 20012fc:	0009883a 	mov	r4,zero
 2001300:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 2001304:	000b883a 	mov	r5,zero
 2001308:	0009883a 	mov	r4,zero
 200130c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
 2001310:	01408404 	movi	r5,528
 2001314:	0009883a 	mov	r4,zero
 2001318:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 200131c:	01401044 	movi	r5,65
 2001320:	0009883a 	mov	r4,zero
 2001324:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 2001328:	014004c4 	movi	r5,19
 200132c:	0009883a 	mov	r4,zero
 2001330:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 2001334:	000b883a 	mov	r5,zero
 2001338:	0009883a 	mov	r4,zero
 200133c:	20004180 	call	2000418 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 2001340:	01414004 	movi	r5,1280
 2001344:	01006c04 	movi	r4,432
 2001348:	20006b40 	call	20006b4 <UsbWrite>

}
 200134c:	0001883a 	nop
 2001350:	e037883a 	mov	sp,fp
 2001354:	dfc00117 	ldw	ra,4(sp)
 2001358:	df000017 	ldw	fp,0(sp)
 200135c:	dec00204 	addi	sp,sp,8
 2001360:	f800283a 	ret

02001364 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
 2001364:	defffe04 	addi	sp,sp,-8
 2001368:	dfc00115 	stw	ra,4(sp)
 200136c:	df000015 	stw	fp,0(sp)
 2001370:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 2001374:	01414004 	movi	r5,1280
 2001378:	01000084 	movi	r4,2
 200137c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x050C);
 2001380:	01414304 	movi	r5,1292
 2001384:	0009883a 	mov	r4,zero
 2001388:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 200138c:	01400204 	movi	r5,8
 2001390:	0009883a 	mov	r4,zero
 2001394:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 2001398:	0140b404 	movi	r5,720
 200139c:	0009883a 	mov	r4,zero
 20013a0:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0001);
 20013a4:	01400044 	movi	r5,1
 20013a8:	0009883a 	mov	r4,zero
 20013ac:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);
 20013b0:	014004c4 	movi	r5,19
 20013b4:	0009883a 	mov	r4,zero
 20013b8:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0514);
 20013bc:	01414504 	movi	r5,1300
 20013c0:	0009883a 	mov	r4,zero
 20013c4:	20004180 	call	2000418 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
 20013c8:	0141a044 	movi	r5,1665
 20013cc:	0009883a 	mov	r4,zero
 20013d0:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
 20013d4:	01488004 	movi	r5,8704
 20013d8:	0009883a 	mov	r4,zero
 20013dc:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 20013e0:	000b883a 	mov	r5,zero
 20013e4:	0009883a 	mov	r4,zero
 20013e8:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
 20013ec:	01401ec4 	movi	r5,123
 20013f0:	0009883a 	mov	r4,zero
 20013f4:	20004180 	call	2000418 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
 20013f8:	01416004 	movi	r5,1408
 20013fc:	0009883a 	mov	r4,zero
 2001400:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 2001404:	01400204 	movi	r5,8
 2001408:	0009883a 	mov	r4,zero
 200140c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 2001410:	0140a404 	movi	r5,656
 2001414:	0009883a 	mov	r4,zero
 2001418:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 200141c:	01401044 	movi	r5,65
 2001420:	0009883a 	mov	r4,zero
 2001424:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 2001428:	014004c4 	movi	r5,19
 200142c:	0009883a 	mov	r4,zero
 2001430:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 2001434:	01414804 	movi	r5,1312
 2001438:	0009883a 	mov	r4,zero
 200143c:	20004180 	call	2000418 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
 2001440:	01416204 	movi	r5,1416
 2001444:	0009883a 	mov	r4,zero
 2001448:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 200144c:	01400204 	movi	r5,8
 2001450:	0009883a 	mov	r4,zero
 2001454:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 2001458:	0140a404 	movi	r5,656
 200145c:	0009883a 	mov	r4,zero
 2001460:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 2001464:	01400044 	movi	r5,1
 2001468:	0009883a 	mov	r4,zero
 200146c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 2001470:	014004c4 	movi	r5,19
 2001474:	0009883a 	mov	r4,zero
 2001478:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 200147c:	01414b04 	movi	r5,1324
 2001480:	0009883a 	mov	r4,zero
 2001484:	20004180 	call	2000418 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
 2001488:	01416404 	movi	r5,1424
 200148c:	0009883a 	mov	r4,zero
 2001490:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 2001494:	01400204 	movi	r5,8
 2001498:	0009883a 	mov	r4,zero
 200149c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 20014a0:	0140a404 	movi	r5,656
 20014a4:	0009883a 	mov	r4,zero
 20014a8:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 20014ac:	01401044 	movi	r5,65
 20014b0:	0009883a 	mov	r4,zero
 20014b4:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 20014b8:	014004c4 	movi	r5,19
 20014bc:	0009883a 	mov	r4,zero
 20014c0:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 20014c4:	01414e04 	movi	r5,1336
 20014c8:	0009883a 	mov	r4,zero
 20014cc:	20004180 	call	2000418 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
 20014d0:	01416604 	movi	r5,1432
 20014d4:	0009883a 	mov	r4,zero
 20014d8:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
 20014dc:	01400204 	movi	r5,8
 20014e0:	0009883a 	mov	r4,zero
 20014e4:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 20014e8:	0140a404 	movi	r5,656
 20014ec:	0009883a 	mov	r4,zero
 20014f0:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 20014f4:	01400044 	movi	r5,1
 20014f8:	0009883a 	mov	r4,zero
 20014fc:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 2001500:	014004c4 	movi	r5,19
 2001504:	0009883a 	mov	r4,zero
 2001508:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
 200150c:	01415104 	movi	r5,1348
 2001510:	0009883a 	mov	r4,zero
 2001514:	20004180 	call	2000418 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
 2001518:	01416804 	movi	r5,1440
 200151c:	0009883a 	mov	r4,zero
 2001520:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 2001524:	01400204 	movi	r5,8
 2001528:	0009883a 	mov	r4,zero
 200152c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 2001530:	0140a404 	movi	r5,656
 2001534:	0009883a 	mov	r4,zero
 2001538:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
 200153c:	01401044 	movi	r5,65
 2001540:	0009883a 	mov	r4,zero
 2001544:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 2001548:	014004c4 	movi	r5,19
 200154c:	0009883a 	mov	r4,zero
 2001550:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
 2001554:	01415404 	movi	r5,1360
 2001558:	0009883a 	mov	r4,zero
 200155c:	20004180 	call	2000418 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
 2001560:	01416a04 	movi	r5,1448
 2001564:	0009883a 	mov	r4,zero
 2001568:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 200156c:	01400204 	movi	r5,8
 2001570:	0009883a 	mov	r4,zero
 2001574:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 2001578:	0140a404 	movi	r5,656
 200157c:	0009883a 	mov	r4,zero
 2001580:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 2001584:	01400044 	movi	r5,1
 2001588:	0009883a 	mov	r4,zero
 200158c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 2001590:	014004c4 	movi	r5,19
 2001594:	0009883a 	mov	r4,zero
 2001598:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
 200159c:	01415704 	movi	r5,1372
 20015a0:	0009883a 	mov	r4,zero
 20015a4:	20004180 	call	2000418 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
 20015a8:	01416c04 	movi	r5,1456
 20015ac:	0009883a 	mov	r4,zero
 20015b0:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 20015b4:	01400204 	movi	r5,8
 20015b8:	0009883a 	mov	r4,zero
 20015bc:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
 20015c0:	0140a404 	movi	r5,656
 20015c4:	0009883a 	mov	r4,zero
 20015c8:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
 20015cc:	01401044 	movi	r5,65
 20015d0:	0009883a 	mov	r4,zero
 20015d4:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 20015d8:	014004c4 	movi	r5,19
 20015dc:	0009883a 	mov	r4,zero
 20015e0:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
 20015e4:	01415a04 	movi	r5,1384
 20015e8:	0009883a 	mov	r4,zero
 20015ec:	20004180 	call	2000418 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
 20015f0:	01416e04 	movi	r5,1464
 20015f4:	0009883a 	mov	r4,zero
 20015f8:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
 20015fc:	014000c4 	movi	r5,3
 2001600:	0009883a 	mov	r4,zero
 2001604:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 2001608:	0140a404 	movi	r5,656
 200160c:	0009883a 	mov	r4,zero
 2001610:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 2001614:	01400044 	movi	r5,1
 2001618:	0009883a 	mov	r4,zero
 200161c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
 2001620:	014004c4 	movi	r5,19
 2001624:	0009883a 	mov	r4,zero
 2001628:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
 200162c:	01415d04 	movi	r5,1396
 2001630:	0009883a 	mov	r4,zero
 2001634:	20004180 	call	2000418 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
 2001638:	000b883a 	mov	r5,zero
 200163c:	0009883a 	mov	r4,zero
 2001640:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 2001644:	000b883a 	mov	r5,zero
 2001648:	0009883a 	mov	r4,zero
 200164c:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
 2001650:	01408404 	movi	r5,528
 2001654:	0009883a 	mov	r4,zero
 2001658:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 200165c:	01401044 	movi	r5,65
 2001660:	0009883a 	mov	r4,zero
 2001664:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 2001668:	014004c4 	movi	r5,19
 200166c:	0009883a 	mov	r4,zero
 2001670:	20004180 	call	2000418 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 2001674:	000b883a 	mov	r5,zero
 2001678:	0009883a 	mov	r4,zero
 200167c:	20004180 	call	2000418 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 2001680:	01414004 	movi	r5,1280
 2001684:	01006c04 	movi	r4,432
 2001688:	20006b40 	call	20006b4 <UsbWrite>

}
 200168c:	0001883a 	nop
 2001690:	e037883a 	mov	sp,fp
 2001694:	dfc00117 	ldw	ra,4(sp)
 2001698:	df000017 	ldw	fp,0(sp)
 200169c:	dec00204 	addi	sp,sp,8
 20016a0:	f800283a 	ret

020016a4 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
 20016a4:	defffd04 	addi	sp,sp,-12
 20016a8:	dfc00215 	stw	ra,8(sp)
 20016ac:	df000115 	stw	fp,4(sp)
 20016b0:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
 20016b4:	01005104 	movi	r4,324
 20016b8:	200070c0 	call	200070c <UsbRead>
 20016bc:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
 20016c0:	000b883a 	mov	r5,zero
 20016c4:	01005104 	movi	r4,324
 20016c8:	20006b40 	call	20006b4 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 20016cc:	00000d06 	br	2001704 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
 20016d0:	e0bfff0b 	ldhu	r2,-4(fp)
 20016d4:	10000526 	beq	r2,zero,20016ec <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
 20016d8:	e0bfff0b 	ldhu	r2,-4(fp)
 20016dc:	100b883a 	mov	r5,r2
 20016e0:	01008074 	movhi	r4,513
 20016e4:	2103f304 	addi	r4,r4,4044
 20016e8:	20018800 	call	2001880 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
 20016ec:	01005104 	movi	r4,324
 20016f0:	200070c0 	call	200070c <UsbRead>
 20016f4:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 20016f8:	000b883a 	mov	r5,zero
 20016fc:	01005104 	movi	r4,324
 2001700:	20006b40 	call	20006b4 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 2001704:	e0bfff0b 	ldhu	r2,-4(fp)
 2001708:	10840018 	cmpnei	r2,r2,4096
 200170c:	103ff01e 	bne	r2,zero,20016d0 <__alt_data_end+0xff0016d0>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
 2001710:	e0bfff0b 	ldhu	r2,-4(fp)
}
 2001714:	e037883a 	mov	sp,fp
 2001718:	dfc00117 	ldw	ra,4(sp)
 200171c:	df000017 	ldw	fp,0(sp)
 2001720:	dec00204 	addi	sp,sp,8
 2001724:	f800283a 	ret

02001728 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
 2001728:	defffd04 	addi	sp,sp,-12
 200172c:	dfc00215 	stw	ra,8(sp)
 2001730:	df000115 	stw	fp,4(sp)
 2001734:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
 2001738:	010000c4 	movi	r4,3
 200173c:	20004880 	call	2000488 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
 2001740:	01005104 	movi	r4,324
 2001744:	200070c0 	call	200070c <UsbRead>
 2001748:	10bfffcc 	andi	r2,r2,65535
 200174c:	10840018 	cmpnei	r2,r2,4096
 2001750:	1000091e 	bne	r2,zero,2001778 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 2001754:	000b883a 	mov	r5,zero
 2001758:	01005104 	movi	r4,324
 200175c:	20006b40 	call	20006b4 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 2001760:	0001883a 	nop
 2001764:	010000c4 	movi	r4,3
 2001768:	20004880 	call	2000488 <IO_read>
 200176c:	10bfffcc 	andi	r2,r2,65535
 2001770:	1080040c 	andi	r2,r2,16
 2001774:	103ffb26 	beq	r2,zero,2001764 <__alt_data_end+0xff001764>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
 2001778:	01414204 	movi	r5,1288
 200177c:	01000084 	movi	r4,2
 2001780:	20004180 	call	2000418 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 2001784:	0009883a 	mov	r4,zero
 2001788:	20004880 	call	2000488 <IO_read>
 200178c:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
 2001790:	e0bfff0b 	ldhu	r2,-4(fp)
}
 2001794:	e037883a 	mov	sp,fp
 2001798:	dfc00117 	ldw	ra,4(sp)
 200179c:	df000017 	ldw	fp,0(sp)
 20017a0:	dec00204 	addi	sp,sp,8
 20017a4:	f800283a 	ret

020017a8 <UsbPrintMem>:


void UsbPrintMem()
{
 20017a8:	defffc04 	addi	sp,sp,-16
 20017ac:	dfc00315 	stw	ra,12(sp)
 20017b0:	df000215 	stw	fp,8(sp)
 20017b4:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
 20017b8:	01414004 	movi	r5,1280
 20017bc:	01000084 	movi	r4,2
 20017c0:	20004180 	call	2000418 <IO_write>
	for (i = 0; i <= 200; i += 2)
 20017c4:	e03ffe15 	stw	zero,-8(fp)
 20017c8:	00000e06 	br	2001804 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
 20017cc:	0009883a 	mov	r4,zero
 20017d0:	20004880 	call	2000488 <IO_read>
 20017d4:	10bfffcc 	andi	r2,r2,65535
 20017d8:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
 20017dc:	e0bffe17 	ldw	r2,-8(fp)
 20017e0:	10814004 	addi	r2,r2,1280
 20017e4:	e1bfff17 	ldw	r6,-4(fp)
 20017e8:	100b883a 	mov	r5,r2
 20017ec:	01008074 	movhi	r4,513
 20017f0:	2103fb04 	addi	r4,r4,4076
 20017f4:	20018800 	call	2001880 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
 20017f8:	e0bffe17 	ldw	r2,-8(fp)
 20017fc:	10800084 	addi	r2,r2,2
 2001800:	e0bffe15 	stw	r2,-8(fp)
 2001804:	e0bffe17 	ldw	r2,-8(fp)
 2001808:	10803250 	cmplti	r2,r2,201
 200180c:	103fef1e 	bne	r2,zero,20017cc <__alt_data_end+0xff0017cc>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
 2001810:	0001883a 	nop
 2001814:	e037883a 	mov	sp,fp
 2001818:	dfc00117 	ldw	ra,4(sp)
 200181c:	df000017 	ldw	fp,0(sp)
 2001820:	dec00204 	addi	sp,sp,8
 2001824:	f800283a 	ret

02001828 <__mulsi3>:
 2001828:	0005883a 	mov	r2,zero
 200182c:	20000726 	beq	r4,zero,200184c <__mulsi3+0x24>
 2001830:	20c0004c 	andi	r3,r4,1
 2001834:	2008d07a 	srli	r4,r4,1
 2001838:	18000126 	beq	r3,zero,2001840 <__mulsi3+0x18>
 200183c:	1145883a 	add	r2,r2,r5
 2001840:	294b883a 	add	r5,r5,r5
 2001844:	203ffa1e 	bne	r4,zero,2001830 <__alt_data_end+0xff001830>
 2001848:	f800283a 	ret
 200184c:	f800283a 	ret

02001850 <_printf_r>:
 2001850:	defffd04 	addi	sp,sp,-12
 2001854:	2805883a 	mov	r2,r5
 2001858:	dfc00015 	stw	ra,0(sp)
 200185c:	d9800115 	stw	r6,4(sp)
 2001860:	d9c00215 	stw	r7,8(sp)
 2001864:	21400217 	ldw	r5,8(r4)
 2001868:	d9c00104 	addi	r7,sp,4
 200186c:	100d883a 	mov	r6,r2
 2001870:	2001a280 	call	2001a28 <___vfprintf_internal_r>
 2001874:	dfc00017 	ldw	ra,0(sp)
 2001878:	dec00304 	addi	sp,sp,12
 200187c:	f800283a 	ret

02001880 <printf>:
 2001880:	defffc04 	addi	sp,sp,-16
 2001884:	dfc00015 	stw	ra,0(sp)
 2001888:	d9400115 	stw	r5,4(sp)
 200188c:	d9800215 	stw	r6,8(sp)
 2001890:	d9c00315 	stw	r7,12(sp)
 2001894:	00808074 	movhi	r2,513
 2001898:	108b6c04 	addi	r2,r2,11696
 200189c:	10800017 	ldw	r2,0(r2)
 20018a0:	200b883a 	mov	r5,r4
 20018a4:	d9800104 	addi	r6,sp,4
 20018a8:	11000217 	ldw	r4,8(r2)
 20018ac:	2003d040 	call	2003d04 <__vfprintf_internal>
 20018b0:	dfc00017 	ldw	ra,0(sp)
 20018b4:	dec00404 	addi	sp,sp,16
 20018b8:	f800283a 	ret

020018bc <_puts_r>:
 20018bc:	defff604 	addi	sp,sp,-40
 20018c0:	dc000715 	stw	r16,28(sp)
 20018c4:	2021883a 	mov	r16,r4
 20018c8:	2809883a 	mov	r4,r5
 20018cc:	dc400815 	stw	r17,32(sp)
 20018d0:	dfc00915 	stw	ra,36(sp)
 20018d4:	2823883a 	mov	r17,r5
 20018d8:	20019900 	call	2001990 <strlen>
 20018dc:	10c00044 	addi	r3,r2,1
 20018e0:	d8800115 	stw	r2,4(sp)
 20018e4:	00808074 	movhi	r2,513
 20018e8:	10840004 	addi	r2,r2,4096
 20018ec:	d8800215 	stw	r2,8(sp)
 20018f0:	00800044 	movi	r2,1
 20018f4:	d8800315 	stw	r2,12(sp)
 20018f8:	00800084 	movi	r2,2
 20018fc:	dc400015 	stw	r17,0(sp)
 2001900:	d8c00615 	stw	r3,24(sp)
 2001904:	dec00415 	stw	sp,16(sp)
 2001908:	d8800515 	stw	r2,20(sp)
 200190c:	80000226 	beq	r16,zero,2001918 <_puts_r+0x5c>
 2001910:	80800e17 	ldw	r2,56(r16)
 2001914:	10001426 	beq	r2,zero,2001968 <_puts_r+0xac>
 2001918:	81400217 	ldw	r5,8(r16)
 200191c:	2880030b 	ldhu	r2,12(r5)
 2001920:	10c8000c 	andi	r3,r2,8192
 2001924:	1800061e 	bne	r3,zero,2001940 <_puts_r+0x84>
 2001928:	29001917 	ldw	r4,100(r5)
 200192c:	00f7ffc4 	movi	r3,-8193
 2001930:	10880014 	ori	r2,r2,8192
 2001934:	20c6703a 	and	r3,r4,r3
 2001938:	2880030d 	sth	r2,12(r5)
 200193c:	28c01915 	stw	r3,100(r5)
 2001940:	d9800404 	addi	r6,sp,16
 2001944:	8009883a 	mov	r4,r16
 2001948:	200626c0 	call	200626c <__sfvwrite_r>
 200194c:	1000091e 	bne	r2,zero,2001974 <_puts_r+0xb8>
 2001950:	00800284 	movi	r2,10
 2001954:	dfc00917 	ldw	ra,36(sp)
 2001958:	dc400817 	ldw	r17,32(sp)
 200195c:	dc000717 	ldw	r16,28(sp)
 2001960:	dec00a04 	addi	sp,sp,40
 2001964:	f800283a 	ret
 2001968:	8009883a 	mov	r4,r16
 200196c:	2005de80 	call	2005de8 <__sinit>
 2001970:	003fe906 	br	2001918 <__alt_data_end+0xff001918>
 2001974:	00bfffc4 	movi	r2,-1
 2001978:	003ff606 	br	2001954 <__alt_data_end+0xff001954>

0200197c <puts>:
 200197c:	00808074 	movhi	r2,513
 2001980:	108b6c04 	addi	r2,r2,11696
 2001984:	200b883a 	mov	r5,r4
 2001988:	11000017 	ldw	r4,0(r2)
 200198c:	20018bc1 	jmpi	20018bc <_puts_r>

02001990 <strlen>:
 2001990:	208000cc 	andi	r2,r4,3
 2001994:	10002026 	beq	r2,zero,2001a18 <strlen+0x88>
 2001998:	20800007 	ldb	r2,0(r4)
 200199c:	10002026 	beq	r2,zero,2001a20 <strlen+0x90>
 20019a0:	2005883a 	mov	r2,r4
 20019a4:	00000206 	br	20019b0 <strlen+0x20>
 20019a8:	10c00007 	ldb	r3,0(r2)
 20019ac:	18001826 	beq	r3,zero,2001a10 <strlen+0x80>
 20019b0:	10800044 	addi	r2,r2,1
 20019b4:	10c000cc 	andi	r3,r2,3
 20019b8:	183ffb1e 	bne	r3,zero,20019a8 <__alt_data_end+0xff0019a8>
 20019bc:	10c00017 	ldw	r3,0(r2)
 20019c0:	01ffbff4 	movhi	r7,65279
 20019c4:	39ffbfc4 	addi	r7,r7,-257
 20019c8:	00ca303a 	nor	r5,zero,r3
 20019cc:	01a02074 	movhi	r6,32897
 20019d0:	19c7883a 	add	r3,r3,r7
 20019d4:	31a02004 	addi	r6,r6,-32640
 20019d8:	1946703a 	and	r3,r3,r5
 20019dc:	1986703a 	and	r3,r3,r6
 20019e0:	1800091e 	bne	r3,zero,2001a08 <strlen+0x78>
 20019e4:	10800104 	addi	r2,r2,4
 20019e8:	10c00017 	ldw	r3,0(r2)
 20019ec:	19cb883a 	add	r5,r3,r7
 20019f0:	00c6303a 	nor	r3,zero,r3
 20019f4:	28c6703a 	and	r3,r5,r3
 20019f8:	1986703a 	and	r3,r3,r6
 20019fc:	183ff926 	beq	r3,zero,20019e4 <__alt_data_end+0xff0019e4>
 2001a00:	00000106 	br	2001a08 <strlen+0x78>
 2001a04:	10800044 	addi	r2,r2,1
 2001a08:	10c00007 	ldb	r3,0(r2)
 2001a0c:	183ffd1e 	bne	r3,zero,2001a04 <__alt_data_end+0xff001a04>
 2001a10:	1105c83a 	sub	r2,r2,r4
 2001a14:	f800283a 	ret
 2001a18:	2005883a 	mov	r2,r4
 2001a1c:	003fe706 	br	20019bc <__alt_data_end+0xff0019bc>
 2001a20:	0005883a 	mov	r2,zero
 2001a24:	f800283a 	ret

02001a28 <___vfprintf_internal_r>:
 2001a28:	deffb804 	addi	sp,sp,-288
 2001a2c:	dfc04715 	stw	ra,284(sp)
 2001a30:	ddc04515 	stw	r23,276(sp)
 2001a34:	dd404315 	stw	r21,268(sp)
 2001a38:	d9002d15 	stw	r4,180(sp)
 2001a3c:	282f883a 	mov	r23,r5
 2001a40:	302b883a 	mov	r21,r6
 2001a44:	d9c02e15 	stw	r7,184(sp)
 2001a48:	df004615 	stw	fp,280(sp)
 2001a4c:	dd804415 	stw	r22,272(sp)
 2001a50:	dd004215 	stw	r20,264(sp)
 2001a54:	dcc04115 	stw	r19,260(sp)
 2001a58:	dc804015 	stw	r18,256(sp)
 2001a5c:	dc403f15 	stw	r17,252(sp)
 2001a60:	dc003e15 	stw	r16,248(sp)
 2001a64:	20069680 	call	2006968 <_localeconv_r>
 2001a68:	10800017 	ldw	r2,0(r2)
 2001a6c:	1009883a 	mov	r4,r2
 2001a70:	d8803415 	stw	r2,208(sp)
 2001a74:	20019900 	call	2001990 <strlen>
 2001a78:	d8803715 	stw	r2,220(sp)
 2001a7c:	d8802d17 	ldw	r2,180(sp)
 2001a80:	10000226 	beq	r2,zero,2001a8c <___vfprintf_internal_r+0x64>
 2001a84:	10800e17 	ldw	r2,56(r2)
 2001a88:	1000fb26 	beq	r2,zero,2001e78 <___vfprintf_internal_r+0x450>
 2001a8c:	b880030b 	ldhu	r2,12(r23)
 2001a90:	10c8000c 	andi	r3,r2,8192
 2001a94:	1800061e 	bne	r3,zero,2001ab0 <___vfprintf_internal_r+0x88>
 2001a98:	b9001917 	ldw	r4,100(r23)
 2001a9c:	00f7ffc4 	movi	r3,-8193
 2001aa0:	10880014 	ori	r2,r2,8192
 2001aa4:	20c6703a 	and	r3,r4,r3
 2001aa8:	b880030d 	sth	r2,12(r23)
 2001aac:	b8c01915 	stw	r3,100(r23)
 2001ab0:	10c0020c 	andi	r3,r2,8
 2001ab4:	1800c326 	beq	r3,zero,2001dc4 <___vfprintf_internal_r+0x39c>
 2001ab8:	b8c00417 	ldw	r3,16(r23)
 2001abc:	1800c126 	beq	r3,zero,2001dc4 <___vfprintf_internal_r+0x39c>
 2001ac0:	1080068c 	andi	r2,r2,26
 2001ac4:	00c00284 	movi	r3,10
 2001ac8:	10c0c626 	beq	r2,r3,2001de4 <___vfprintf_internal_r+0x3bc>
 2001acc:	d8c00404 	addi	r3,sp,16
 2001ad0:	05008074 	movhi	r20,513
 2001ad4:	d9001e04 	addi	r4,sp,120
 2001ad8:	a5041184 	addi	r20,r20,4166
 2001adc:	d8c01e15 	stw	r3,120(sp)
 2001ae0:	d8002015 	stw	zero,128(sp)
 2001ae4:	d8001f15 	stw	zero,124(sp)
 2001ae8:	d8003315 	stw	zero,204(sp)
 2001aec:	d8003615 	stw	zero,216(sp)
 2001af0:	d8003815 	stw	zero,224(sp)
 2001af4:	1811883a 	mov	r8,r3
 2001af8:	d8003915 	stw	zero,228(sp)
 2001afc:	d8003a15 	stw	zero,232(sp)
 2001b00:	d8002f15 	stw	zero,188(sp)
 2001b04:	d9002815 	stw	r4,160(sp)
 2001b08:	a8800007 	ldb	r2,0(r21)
 2001b0c:	10028b26 	beq	r2,zero,200253c <___vfprintf_internal_r+0xb14>
 2001b10:	00c00944 	movi	r3,37
 2001b14:	a823883a 	mov	r17,r21
 2001b18:	10c0021e 	bne	r2,r3,2001b24 <___vfprintf_internal_r+0xfc>
 2001b1c:	00001406 	br	2001b70 <___vfprintf_internal_r+0x148>
 2001b20:	10c00326 	beq	r2,r3,2001b30 <___vfprintf_internal_r+0x108>
 2001b24:	8c400044 	addi	r17,r17,1
 2001b28:	88800007 	ldb	r2,0(r17)
 2001b2c:	103ffc1e 	bne	r2,zero,2001b20 <__alt_data_end+0xff001b20>
 2001b30:	8d61c83a 	sub	r16,r17,r21
 2001b34:	80000e26 	beq	r16,zero,2001b70 <___vfprintf_internal_r+0x148>
 2001b38:	d8c02017 	ldw	r3,128(sp)
 2001b3c:	d8801f17 	ldw	r2,124(sp)
 2001b40:	45400015 	stw	r21,0(r8)
 2001b44:	1c07883a 	add	r3,r3,r16
 2001b48:	10800044 	addi	r2,r2,1
 2001b4c:	d8c02015 	stw	r3,128(sp)
 2001b50:	44000115 	stw	r16,4(r8)
 2001b54:	d8801f15 	stw	r2,124(sp)
 2001b58:	00c001c4 	movi	r3,7
 2001b5c:	1880a916 	blt	r3,r2,2001e04 <___vfprintf_internal_r+0x3dc>
 2001b60:	42000204 	addi	r8,r8,8
 2001b64:	d9402f17 	ldw	r5,188(sp)
 2001b68:	2c0b883a 	add	r5,r5,r16
 2001b6c:	d9402f15 	stw	r5,188(sp)
 2001b70:	88800007 	ldb	r2,0(r17)
 2001b74:	1000aa26 	beq	r2,zero,2001e20 <___vfprintf_internal_r+0x3f8>
 2001b78:	8d400044 	addi	r21,r17,1
 2001b7c:	8c400047 	ldb	r17,1(r17)
 2001b80:	0021883a 	mov	r16,zero
 2001b84:	00bfffc4 	movi	r2,-1
 2001b88:	0025883a 	mov	r18,zero
 2001b8c:	dc002905 	stb	r16,164(sp)
 2001b90:	d8002785 	stb	zero,158(sp)
 2001b94:	d8002b05 	stb	zero,172(sp)
 2001b98:	d8802a15 	stw	r2,168(sp)
 2001b9c:	d8003115 	stw	zero,196(sp)
 2001ba0:	04c01604 	movi	r19,88
 2001ba4:	05800244 	movi	r22,9
 2001ba8:	9021883a 	mov	r16,r18
 2001bac:	4039883a 	mov	fp,r8
 2001bb0:	ad400044 	addi	r21,r21,1
 2001bb4:	88bff804 	addi	r2,r17,-32
 2001bb8:	98833236 	bltu	r19,r2,2002884 <___vfprintf_internal_r+0xe5c>
 2001bbc:	100490ba 	slli	r2,r2,2
 2001bc0:	00c08034 	movhi	r3,512
 2001bc4:	18c6f504 	addi	r3,r3,7124
 2001bc8:	10c5883a 	add	r2,r2,r3
 2001bcc:	10800017 	ldw	r2,0(r2)
 2001bd0:	1000683a 	jmp	r2
 2001bd4:	0200277c 	xorhi	r8,zero,157
 2001bd8:	02002884 	movi	r8,162
 2001bdc:	02002884 	movi	r8,162
 2001be0:	0200279c 	xori	r8,zero,158
 2001be4:	02002884 	movi	r8,162
 2001be8:	02002884 	movi	r8,162
 2001bec:	02002884 	movi	r8,162
 2001bf0:	02002884 	movi	r8,162
 2001bf4:	02002884 	movi	r8,162
 2001bf8:	02002884 	movi	r8,162
 2001bfc:	02001e84 	movi	r8,122
 2001c00:	0200268c 	andi	r8,zero,154
 2001c04:	02002884 	movi	r8,162
 2001c08:	02001d48 	cmpgei	r8,zero,117
 2001c0c:	02001ea8 	cmpgeui	r8,zero,122
 2001c10:	02002884 	movi	r8,162
 2001c14:	02001ef8 	rdprs	r8,zero,123
 2001c18:	02001f04 	movi	r8,124
 2001c1c:	02001f04 	movi	r8,124
 2001c20:	02001f04 	movi	r8,124
 2001c24:	02001f04 	movi	r8,124
 2001c28:	02001f04 	movi	r8,124
 2001c2c:	02001f04 	movi	r8,124
 2001c30:	02001f04 	movi	r8,124
 2001c34:	02001f04 	movi	r8,124
 2001c38:	02001f04 	movi	r8,124
 2001c3c:	02002884 	movi	r8,162
 2001c40:	02002884 	movi	r8,162
 2001c44:	02002884 	movi	r8,162
 2001c48:	02002884 	movi	r8,162
 2001c4c:	02002884 	movi	r8,162
 2001c50:	02002884 	movi	r8,162
 2001c54:	02002884 	movi	r8,162
 2001c58:	02002884 	movi	r8,162
 2001c5c:	02002884 	movi	r8,162
 2001c60:	02002884 	movi	r8,162
 2001c64:	02001f40 	call	2001f4 <__alt_mem_onchip_memory2_0+0x2001f4>
 2001c68:	02002008 	cmpgei	r8,zero,128
 2001c6c:	02002884 	movi	r8,162
 2001c70:	02002008 	cmpgei	r8,zero,128
 2001c74:	02002884 	movi	r8,162
 2001c78:	02002884 	movi	r8,162
 2001c7c:	02002884 	movi	r8,162
 2001c80:	02002884 	movi	r8,162
 2001c84:	020020b4 	movhi	r8,130
 2001c88:	02002884 	movi	r8,162
 2001c8c:	02002884 	movi	r8,162
 2001c90:	020020c0 	call	20020c <__alt_mem_onchip_memory2_0+0x20020c>
 2001c94:	02002884 	movi	r8,162
 2001c98:	02002884 	movi	r8,162
 2001c9c:	02002884 	movi	r8,162
 2001ca0:	02002884 	movi	r8,162
 2001ca4:	02002884 	movi	r8,162
 2001ca8:	02002544 	movi	r8,149
 2001cac:	02002884 	movi	r8,162
 2001cb0:	02002884 	movi	r8,162
 2001cb4:	020025b0 	cmpltui	r8,zero,150
 2001cb8:	02002884 	movi	r8,162
 2001cbc:	02002884 	movi	r8,162
 2001cc0:	02002884 	movi	r8,162
 2001cc4:	02002884 	movi	r8,162
 2001cc8:	02002884 	movi	r8,162
 2001ccc:	02002884 	movi	r8,162
 2001cd0:	02002884 	movi	r8,162
 2001cd4:	02002884 	movi	r8,162
 2001cd8:	02002884 	movi	r8,162
 2001cdc:	02002884 	movi	r8,162
 2001ce0:	02002828 	cmpgeui	r8,zero,160
 2001ce4:	020027a8 	cmpgeui	r8,zero,158
 2001ce8:	02002008 	cmpgei	r8,zero,128
 2001cec:	02002008 	cmpgei	r8,zero,128
 2001cf0:	02002008 	cmpgei	r8,zero,128
 2001cf4:	020027c8 	cmpgei	r8,zero,159
 2001cf8:	020027a8 	cmpgeui	r8,zero,158
 2001cfc:	02002884 	movi	r8,162
 2001d00:	02002884 	movi	r8,162
 2001d04:	020027d4 	movui	r8,159
 2001d08:	02002884 	movi	r8,162
 2001d0c:	020027e8 	cmpgeui	r8,zero,159
 2001d10:	0200266c 	andhi	r8,zero,153
 2001d14:	02001d54 	movui	r8,117
 2001d18:	020026a4 	muli	r8,zero,154
 2001d1c:	02002884 	movi	r8,162
 2001d20:	020026b0 	cmpltui	r8,zero,154
 2001d24:	02002884 	movi	r8,162
 2001d28:	02002714 	movui	r8,156
 2001d2c:	02002884 	movi	r8,162
 2001d30:	02002884 	movi	r8,162
 2001d34:	02002734 	movhi	r8,156
 2001d38:	d8c03117 	ldw	r3,196(sp)
 2001d3c:	d8802e15 	stw	r2,184(sp)
 2001d40:	00c7c83a 	sub	r3,zero,r3
 2001d44:	d8c03115 	stw	r3,196(sp)
 2001d48:	84000114 	ori	r16,r16,4
 2001d4c:	ac400007 	ldb	r17,0(r21)
 2001d50:	003f9706 	br	2001bb0 <__alt_data_end+0xff001bb0>
 2001d54:	00800c04 	movi	r2,48
 2001d58:	d8802705 	stb	r2,156(sp)
 2001d5c:	00801e04 	movi	r2,120
 2001d60:	d8802745 	stb	r2,157(sp)
 2001d64:	d9002a17 	ldw	r4,168(sp)
 2001d68:	d8802e17 	ldw	r2,184(sp)
 2001d6c:	d8002785 	stb	zero,158(sp)
 2001d70:	e011883a 	mov	r8,fp
 2001d74:	10c00104 	addi	r3,r2,4
 2001d78:	14c00017 	ldw	r19,0(r2)
 2001d7c:	002d883a 	mov	r22,zero
 2001d80:	80800094 	ori	r2,r16,2
 2001d84:	2002ca16 	blt	r4,zero,20028b0 <___vfprintf_internal_r+0xe88>
 2001d88:	00bfdfc4 	movi	r2,-129
 2001d8c:	80a4703a 	and	r18,r16,r2
 2001d90:	d8c02e15 	stw	r3,184(sp)
 2001d94:	94800094 	ori	r18,r18,2
 2001d98:	9802b41e 	bne	r19,zero,200286c <___vfprintf_internal_r+0xe44>
 2001d9c:	01408074 	movhi	r5,513
 2001da0:	29440a04 	addi	r5,r5,4136
 2001da4:	d9403915 	stw	r5,228(sp)
 2001da8:	04401e04 	movi	r17,120
 2001dac:	d8802a17 	ldw	r2,168(sp)
 2001db0:	0039883a 	mov	fp,zero
 2001db4:	1001fa26 	beq	r2,zero,20025a0 <___vfprintf_internal_r+0xb78>
 2001db8:	0027883a 	mov	r19,zero
 2001dbc:	002d883a 	mov	r22,zero
 2001dc0:	00021906 	br	2002628 <___vfprintf_internal_r+0xc00>
 2001dc4:	d9002d17 	ldw	r4,180(sp)
 2001dc8:	b80b883a 	mov	r5,r23
 2001dcc:	2003ddc0 	call	2003ddc <__swsetup_r>
 2001dd0:	1005dc1e 	bne	r2,zero,2003544 <___vfprintf_internal_r+0x1b1c>
 2001dd4:	b880030b 	ldhu	r2,12(r23)
 2001dd8:	00c00284 	movi	r3,10
 2001ddc:	1080068c 	andi	r2,r2,26
 2001de0:	10ff3a1e 	bne	r2,r3,2001acc <__alt_data_end+0xff001acc>
 2001de4:	b880038f 	ldh	r2,14(r23)
 2001de8:	103f3816 	blt	r2,zero,2001acc <__alt_data_end+0xff001acc>
 2001dec:	d9c02e17 	ldw	r7,184(sp)
 2001df0:	d9002d17 	ldw	r4,180(sp)
 2001df4:	a80d883a 	mov	r6,r21
 2001df8:	b80b883a 	mov	r5,r23
 2001dfc:	2003d200 	call	2003d20 <__sbprintf>
 2001e00:	00001106 	br	2001e48 <___vfprintf_internal_r+0x420>
 2001e04:	d9002d17 	ldw	r4,180(sp)
 2001e08:	d9801e04 	addi	r6,sp,120
 2001e0c:	b80b883a 	mov	r5,r23
 2001e10:	20092080 	call	2009208 <__sprint_r>
 2001e14:	1000081e 	bne	r2,zero,2001e38 <___vfprintf_internal_r+0x410>
 2001e18:	da000404 	addi	r8,sp,16
 2001e1c:	003f5106 	br	2001b64 <__alt_data_end+0xff001b64>
 2001e20:	d8802017 	ldw	r2,128(sp)
 2001e24:	10000426 	beq	r2,zero,2001e38 <___vfprintf_internal_r+0x410>
 2001e28:	d9002d17 	ldw	r4,180(sp)
 2001e2c:	d9801e04 	addi	r6,sp,120
 2001e30:	b80b883a 	mov	r5,r23
 2001e34:	20092080 	call	2009208 <__sprint_r>
 2001e38:	b880030b 	ldhu	r2,12(r23)
 2001e3c:	1080100c 	andi	r2,r2,64
 2001e40:	1005c01e 	bne	r2,zero,2003544 <___vfprintf_internal_r+0x1b1c>
 2001e44:	d8802f17 	ldw	r2,188(sp)
 2001e48:	dfc04717 	ldw	ra,284(sp)
 2001e4c:	df004617 	ldw	fp,280(sp)
 2001e50:	ddc04517 	ldw	r23,276(sp)
 2001e54:	dd804417 	ldw	r22,272(sp)
 2001e58:	dd404317 	ldw	r21,268(sp)
 2001e5c:	dd004217 	ldw	r20,264(sp)
 2001e60:	dcc04117 	ldw	r19,260(sp)
 2001e64:	dc804017 	ldw	r18,256(sp)
 2001e68:	dc403f17 	ldw	r17,252(sp)
 2001e6c:	dc003e17 	ldw	r16,248(sp)
 2001e70:	dec04804 	addi	sp,sp,288
 2001e74:	f800283a 	ret
 2001e78:	d9002d17 	ldw	r4,180(sp)
 2001e7c:	2005de80 	call	2005de8 <__sinit>
 2001e80:	003f0206 	br	2001a8c <__alt_data_end+0xff001a8c>
 2001e84:	d9002e17 	ldw	r4,184(sp)
 2001e88:	d9402e17 	ldw	r5,184(sp)
 2001e8c:	21000017 	ldw	r4,0(r4)
 2001e90:	28800104 	addi	r2,r5,4
 2001e94:	d9003115 	stw	r4,196(sp)
 2001e98:	203fa716 	blt	r4,zero,2001d38 <__alt_data_end+0xff001d38>
 2001e9c:	d8802e15 	stw	r2,184(sp)
 2001ea0:	ac400007 	ldb	r17,0(r21)
 2001ea4:	003f4206 	br	2001bb0 <__alt_data_end+0xff001bb0>
 2001ea8:	ac400007 	ldb	r17,0(r21)
 2001eac:	01000a84 	movi	r4,42
 2001eb0:	a8c00044 	addi	r3,r21,1
 2001eb4:	89075826 	beq	r17,r4,2003c18 <___vfprintf_internal_r+0x21f0>
 2001eb8:	8cbff404 	addi	r18,r17,-48
 2001ebc:	b486ae36 	bltu	r22,r18,2003978 <___vfprintf_internal_r+0x1f50>
 2001ec0:	0009883a 	mov	r4,zero
 2001ec4:	1823883a 	mov	r17,r3
 2001ec8:	01400284 	movi	r5,10
 2001ecc:	20018280 	call	2001828 <__mulsi3>
 2001ed0:	88c00007 	ldb	r3,0(r17)
 2001ed4:	1489883a 	add	r4,r2,r18
 2001ed8:	8d400044 	addi	r21,r17,1
 2001edc:	1cbff404 	addi	r18,r3,-48
 2001ee0:	a823883a 	mov	r17,r21
 2001ee4:	b4bff82e 	bgeu	r22,r18,2001ec8 <__alt_data_end+0xff001ec8>
 2001ee8:	1823883a 	mov	r17,r3
 2001eec:	2005f616 	blt	r4,zero,20036c8 <___vfprintf_internal_r+0x1ca0>
 2001ef0:	d9002a15 	stw	r4,168(sp)
 2001ef4:	003f2f06 	br	2001bb4 <__alt_data_end+0xff001bb4>
 2001ef8:	84002014 	ori	r16,r16,128
 2001efc:	ac400007 	ldb	r17,0(r21)
 2001f00:	003f2b06 	br	2001bb0 <__alt_data_end+0xff001bb0>
 2001f04:	8cbff404 	addi	r18,r17,-48
 2001f08:	d8003115 	stw	zero,196(sp)
 2001f0c:	0009883a 	mov	r4,zero
 2001f10:	a823883a 	mov	r17,r21
 2001f14:	01400284 	movi	r5,10
 2001f18:	20018280 	call	2001828 <__mulsi3>
 2001f1c:	88c00007 	ldb	r3,0(r17)
 2001f20:	9089883a 	add	r4,r18,r2
 2001f24:	ad400044 	addi	r21,r21,1
 2001f28:	1cbff404 	addi	r18,r3,-48
 2001f2c:	a823883a 	mov	r17,r21
 2001f30:	b4bff82e 	bgeu	r22,r18,2001f14 <__alt_data_end+0xff001f14>
 2001f34:	1823883a 	mov	r17,r3
 2001f38:	d9003115 	stw	r4,196(sp)
 2001f3c:	003f1d06 	br	2001bb4 <__alt_data_end+0xff001bb4>
 2001f40:	8025883a 	mov	r18,r16
 2001f44:	dc002903 	ldbu	r16,164(sp)
 2001f48:	e011883a 	mov	r8,fp
 2001f4c:	84003fcc 	andi	r16,r16,255
 2001f50:	8007531e 	bne	r16,zero,2003ca0 <___vfprintf_internal_r+0x2278>
 2001f54:	94800414 	ori	r18,r18,16
 2001f58:	9080080c 	andi	r2,r18,32
 2001f5c:	1003a326 	beq	r2,zero,2002dec <___vfprintf_internal_r+0x13c4>
 2001f60:	d9002e17 	ldw	r4,184(sp)
 2001f64:	20800117 	ldw	r2,4(r4)
 2001f68:	24c00017 	ldw	r19,0(r4)
 2001f6c:	21000204 	addi	r4,r4,8
 2001f70:	d9002e15 	stw	r4,184(sp)
 2001f74:	102d883a 	mov	r22,r2
 2001f78:	10047316 	blt	r2,zero,2003148 <___vfprintf_internal_r+0x1720>
 2001f7c:	d9002a17 	ldw	r4,168(sp)
 2001f80:	df002783 	ldbu	fp,158(sp)
 2001f84:	2003e416 	blt	r4,zero,2002f18 <___vfprintf_internal_r+0x14f0>
 2001f88:	00ffdfc4 	movi	r3,-129
 2001f8c:	9d84b03a 	or	r2,r19,r22
 2001f90:	90e4703a 	and	r18,r18,r3
 2001f94:	10018026 	beq	r2,zero,2002598 <___vfprintf_internal_r+0xb70>
 2001f98:	b003ab26 	beq	r22,zero,2002e48 <___vfprintf_internal_r+0x1420>
 2001f9c:	dc402915 	stw	r17,164(sp)
 2001fa0:	dc001e04 	addi	r16,sp,120
 2001fa4:	b023883a 	mov	r17,r22
 2001fa8:	402d883a 	mov	r22,r8
 2001fac:	9809883a 	mov	r4,r19
 2001fb0:	880b883a 	mov	r5,r17
 2001fb4:	01800284 	movi	r6,10
 2001fb8:	000f883a 	mov	r7,zero
 2001fbc:	200b74c0 	call	200b74c <__umoddi3>
 2001fc0:	10800c04 	addi	r2,r2,48
 2001fc4:	843fffc4 	addi	r16,r16,-1
 2001fc8:	9809883a 	mov	r4,r19
 2001fcc:	880b883a 	mov	r5,r17
 2001fd0:	80800005 	stb	r2,0(r16)
 2001fd4:	01800284 	movi	r6,10
 2001fd8:	000f883a 	mov	r7,zero
 2001fdc:	200b1500 	call	200b150 <__udivdi3>
 2001fe0:	1027883a 	mov	r19,r2
 2001fe4:	10c4b03a 	or	r2,r2,r3
 2001fe8:	1823883a 	mov	r17,r3
 2001fec:	103fef1e 	bne	r2,zero,2001fac <__alt_data_end+0xff001fac>
 2001ff0:	d8c02817 	ldw	r3,160(sp)
 2001ff4:	dc402917 	ldw	r17,164(sp)
 2001ff8:	b011883a 	mov	r8,r22
 2001ffc:	1c07c83a 	sub	r3,r3,r16
 2002000:	d8c02b15 	stw	r3,172(sp)
 2002004:	00005f06 	br	2002184 <___vfprintf_internal_r+0x75c>
 2002008:	8025883a 	mov	r18,r16
 200200c:	dc002903 	ldbu	r16,164(sp)
 2002010:	e011883a 	mov	r8,fp
 2002014:	84003fcc 	andi	r16,r16,255
 2002018:	80071e1e 	bne	r16,zero,2003c94 <___vfprintf_internal_r+0x226c>
 200201c:	9080020c 	andi	r2,r18,8
 2002020:	1004af26 	beq	r2,zero,20032e0 <___vfprintf_internal_r+0x18b8>
 2002024:	d9002e17 	ldw	r4,184(sp)
 2002028:	d9402e17 	ldw	r5,184(sp)
 200202c:	d8802e17 	ldw	r2,184(sp)
 2002030:	21000017 	ldw	r4,0(r4)
 2002034:	29400117 	ldw	r5,4(r5)
 2002038:	10800204 	addi	r2,r2,8
 200203c:	d9003615 	stw	r4,216(sp)
 2002040:	d9403815 	stw	r5,224(sp)
 2002044:	d8802e15 	stw	r2,184(sp)
 2002048:	d9003617 	ldw	r4,216(sp)
 200204c:	d9403817 	ldw	r5,224(sp)
 2002050:	da003d15 	stw	r8,244(sp)
 2002054:	04000044 	movi	r16,1
 2002058:	2008e2c0 	call	2008e2c <__fpclassifyd>
 200205c:	da003d17 	ldw	r8,244(sp)
 2002060:	1404441e 	bne	r2,r16,2003174 <___vfprintf_internal_r+0x174c>
 2002064:	d9003617 	ldw	r4,216(sp)
 2002068:	d9403817 	ldw	r5,224(sp)
 200206c:	000d883a 	mov	r6,zero
 2002070:	000f883a 	mov	r7,zero
 2002074:	200d2a40 	call	200d2a4 <__ledf2>
 2002078:	da003d17 	ldw	r8,244(sp)
 200207c:	1005e316 	blt	r2,zero,200380c <___vfprintf_internal_r+0x1de4>
 2002080:	df002783 	ldbu	fp,158(sp)
 2002084:	008011c4 	movi	r2,71
 2002088:	1445580e 	bge	r2,r17,20035ec <___vfprintf_internal_r+0x1bc4>
 200208c:	04008074 	movhi	r16,513
 2002090:	84040204 	addi	r16,r16,4104
 2002094:	00c000c4 	movi	r3,3
 2002098:	00bfdfc4 	movi	r2,-129
 200209c:	d8c02915 	stw	r3,164(sp)
 20020a0:	90a4703a 	and	r18,r18,r2
 20020a4:	d8c02b15 	stw	r3,172(sp)
 20020a8:	d8002a15 	stw	zero,168(sp)
 20020ac:	d8003215 	stw	zero,200(sp)
 20020b0:	00003a06 	br	200219c <___vfprintf_internal_r+0x774>
 20020b4:	84000214 	ori	r16,r16,8
 20020b8:	ac400007 	ldb	r17,0(r21)
 20020bc:	003ebc06 	br	2001bb0 <__alt_data_end+0xff001bb0>
 20020c0:	8025883a 	mov	r18,r16
 20020c4:	dc002903 	ldbu	r16,164(sp)
 20020c8:	e011883a 	mov	r8,fp
 20020cc:	84003fcc 	andi	r16,r16,255
 20020d0:	8007001e 	bne	r16,zero,2003cd4 <___vfprintf_internal_r+0x22ac>
 20020d4:	94800414 	ori	r18,r18,16
 20020d8:	9080080c 	andi	r2,r18,32
 20020dc:	1002fa26 	beq	r2,zero,2002cc8 <___vfprintf_internal_r+0x12a0>
 20020e0:	d9002e17 	ldw	r4,184(sp)
 20020e4:	d9402a17 	ldw	r5,168(sp)
 20020e8:	d8002785 	stb	zero,158(sp)
 20020ec:	20800204 	addi	r2,r4,8
 20020f0:	24c00017 	ldw	r19,0(r4)
 20020f4:	25800117 	ldw	r22,4(r4)
 20020f8:	2804b116 	blt	r5,zero,20033c0 <___vfprintf_internal_r+0x1998>
 20020fc:	013fdfc4 	movi	r4,-129
 2002100:	9d86b03a 	or	r3,r19,r22
 2002104:	d8802e15 	stw	r2,184(sp)
 2002108:	9124703a 	and	r18,r18,r4
 200210c:	1802fb1e 	bne	r3,zero,2002cfc <___vfprintf_internal_r+0x12d4>
 2002110:	d8c02a17 	ldw	r3,168(sp)
 2002114:	0039883a 	mov	fp,zero
 2002118:	1805e526 	beq	r3,zero,20038b0 <___vfprintf_internal_r+0x1e88>
 200211c:	0027883a 	mov	r19,zero
 2002120:	002d883a 	mov	r22,zero
 2002124:	dc001e04 	addi	r16,sp,120
 2002128:	9806d0fa 	srli	r3,r19,3
 200212c:	b008977a 	slli	r4,r22,29
 2002130:	b02cd0fa 	srli	r22,r22,3
 2002134:	9cc001cc 	andi	r19,r19,7
 2002138:	98800c04 	addi	r2,r19,48
 200213c:	843fffc4 	addi	r16,r16,-1
 2002140:	20e6b03a 	or	r19,r4,r3
 2002144:	80800005 	stb	r2,0(r16)
 2002148:	9d86b03a 	or	r3,r19,r22
 200214c:	183ff61e 	bne	r3,zero,2002128 <__alt_data_end+0xff002128>
 2002150:	90c0004c 	andi	r3,r18,1
 2002154:	18014126 	beq	r3,zero,200265c <___vfprintf_internal_r+0xc34>
 2002158:	10803fcc 	andi	r2,r2,255
 200215c:	1080201c 	xori	r2,r2,128
 2002160:	10bfe004 	addi	r2,r2,-128
 2002164:	00c00c04 	movi	r3,48
 2002168:	10c13c26 	beq	r2,r3,200265c <___vfprintf_internal_r+0xc34>
 200216c:	80ffffc5 	stb	r3,-1(r16)
 2002170:	d8c02817 	ldw	r3,160(sp)
 2002174:	80bfffc4 	addi	r2,r16,-1
 2002178:	1021883a 	mov	r16,r2
 200217c:	1887c83a 	sub	r3,r3,r2
 2002180:	d8c02b15 	stw	r3,172(sp)
 2002184:	d8802b17 	ldw	r2,172(sp)
 2002188:	d9002a17 	ldw	r4,168(sp)
 200218c:	1100010e 	bge	r2,r4,2002194 <___vfprintf_internal_r+0x76c>
 2002190:	2005883a 	mov	r2,r4
 2002194:	d8802915 	stw	r2,164(sp)
 2002198:	d8003215 	stw	zero,200(sp)
 200219c:	e7003fcc 	andi	fp,fp,255
 20021a0:	e700201c 	xori	fp,fp,128
 20021a4:	e73fe004 	addi	fp,fp,-128
 20021a8:	e0000326 	beq	fp,zero,20021b8 <___vfprintf_internal_r+0x790>
 20021ac:	d8c02917 	ldw	r3,164(sp)
 20021b0:	18c00044 	addi	r3,r3,1
 20021b4:	d8c02915 	stw	r3,164(sp)
 20021b8:	90c0008c 	andi	r3,r18,2
 20021bc:	d8c02c15 	stw	r3,176(sp)
 20021c0:	18000326 	beq	r3,zero,20021d0 <___vfprintf_internal_r+0x7a8>
 20021c4:	d8c02917 	ldw	r3,164(sp)
 20021c8:	18c00084 	addi	r3,r3,2
 20021cc:	d8c02915 	stw	r3,164(sp)
 20021d0:	90c0210c 	andi	r3,r18,132
 20021d4:	d8c03015 	stw	r3,192(sp)
 20021d8:	1801c51e 	bne	r3,zero,20028f0 <___vfprintf_internal_r+0xec8>
 20021dc:	d9003117 	ldw	r4,196(sp)
 20021e0:	d8c02917 	ldw	r3,164(sp)
 20021e4:	20e7c83a 	sub	r19,r4,r3
 20021e8:	04c1c10e 	bge	zero,r19,20028f0 <___vfprintf_internal_r+0xec8>
 20021ec:	02400404 	movi	r9,16
 20021f0:	d8c02017 	ldw	r3,128(sp)
 20021f4:	d8801f17 	ldw	r2,124(sp)
 20021f8:	4cc52f0e 	bge	r9,r19,20036b8 <___vfprintf_internal_r+0x1c90>
 20021fc:	01408074 	movhi	r5,513
 2002200:	29441584 	addi	r5,r5,4182
 2002204:	dc403b15 	stw	r17,236(sp)
 2002208:	d9403515 	stw	r5,212(sp)
 200220c:	9823883a 	mov	r17,r19
 2002210:	482d883a 	mov	r22,r9
 2002214:	9027883a 	mov	r19,r18
 2002218:	070001c4 	movi	fp,7
 200221c:	8025883a 	mov	r18,r16
 2002220:	dc002d17 	ldw	r16,180(sp)
 2002224:	00000306 	br	2002234 <___vfprintf_internal_r+0x80c>
 2002228:	8c7ffc04 	addi	r17,r17,-16
 200222c:	42000204 	addi	r8,r8,8
 2002230:	b440130e 	bge	r22,r17,2002280 <___vfprintf_internal_r+0x858>
 2002234:	01008074 	movhi	r4,513
 2002238:	18c00404 	addi	r3,r3,16
 200223c:	10800044 	addi	r2,r2,1
 2002240:	21041584 	addi	r4,r4,4182
 2002244:	41000015 	stw	r4,0(r8)
 2002248:	45800115 	stw	r22,4(r8)
 200224c:	d8c02015 	stw	r3,128(sp)
 2002250:	d8801f15 	stw	r2,124(sp)
 2002254:	e0bff40e 	bge	fp,r2,2002228 <__alt_data_end+0xff002228>
 2002258:	d9801e04 	addi	r6,sp,120
 200225c:	b80b883a 	mov	r5,r23
 2002260:	8009883a 	mov	r4,r16
 2002264:	20092080 	call	2009208 <__sprint_r>
 2002268:	103ef31e 	bne	r2,zero,2001e38 <__alt_data_end+0xff001e38>
 200226c:	8c7ffc04 	addi	r17,r17,-16
 2002270:	d8c02017 	ldw	r3,128(sp)
 2002274:	d8801f17 	ldw	r2,124(sp)
 2002278:	da000404 	addi	r8,sp,16
 200227c:	b47fed16 	blt	r22,r17,2002234 <__alt_data_end+0xff002234>
 2002280:	9021883a 	mov	r16,r18
 2002284:	9825883a 	mov	r18,r19
 2002288:	8827883a 	mov	r19,r17
 200228c:	dc403b17 	ldw	r17,236(sp)
 2002290:	d9403517 	ldw	r5,212(sp)
 2002294:	98c7883a 	add	r3,r19,r3
 2002298:	10800044 	addi	r2,r2,1
 200229c:	41400015 	stw	r5,0(r8)
 20022a0:	44c00115 	stw	r19,4(r8)
 20022a4:	d8c02015 	stw	r3,128(sp)
 20022a8:	d8801f15 	stw	r2,124(sp)
 20022ac:	010001c4 	movi	r4,7
 20022b0:	2082c516 	blt	r4,r2,2002dc8 <___vfprintf_internal_r+0x13a0>
 20022b4:	df002787 	ldb	fp,158(sp)
 20022b8:	42000204 	addi	r8,r8,8
 20022bc:	e0000c26 	beq	fp,zero,20022f0 <___vfprintf_internal_r+0x8c8>
 20022c0:	d8801f17 	ldw	r2,124(sp)
 20022c4:	d9002784 	addi	r4,sp,158
 20022c8:	18c00044 	addi	r3,r3,1
 20022cc:	10800044 	addi	r2,r2,1
 20022d0:	41000015 	stw	r4,0(r8)
 20022d4:	01000044 	movi	r4,1
 20022d8:	41000115 	stw	r4,4(r8)
 20022dc:	d8c02015 	stw	r3,128(sp)
 20022e0:	d8801f15 	stw	r2,124(sp)
 20022e4:	010001c4 	movi	r4,7
 20022e8:	20825e16 	blt	r4,r2,2002c64 <___vfprintf_internal_r+0x123c>
 20022ec:	42000204 	addi	r8,r8,8
 20022f0:	d8802c17 	ldw	r2,176(sp)
 20022f4:	10000c26 	beq	r2,zero,2002328 <___vfprintf_internal_r+0x900>
 20022f8:	d8801f17 	ldw	r2,124(sp)
 20022fc:	d9002704 	addi	r4,sp,156
 2002300:	18c00084 	addi	r3,r3,2
 2002304:	10800044 	addi	r2,r2,1
 2002308:	41000015 	stw	r4,0(r8)
 200230c:	01000084 	movi	r4,2
 2002310:	41000115 	stw	r4,4(r8)
 2002314:	d8c02015 	stw	r3,128(sp)
 2002318:	d8801f15 	stw	r2,124(sp)
 200231c:	010001c4 	movi	r4,7
 2002320:	20825816 	blt	r4,r2,2002c84 <___vfprintf_internal_r+0x125c>
 2002324:	42000204 	addi	r8,r8,8
 2002328:	d9003017 	ldw	r4,192(sp)
 200232c:	00802004 	movi	r2,128
 2002330:	2081bb26 	beq	r4,r2,2002a20 <___vfprintf_internal_r+0xff8>
 2002334:	d9402a17 	ldw	r5,168(sp)
 2002338:	d8802b17 	ldw	r2,172(sp)
 200233c:	28adc83a 	sub	r22,r5,r2
 2002340:	0580310e 	bge	zero,r22,2002408 <___vfprintf_internal_r+0x9e0>
 2002344:	07000404 	movi	fp,16
 2002348:	d8801f17 	ldw	r2,124(sp)
 200234c:	e584360e 	bge	fp,r22,2003428 <___vfprintf_internal_r+0x1a00>
 2002350:	01408074 	movhi	r5,513
 2002354:	29441184 	addi	r5,r5,4166
 2002358:	dc402a15 	stw	r17,168(sp)
 200235c:	d9402c15 	stw	r5,176(sp)
 2002360:	b023883a 	mov	r17,r22
 2002364:	04c001c4 	movi	r19,7
 2002368:	a82d883a 	mov	r22,r21
 200236c:	902b883a 	mov	r21,r18
 2002370:	8025883a 	mov	r18,r16
 2002374:	dc002d17 	ldw	r16,180(sp)
 2002378:	00000306 	br	2002388 <___vfprintf_internal_r+0x960>
 200237c:	8c7ffc04 	addi	r17,r17,-16
 2002380:	42000204 	addi	r8,r8,8
 2002384:	e440110e 	bge	fp,r17,20023cc <___vfprintf_internal_r+0x9a4>
 2002388:	18c00404 	addi	r3,r3,16
 200238c:	10800044 	addi	r2,r2,1
 2002390:	45000015 	stw	r20,0(r8)
 2002394:	47000115 	stw	fp,4(r8)
 2002398:	d8c02015 	stw	r3,128(sp)
 200239c:	d8801f15 	stw	r2,124(sp)
 20023a0:	98bff60e 	bge	r19,r2,200237c <__alt_data_end+0xff00237c>
 20023a4:	d9801e04 	addi	r6,sp,120
 20023a8:	b80b883a 	mov	r5,r23
 20023ac:	8009883a 	mov	r4,r16
 20023b0:	20092080 	call	2009208 <__sprint_r>
 20023b4:	103ea01e 	bne	r2,zero,2001e38 <__alt_data_end+0xff001e38>
 20023b8:	8c7ffc04 	addi	r17,r17,-16
 20023bc:	d8c02017 	ldw	r3,128(sp)
 20023c0:	d8801f17 	ldw	r2,124(sp)
 20023c4:	da000404 	addi	r8,sp,16
 20023c8:	e47fef16 	blt	fp,r17,2002388 <__alt_data_end+0xff002388>
 20023cc:	9021883a 	mov	r16,r18
 20023d0:	a825883a 	mov	r18,r21
 20023d4:	b02b883a 	mov	r21,r22
 20023d8:	882d883a 	mov	r22,r17
 20023dc:	dc402a17 	ldw	r17,168(sp)
 20023e0:	d9002c17 	ldw	r4,176(sp)
 20023e4:	1d87883a 	add	r3,r3,r22
 20023e8:	10800044 	addi	r2,r2,1
 20023ec:	41000015 	stw	r4,0(r8)
 20023f0:	45800115 	stw	r22,4(r8)
 20023f4:	d8c02015 	stw	r3,128(sp)
 20023f8:	d8801f15 	stw	r2,124(sp)
 20023fc:	010001c4 	movi	r4,7
 2002400:	20821016 	blt	r4,r2,2002c44 <___vfprintf_internal_r+0x121c>
 2002404:	42000204 	addi	r8,r8,8
 2002408:	9080400c 	andi	r2,r18,256
 200240c:	10013a1e 	bne	r2,zero,20028f8 <___vfprintf_internal_r+0xed0>
 2002410:	d9402b17 	ldw	r5,172(sp)
 2002414:	d8801f17 	ldw	r2,124(sp)
 2002418:	44000015 	stw	r16,0(r8)
 200241c:	1947883a 	add	r3,r3,r5
 2002420:	10800044 	addi	r2,r2,1
 2002424:	41400115 	stw	r5,4(r8)
 2002428:	d8c02015 	stw	r3,128(sp)
 200242c:	d8801f15 	stw	r2,124(sp)
 2002430:	010001c4 	movi	r4,7
 2002434:	2081f516 	blt	r4,r2,2002c0c <___vfprintf_internal_r+0x11e4>
 2002438:	42000204 	addi	r8,r8,8
 200243c:	9480010c 	andi	r18,r18,4
 2002440:	90003226 	beq	r18,zero,200250c <___vfprintf_internal_r+0xae4>
 2002444:	d9403117 	ldw	r5,196(sp)
 2002448:	d8802917 	ldw	r2,164(sp)
 200244c:	28a1c83a 	sub	r16,r5,r2
 2002450:	04002e0e 	bge	zero,r16,200250c <___vfprintf_internal_r+0xae4>
 2002454:	04400404 	movi	r17,16
 2002458:	d8801f17 	ldw	r2,124(sp)
 200245c:	8c04c40e 	bge	r17,r16,2003770 <___vfprintf_internal_r+0x1d48>
 2002460:	01408074 	movhi	r5,513
 2002464:	29441584 	addi	r5,r5,4182
 2002468:	d9403515 	stw	r5,212(sp)
 200246c:	048001c4 	movi	r18,7
 2002470:	dcc02d17 	ldw	r19,180(sp)
 2002474:	00000306 	br	2002484 <___vfprintf_internal_r+0xa5c>
 2002478:	843ffc04 	addi	r16,r16,-16
 200247c:	42000204 	addi	r8,r8,8
 2002480:	8c00130e 	bge	r17,r16,20024d0 <___vfprintf_internal_r+0xaa8>
 2002484:	01008074 	movhi	r4,513
 2002488:	18c00404 	addi	r3,r3,16
 200248c:	10800044 	addi	r2,r2,1
 2002490:	21041584 	addi	r4,r4,4182
 2002494:	41000015 	stw	r4,0(r8)
 2002498:	44400115 	stw	r17,4(r8)
 200249c:	d8c02015 	stw	r3,128(sp)
 20024a0:	d8801f15 	stw	r2,124(sp)
 20024a4:	90bff40e 	bge	r18,r2,2002478 <__alt_data_end+0xff002478>
 20024a8:	d9801e04 	addi	r6,sp,120
 20024ac:	b80b883a 	mov	r5,r23
 20024b0:	9809883a 	mov	r4,r19
 20024b4:	20092080 	call	2009208 <__sprint_r>
 20024b8:	103e5f1e 	bne	r2,zero,2001e38 <__alt_data_end+0xff001e38>
 20024bc:	843ffc04 	addi	r16,r16,-16
 20024c0:	d8c02017 	ldw	r3,128(sp)
 20024c4:	d8801f17 	ldw	r2,124(sp)
 20024c8:	da000404 	addi	r8,sp,16
 20024cc:	8c3fed16 	blt	r17,r16,2002484 <__alt_data_end+0xff002484>
 20024d0:	d9403517 	ldw	r5,212(sp)
 20024d4:	1c07883a 	add	r3,r3,r16
 20024d8:	10800044 	addi	r2,r2,1
 20024dc:	41400015 	stw	r5,0(r8)
 20024e0:	44000115 	stw	r16,4(r8)
 20024e4:	d8c02015 	stw	r3,128(sp)
 20024e8:	d8801f15 	stw	r2,124(sp)
 20024ec:	010001c4 	movi	r4,7
 20024f0:	2080060e 	bge	r4,r2,200250c <___vfprintf_internal_r+0xae4>
 20024f4:	d9002d17 	ldw	r4,180(sp)
 20024f8:	d9801e04 	addi	r6,sp,120
 20024fc:	b80b883a 	mov	r5,r23
 2002500:	20092080 	call	2009208 <__sprint_r>
 2002504:	103e4c1e 	bne	r2,zero,2001e38 <__alt_data_end+0xff001e38>
 2002508:	d8c02017 	ldw	r3,128(sp)
 200250c:	d8803117 	ldw	r2,196(sp)
 2002510:	d9002917 	ldw	r4,164(sp)
 2002514:	1100010e 	bge	r2,r4,200251c <___vfprintf_internal_r+0xaf4>
 2002518:	2005883a 	mov	r2,r4
 200251c:	d9402f17 	ldw	r5,188(sp)
 2002520:	288b883a 	add	r5,r5,r2
 2002524:	d9402f15 	stw	r5,188(sp)
 2002528:	1801c01e 	bne	r3,zero,2002c2c <___vfprintf_internal_r+0x1204>
 200252c:	a8800007 	ldb	r2,0(r21)
 2002530:	d8001f15 	stw	zero,124(sp)
 2002534:	da000404 	addi	r8,sp,16
 2002538:	103d751e 	bne	r2,zero,2001b10 <__alt_data_end+0xff001b10>
 200253c:	a823883a 	mov	r17,r21
 2002540:	003d8b06 	br	2001b70 <__alt_data_end+0xff001b70>
 2002544:	8025883a 	mov	r18,r16
 2002548:	dc002903 	ldbu	r16,164(sp)
 200254c:	e011883a 	mov	r8,fp
 2002550:	84003fcc 	andi	r16,r16,255
 2002554:	8005e51e 	bne	r16,zero,2003cec <___vfprintf_internal_r+0x22c4>
 2002558:	94800414 	ori	r18,r18,16
 200255c:	9080080c 	andi	r2,r18,32
 2002560:	10022b26 	beq	r2,zero,2002e10 <___vfprintf_internal_r+0x13e8>
 2002564:	d9002e17 	ldw	r4,184(sp)
 2002568:	d9402a17 	ldw	r5,168(sp)
 200256c:	d8002785 	stb	zero,158(sp)
 2002570:	20c00204 	addi	r3,r4,8
 2002574:	24c00017 	ldw	r19,0(r4)
 2002578:	25800117 	ldw	r22,4(r4)
 200257c:	28042e16 	blt	r5,zero,2003638 <___vfprintf_internal_r+0x1c10>
 2002580:	013fdfc4 	movi	r4,-129
 2002584:	9d84b03a 	or	r2,r19,r22
 2002588:	d8c02e15 	stw	r3,184(sp)
 200258c:	9124703a 	and	r18,r18,r4
 2002590:	0039883a 	mov	fp,zero
 2002594:	103e801e 	bne	r2,zero,2001f98 <__alt_data_end+0xff001f98>
 2002598:	d9002a17 	ldw	r4,168(sp)
 200259c:	2002e01e 	bne	r4,zero,2003120 <___vfprintf_internal_r+0x16f8>
 20025a0:	d8002a15 	stw	zero,168(sp)
 20025a4:	d8002b15 	stw	zero,172(sp)
 20025a8:	dc001e04 	addi	r16,sp,120
 20025ac:	003ef506 	br	2002184 <__alt_data_end+0xff002184>
 20025b0:	8025883a 	mov	r18,r16
 20025b4:	dc002903 	ldbu	r16,164(sp)
 20025b8:	e011883a 	mov	r8,fp
 20025bc:	84003fcc 	andi	r16,r16,255
 20025c0:	8005ba1e 	bne	r16,zero,2003cac <___vfprintf_internal_r+0x2284>
 20025c4:	01008074 	movhi	r4,513
 20025c8:	21040504 	addi	r4,r4,4116
 20025cc:	d9003915 	stw	r4,228(sp)
 20025d0:	9080080c 	andi	r2,r18,32
 20025d4:	10006126 	beq	r2,zero,200275c <___vfprintf_internal_r+0xd34>
 20025d8:	d9402e17 	ldw	r5,184(sp)
 20025dc:	2cc00017 	ldw	r19,0(r5)
 20025e0:	2d800117 	ldw	r22,4(r5)
 20025e4:	29400204 	addi	r5,r5,8
 20025e8:	d9402e15 	stw	r5,184(sp)
 20025ec:	9080004c 	andi	r2,r18,1
 20025f0:	1001ac26 	beq	r2,zero,2002ca4 <___vfprintf_internal_r+0x127c>
 20025f4:	9d84b03a 	or	r2,r19,r22
 20025f8:	10038526 	beq	r2,zero,2003410 <___vfprintf_internal_r+0x19e8>
 20025fc:	d8c02a17 	ldw	r3,168(sp)
 2002600:	00800c04 	movi	r2,48
 2002604:	d8802705 	stb	r2,156(sp)
 2002608:	dc402745 	stb	r17,157(sp)
 200260c:	d8002785 	stb	zero,158(sp)
 2002610:	90800094 	ori	r2,r18,2
 2002614:	18047916 	blt	r3,zero,20037fc <___vfprintf_internal_r+0x1dd4>
 2002618:	00bfdfc4 	movi	r2,-129
 200261c:	90a4703a 	and	r18,r18,r2
 2002620:	94800094 	ori	r18,r18,2
 2002624:	0039883a 	mov	fp,zero
 2002628:	d9003917 	ldw	r4,228(sp)
 200262c:	dc001e04 	addi	r16,sp,120
 2002630:	988003cc 	andi	r2,r19,15
 2002634:	b006973a 	slli	r3,r22,28
 2002638:	2085883a 	add	r2,r4,r2
 200263c:	9826d13a 	srli	r19,r19,4
 2002640:	10800003 	ldbu	r2,0(r2)
 2002644:	b02cd13a 	srli	r22,r22,4
 2002648:	843fffc4 	addi	r16,r16,-1
 200264c:	1ce6b03a 	or	r19,r3,r19
 2002650:	80800005 	stb	r2,0(r16)
 2002654:	9d84b03a 	or	r2,r19,r22
 2002658:	103ff51e 	bne	r2,zero,2002630 <__alt_data_end+0xff002630>
 200265c:	d8c02817 	ldw	r3,160(sp)
 2002660:	1c07c83a 	sub	r3,r3,r16
 2002664:	d8c02b15 	stw	r3,172(sp)
 2002668:	003ec606 	br	2002184 <__alt_data_end+0xff002184>
 200266c:	8025883a 	mov	r18,r16
 2002670:	dc002903 	ldbu	r16,164(sp)
 2002674:	e011883a 	mov	r8,fp
 2002678:	84003fcc 	andi	r16,r16,255
 200267c:	803e9626 	beq	r16,zero,20020d8 <__alt_data_end+0xff0020d8>
 2002680:	d8c02b03 	ldbu	r3,172(sp)
 2002684:	d8c02785 	stb	r3,158(sp)
 2002688:	003e9306 	br	20020d8 <__alt_data_end+0xff0020d8>
 200268c:	00c00044 	movi	r3,1
 2002690:	d8c02905 	stb	r3,164(sp)
 2002694:	00c00ac4 	movi	r3,43
 2002698:	d8c02b05 	stb	r3,172(sp)
 200269c:	ac400007 	ldb	r17,0(r21)
 20026a0:	003d4306 	br	2001bb0 <__alt_data_end+0xff001bb0>
 20026a4:	84000814 	ori	r16,r16,32
 20026a8:	ac400007 	ldb	r17,0(r21)
 20026ac:	003d4006 	br	2001bb0 <__alt_data_end+0xff001bb0>
 20026b0:	d8802e17 	ldw	r2,184(sp)
 20026b4:	8025883a 	mov	r18,r16
 20026b8:	d8002785 	stb	zero,158(sp)
 20026bc:	14000017 	ldw	r16,0(r2)
 20026c0:	e011883a 	mov	r8,fp
 20026c4:	14c00104 	addi	r19,r2,4
 20026c8:	80042d26 	beq	r16,zero,2003780 <___vfprintf_internal_r+0x1d58>
 20026cc:	d8c02a17 	ldw	r3,168(sp)
 20026d0:	1803e416 	blt	r3,zero,2003664 <___vfprintf_internal_r+0x1c3c>
 20026d4:	180d883a 	mov	r6,r3
 20026d8:	000b883a 	mov	r5,zero
 20026dc:	8009883a 	mov	r4,r16
 20026e0:	df003d15 	stw	fp,244(sp)
 20026e4:	20073600 	call	2007360 <memchr>
 20026e8:	da003d17 	ldw	r8,244(sp)
 20026ec:	10046826 	beq	r2,zero,2003890 <___vfprintf_internal_r+0x1e68>
 20026f0:	1405c83a 	sub	r2,r2,r16
 20026f4:	d8802b15 	stw	r2,172(sp)
 20026f8:	1003e016 	blt	r2,zero,200367c <___vfprintf_internal_r+0x1c54>
 20026fc:	df002783 	ldbu	fp,158(sp)
 2002700:	d8802915 	stw	r2,164(sp)
 2002704:	dcc02e15 	stw	r19,184(sp)
 2002708:	d8002a15 	stw	zero,168(sp)
 200270c:	d8003215 	stw	zero,200(sp)
 2002710:	003ea206 	br	200219c <__alt_data_end+0xff00219c>
 2002714:	8025883a 	mov	r18,r16
 2002718:	dc002903 	ldbu	r16,164(sp)
 200271c:	e011883a 	mov	r8,fp
 2002720:	84003fcc 	andi	r16,r16,255
 2002724:	803f8d26 	beq	r16,zero,200255c <__alt_data_end+0xff00255c>
 2002728:	d8c02b03 	ldbu	r3,172(sp)
 200272c:	d8c02785 	stb	r3,158(sp)
 2002730:	003f8a06 	br	200255c <__alt_data_end+0xff00255c>
 2002734:	8025883a 	mov	r18,r16
 2002738:	dc002903 	ldbu	r16,164(sp)
 200273c:	e011883a 	mov	r8,fp
 2002740:	84003fcc 	andi	r16,r16,255
 2002744:	8005661e 	bne	r16,zero,2003ce0 <___vfprintf_internal_r+0x22b8>
 2002748:	01008074 	movhi	r4,513
 200274c:	21040a04 	addi	r4,r4,4136
 2002750:	d9003915 	stw	r4,228(sp)
 2002754:	9080080c 	andi	r2,r18,32
 2002758:	103f9f1e 	bne	r2,zero,20025d8 <__alt_data_end+0xff0025d8>
 200275c:	9080040c 	andi	r2,r18,16
 2002760:	1002eb26 	beq	r2,zero,2003310 <___vfprintf_internal_r+0x18e8>
 2002764:	d8802e17 	ldw	r2,184(sp)
 2002768:	002d883a 	mov	r22,zero
 200276c:	14c00017 	ldw	r19,0(r2)
 2002770:	10800104 	addi	r2,r2,4
 2002774:	d8802e15 	stw	r2,184(sp)
 2002778:	003f9c06 	br	20025ec <__alt_data_end+0xff0025ec>
 200277c:	d8802b07 	ldb	r2,172(sp)
 2002780:	1002e11e 	bne	r2,zero,2003308 <___vfprintf_internal_r+0x18e0>
 2002784:	00c00044 	movi	r3,1
 2002788:	d8c02905 	stb	r3,164(sp)
 200278c:	00c00804 	movi	r3,32
 2002790:	d8c02b05 	stb	r3,172(sp)
 2002794:	ac400007 	ldb	r17,0(r21)
 2002798:	003d0506 	br	2001bb0 <__alt_data_end+0xff001bb0>
 200279c:	84000054 	ori	r16,r16,1
 20027a0:	ac400007 	ldb	r17,0(r21)
 20027a4:	003d0206 	br	2001bb0 <__alt_data_end+0xff001bb0>
 20027a8:	8025883a 	mov	r18,r16
 20027ac:	dc002903 	ldbu	r16,164(sp)
 20027b0:	e011883a 	mov	r8,fp
 20027b4:	84003fcc 	andi	r16,r16,255
 20027b8:	803de726 	beq	r16,zero,2001f58 <__alt_data_end+0xff001f58>
 20027bc:	d8c02b03 	ldbu	r3,172(sp)
 20027c0:	d8c02785 	stb	r3,158(sp)
 20027c4:	003de406 	br	2001f58 <__alt_data_end+0xff001f58>
 20027c8:	84001014 	ori	r16,r16,64
 20027cc:	ac400007 	ldb	r17,0(r21)
 20027d0:	003cf706 	br	2001bb0 <__alt_data_end+0xff001bb0>
 20027d4:	ac400007 	ldb	r17,0(r21)
 20027d8:	00801b04 	movi	r2,108
 20027dc:	88838f26 	beq	r17,r2,200361c <___vfprintf_internal_r+0x1bf4>
 20027e0:	84000414 	ori	r16,r16,16
 20027e4:	003cf206 	br	2001bb0 <__alt_data_end+0xff001bb0>
 20027e8:	8025883a 	mov	r18,r16
 20027ec:	dc002903 	ldbu	r16,164(sp)
 20027f0:	e011883a 	mov	r8,fp
 20027f4:	84003fcc 	andi	r16,r16,255
 20027f8:	80053f1e 	bne	r16,zero,2003cf8 <___vfprintf_internal_r+0x22d0>
 20027fc:	9080080c 	andi	r2,r18,32
 2002800:	1002d226 	beq	r2,zero,200334c <___vfprintf_internal_r+0x1924>
 2002804:	d9002e17 	ldw	r4,184(sp)
 2002808:	d9402f17 	ldw	r5,188(sp)
 200280c:	20800017 	ldw	r2,0(r4)
 2002810:	2807d7fa 	srai	r3,r5,31
 2002814:	21000104 	addi	r4,r4,4
 2002818:	d9002e15 	stw	r4,184(sp)
 200281c:	11400015 	stw	r5,0(r2)
 2002820:	10c00115 	stw	r3,4(r2)
 2002824:	003cb806 	br	2001b08 <__alt_data_end+0xff001b08>
 2002828:	d8c02e17 	ldw	r3,184(sp)
 200282c:	d9002e17 	ldw	r4,184(sp)
 2002830:	8025883a 	mov	r18,r16
 2002834:	18800017 	ldw	r2,0(r3)
 2002838:	21000104 	addi	r4,r4,4
 200283c:	00c00044 	movi	r3,1
 2002840:	e011883a 	mov	r8,fp
 2002844:	d8c02915 	stw	r3,164(sp)
 2002848:	d8002785 	stb	zero,158(sp)
 200284c:	d8801405 	stb	r2,80(sp)
 2002850:	d9002e15 	stw	r4,184(sp)
 2002854:	d8c02b15 	stw	r3,172(sp)
 2002858:	d8002a15 	stw	zero,168(sp)
 200285c:	d8003215 	stw	zero,200(sp)
 2002860:	dc001404 	addi	r16,sp,80
 2002864:	0039883a 	mov	fp,zero
 2002868:	003e5306 	br	20021b8 <__alt_data_end+0xff0021b8>
 200286c:	01008074 	movhi	r4,513
 2002870:	21040a04 	addi	r4,r4,4136
 2002874:	0039883a 	mov	fp,zero
 2002878:	d9003915 	stw	r4,228(sp)
 200287c:	04401e04 	movi	r17,120
 2002880:	003f6906 	br	2002628 <__alt_data_end+0xff002628>
 2002884:	8025883a 	mov	r18,r16
 2002888:	dc002903 	ldbu	r16,164(sp)
 200288c:	e011883a 	mov	r8,fp
 2002890:	84003fcc 	andi	r16,r16,255
 2002894:	8005081e 	bne	r16,zero,2003cb8 <___vfprintf_internal_r+0x2290>
 2002898:	883d6126 	beq	r17,zero,2001e20 <__alt_data_end+0xff001e20>
 200289c:	00c00044 	movi	r3,1
 20028a0:	d8c02915 	stw	r3,164(sp)
 20028a4:	dc401405 	stb	r17,80(sp)
 20028a8:	d8002785 	stb	zero,158(sp)
 20028ac:	003fe906 	br	2002854 <__alt_data_end+0xff002854>
 20028b0:	01408074 	movhi	r5,513
 20028b4:	29440a04 	addi	r5,r5,4136
 20028b8:	d9403915 	stw	r5,228(sp)
 20028bc:	d8c02e15 	stw	r3,184(sp)
 20028c0:	1025883a 	mov	r18,r2
 20028c4:	04401e04 	movi	r17,120
 20028c8:	9d84b03a 	or	r2,r19,r22
 20028cc:	1000fc1e 	bne	r2,zero,2002cc0 <___vfprintf_internal_r+0x1298>
 20028d0:	0039883a 	mov	fp,zero
 20028d4:	00800084 	movi	r2,2
 20028d8:	10803fcc 	andi	r2,r2,255
 20028dc:	00c00044 	movi	r3,1
 20028e0:	10c20f26 	beq	r2,r3,2003120 <___vfprintf_internal_r+0x16f8>
 20028e4:	00c00084 	movi	r3,2
 20028e8:	10fd3326 	beq	r2,r3,2001db8 <__alt_data_end+0xff001db8>
 20028ec:	003e0b06 	br	200211c <__alt_data_end+0xff00211c>
 20028f0:	d8c02017 	ldw	r3,128(sp)
 20028f4:	003e7106 	br	20022bc <__alt_data_end+0xff0022bc>
 20028f8:	00801944 	movi	r2,101
 20028fc:	14407e0e 	bge	r2,r17,2002af8 <___vfprintf_internal_r+0x10d0>
 2002900:	d9003617 	ldw	r4,216(sp)
 2002904:	d9403817 	ldw	r5,224(sp)
 2002908:	000d883a 	mov	r6,zero
 200290c:	000f883a 	mov	r7,zero
 2002910:	d8c03c15 	stw	r3,240(sp)
 2002914:	da003d15 	stw	r8,244(sp)
 2002918:	200d1400 	call	200d140 <__eqdf2>
 200291c:	d8c03c17 	ldw	r3,240(sp)
 2002920:	da003d17 	ldw	r8,244(sp)
 2002924:	1000f71e 	bne	r2,zero,2002d04 <___vfprintf_internal_r+0x12dc>
 2002928:	d8801f17 	ldw	r2,124(sp)
 200292c:	01008074 	movhi	r4,513
 2002930:	21041104 	addi	r4,r4,4164
 2002934:	18c00044 	addi	r3,r3,1
 2002938:	10800044 	addi	r2,r2,1
 200293c:	41000015 	stw	r4,0(r8)
 2002940:	01000044 	movi	r4,1
 2002944:	41000115 	stw	r4,4(r8)
 2002948:	d8c02015 	stw	r3,128(sp)
 200294c:	d8801f15 	stw	r2,124(sp)
 2002950:	010001c4 	movi	r4,7
 2002954:	2082b816 	blt	r4,r2,2003438 <___vfprintf_internal_r+0x1a10>
 2002958:	42000204 	addi	r8,r8,8
 200295c:	d8802617 	ldw	r2,152(sp)
 2002960:	d9403317 	ldw	r5,204(sp)
 2002964:	11400216 	blt	r2,r5,2002970 <___vfprintf_internal_r+0xf48>
 2002968:	9080004c 	andi	r2,r18,1
 200296c:	103eb326 	beq	r2,zero,200243c <__alt_data_end+0xff00243c>
 2002970:	d8803717 	ldw	r2,220(sp)
 2002974:	d9003417 	ldw	r4,208(sp)
 2002978:	d9403717 	ldw	r5,220(sp)
 200297c:	1887883a 	add	r3,r3,r2
 2002980:	d8801f17 	ldw	r2,124(sp)
 2002984:	41000015 	stw	r4,0(r8)
 2002988:	41400115 	stw	r5,4(r8)
 200298c:	10800044 	addi	r2,r2,1
 2002990:	d8c02015 	stw	r3,128(sp)
 2002994:	d8801f15 	stw	r2,124(sp)
 2002998:	010001c4 	movi	r4,7
 200299c:	20832916 	blt	r4,r2,2003644 <___vfprintf_internal_r+0x1c1c>
 20029a0:	42000204 	addi	r8,r8,8
 20029a4:	d8803317 	ldw	r2,204(sp)
 20029a8:	143fffc4 	addi	r16,r2,-1
 20029ac:	043ea30e 	bge	zero,r16,200243c <__alt_data_end+0xff00243c>
 20029b0:	04400404 	movi	r17,16
 20029b4:	d8801f17 	ldw	r2,124(sp)
 20029b8:	8c00880e 	bge	r17,r16,2002bdc <___vfprintf_internal_r+0x11b4>
 20029bc:	01408074 	movhi	r5,513
 20029c0:	29441184 	addi	r5,r5,4166
 20029c4:	d9402c15 	stw	r5,176(sp)
 20029c8:	058001c4 	movi	r22,7
 20029cc:	dcc02d17 	ldw	r19,180(sp)
 20029d0:	00000306 	br	20029e0 <___vfprintf_internal_r+0xfb8>
 20029d4:	42000204 	addi	r8,r8,8
 20029d8:	843ffc04 	addi	r16,r16,-16
 20029dc:	8c00820e 	bge	r17,r16,2002be8 <___vfprintf_internal_r+0x11c0>
 20029e0:	18c00404 	addi	r3,r3,16
 20029e4:	10800044 	addi	r2,r2,1
 20029e8:	45000015 	stw	r20,0(r8)
 20029ec:	44400115 	stw	r17,4(r8)
 20029f0:	d8c02015 	stw	r3,128(sp)
 20029f4:	d8801f15 	stw	r2,124(sp)
 20029f8:	b0bff60e 	bge	r22,r2,20029d4 <__alt_data_end+0xff0029d4>
 20029fc:	d9801e04 	addi	r6,sp,120
 2002a00:	b80b883a 	mov	r5,r23
 2002a04:	9809883a 	mov	r4,r19
 2002a08:	20092080 	call	2009208 <__sprint_r>
 2002a0c:	103d0a1e 	bne	r2,zero,2001e38 <__alt_data_end+0xff001e38>
 2002a10:	d8c02017 	ldw	r3,128(sp)
 2002a14:	d8801f17 	ldw	r2,124(sp)
 2002a18:	da000404 	addi	r8,sp,16
 2002a1c:	003fee06 	br	20029d8 <__alt_data_end+0xff0029d8>
 2002a20:	d9403117 	ldw	r5,196(sp)
 2002a24:	d8802917 	ldw	r2,164(sp)
 2002a28:	28adc83a 	sub	r22,r5,r2
 2002a2c:	05be410e 	bge	zero,r22,2002334 <__alt_data_end+0xff002334>
 2002a30:	07000404 	movi	fp,16
 2002a34:	d8801f17 	ldw	r2,124(sp)
 2002a38:	e5838f0e 	bge	fp,r22,2003878 <___vfprintf_internal_r+0x1e50>
 2002a3c:	01408074 	movhi	r5,513
 2002a40:	29441184 	addi	r5,r5,4166
 2002a44:	dc403015 	stw	r17,192(sp)
 2002a48:	d9402c15 	stw	r5,176(sp)
 2002a4c:	b023883a 	mov	r17,r22
 2002a50:	04c001c4 	movi	r19,7
 2002a54:	a82d883a 	mov	r22,r21
 2002a58:	902b883a 	mov	r21,r18
 2002a5c:	8025883a 	mov	r18,r16
 2002a60:	dc002d17 	ldw	r16,180(sp)
 2002a64:	00000306 	br	2002a74 <___vfprintf_internal_r+0x104c>
 2002a68:	8c7ffc04 	addi	r17,r17,-16
 2002a6c:	42000204 	addi	r8,r8,8
 2002a70:	e440110e 	bge	fp,r17,2002ab8 <___vfprintf_internal_r+0x1090>
 2002a74:	18c00404 	addi	r3,r3,16
 2002a78:	10800044 	addi	r2,r2,1
 2002a7c:	45000015 	stw	r20,0(r8)
 2002a80:	47000115 	stw	fp,4(r8)
 2002a84:	d8c02015 	stw	r3,128(sp)
 2002a88:	d8801f15 	stw	r2,124(sp)
 2002a8c:	98bff60e 	bge	r19,r2,2002a68 <__alt_data_end+0xff002a68>
 2002a90:	d9801e04 	addi	r6,sp,120
 2002a94:	b80b883a 	mov	r5,r23
 2002a98:	8009883a 	mov	r4,r16
 2002a9c:	20092080 	call	2009208 <__sprint_r>
 2002aa0:	103ce51e 	bne	r2,zero,2001e38 <__alt_data_end+0xff001e38>
 2002aa4:	8c7ffc04 	addi	r17,r17,-16
 2002aa8:	d8c02017 	ldw	r3,128(sp)
 2002aac:	d8801f17 	ldw	r2,124(sp)
 2002ab0:	da000404 	addi	r8,sp,16
 2002ab4:	e47fef16 	blt	fp,r17,2002a74 <__alt_data_end+0xff002a74>
 2002ab8:	9021883a 	mov	r16,r18
 2002abc:	a825883a 	mov	r18,r21
 2002ac0:	b02b883a 	mov	r21,r22
 2002ac4:	882d883a 	mov	r22,r17
 2002ac8:	dc403017 	ldw	r17,192(sp)
 2002acc:	d9002c17 	ldw	r4,176(sp)
 2002ad0:	1d87883a 	add	r3,r3,r22
 2002ad4:	10800044 	addi	r2,r2,1
 2002ad8:	41000015 	stw	r4,0(r8)
 2002adc:	45800115 	stw	r22,4(r8)
 2002ae0:	d8c02015 	stw	r3,128(sp)
 2002ae4:	d8801f15 	stw	r2,124(sp)
 2002ae8:	010001c4 	movi	r4,7
 2002aec:	20818e16 	blt	r4,r2,2003128 <___vfprintf_internal_r+0x1700>
 2002af0:	42000204 	addi	r8,r8,8
 2002af4:	003e0f06 	br	2002334 <__alt_data_end+0xff002334>
 2002af8:	d9403317 	ldw	r5,204(sp)
 2002afc:	00800044 	movi	r2,1
 2002b00:	18c00044 	addi	r3,r3,1
 2002b04:	1141530e 	bge	r2,r5,2003054 <___vfprintf_internal_r+0x162c>
 2002b08:	dc401f17 	ldw	r17,124(sp)
 2002b0c:	00800044 	movi	r2,1
 2002b10:	40800115 	stw	r2,4(r8)
 2002b14:	8c400044 	addi	r17,r17,1
 2002b18:	44000015 	stw	r16,0(r8)
 2002b1c:	d8c02015 	stw	r3,128(sp)
 2002b20:	dc401f15 	stw	r17,124(sp)
 2002b24:	008001c4 	movi	r2,7
 2002b28:	14416b16 	blt	r2,r17,20030d8 <___vfprintf_internal_r+0x16b0>
 2002b2c:	42000204 	addi	r8,r8,8
 2002b30:	d8803717 	ldw	r2,220(sp)
 2002b34:	d9003417 	ldw	r4,208(sp)
 2002b38:	8c400044 	addi	r17,r17,1
 2002b3c:	10c7883a 	add	r3,r2,r3
 2002b40:	40800115 	stw	r2,4(r8)
 2002b44:	41000015 	stw	r4,0(r8)
 2002b48:	d8c02015 	stw	r3,128(sp)
 2002b4c:	dc401f15 	stw	r17,124(sp)
 2002b50:	008001c4 	movi	r2,7
 2002b54:	14416916 	blt	r2,r17,20030fc <___vfprintf_internal_r+0x16d4>
 2002b58:	45800204 	addi	r22,r8,8
 2002b5c:	d9003617 	ldw	r4,216(sp)
 2002b60:	d9403817 	ldw	r5,224(sp)
 2002b64:	000d883a 	mov	r6,zero
 2002b68:	000f883a 	mov	r7,zero
 2002b6c:	d8c03c15 	stw	r3,240(sp)
 2002b70:	200d1400 	call	200d140 <__eqdf2>
 2002b74:	d8c03c17 	ldw	r3,240(sp)
 2002b78:	1000bc26 	beq	r2,zero,2002e6c <___vfprintf_internal_r+0x1444>
 2002b7c:	d9403317 	ldw	r5,204(sp)
 2002b80:	84000044 	addi	r16,r16,1
 2002b84:	8c400044 	addi	r17,r17,1
 2002b88:	28bfffc4 	addi	r2,r5,-1
 2002b8c:	1887883a 	add	r3,r3,r2
 2002b90:	b0800115 	stw	r2,4(r22)
 2002b94:	b4000015 	stw	r16,0(r22)
 2002b98:	d8c02015 	stw	r3,128(sp)
 2002b9c:	dc401f15 	stw	r17,124(sp)
 2002ba0:	008001c4 	movi	r2,7
 2002ba4:	14414316 	blt	r2,r17,20030b4 <___vfprintf_internal_r+0x168c>
 2002ba8:	b5800204 	addi	r22,r22,8
 2002bac:	d9003a17 	ldw	r4,232(sp)
 2002bb0:	df0022c4 	addi	fp,sp,139
 2002bb4:	8c400044 	addi	r17,r17,1
 2002bb8:	20c7883a 	add	r3,r4,r3
 2002bbc:	b7000015 	stw	fp,0(r22)
 2002bc0:	b1000115 	stw	r4,4(r22)
 2002bc4:	d8c02015 	stw	r3,128(sp)
 2002bc8:	dc401f15 	stw	r17,124(sp)
 2002bcc:	008001c4 	movi	r2,7
 2002bd0:	14400e16 	blt	r2,r17,2002c0c <___vfprintf_internal_r+0x11e4>
 2002bd4:	b2000204 	addi	r8,r22,8
 2002bd8:	003e1806 	br	200243c <__alt_data_end+0xff00243c>
 2002bdc:	01008074 	movhi	r4,513
 2002be0:	21041184 	addi	r4,r4,4166
 2002be4:	d9002c15 	stw	r4,176(sp)
 2002be8:	d9002c17 	ldw	r4,176(sp)
 2002bec:	1c07883a 	add	r3,r3,r16
 2002bf0:	44000115 	stw	r16,4(r8)
 2002bf4:	41000015 	stw	r4,0(r8)
 2002bf8:	10800044 	addi	r2,r2,1
 2002bfc:	d8c02015 	stw	r3,128(sp)
 2002c00:	d8801f15 	stw	r2,124(sp)
 2002c04:	010001c4 	movi	r4,7
 2002c08:	20be0b0e 	bge	r4,r2,2002438 <__alt_data_end+0xff002438>
 2002c0c:	d9002d17 	ldw	r4,180(sp)
 2002c10:	d9801e04 	addi	r6,sp,120
 2002c14:	b80b883a 	mov	r5,r23
 2002c18:	20092080 	call	2009208 <__sprint_r>
 2002c1c:	103c861e 	bne	r2,zero,2001e38 <__alt_data_end+0xff001e38>
 2002c20:	d8c02017 	ldw	r3,128(sp)
 2002c24:	da000404 	addi	r8,sp,16
 2002c28:	003e0406 	br	200243c <__alt_data_end+0xff00243c>
 2002c2c:	d9002d17 	ldw	r4,180(sp)
 2002c30:	d9801e04 	addi	r6,sp,120
 2002c34:	b80b883a 	mov	r5,r23
 2002c38:	20092080 	call	2009208 <__sprint_r>
 2002c3c:	103e3b26 	beq	r2,zero,200252c <__alt_data_end+0xff00252c>
 2002c40:	003c7d06 	br	2001e38 <__alt_data_end+0xff001e38>
 2002c44:	d9002d17 	ldw	r4,180(sp)
 2002c48:	d9801e04 	addi	r6,sp,120
 2002c4c:	b80b883a 	mov	r5,r23
 2002c50:	20092080 	call	2009208 <__sprint_r>
 2002c54:	103c781e 	bne	r2,zero,2001e38 <__alt_data_end+0xff001e38>
 2002c58:	d8c02017 	ldw	r3,128(sp)
 2002c5c:	da000404 	addi	r8,sp,16
 2002c60:	003de906 	br	2002408 <__alt_data_end+0xff002408>
 2002c64:	d9002d17 	ldw	r4,180(sp)
 2002c68:	d9801e04 	addi	r6,sp,120
 2002c6c:	b80b883a 	mov	r5,r23
 2002c70:	20092080 	call	2009208 <__sprint_r>
 2002c74:	103c701e 	bne	r2,zero,2001e38 <__alt_data_end+0xff001e38>
 2002c78:	d8c02017 	ldw	r3,128(sp)
 2002c7c:	da000404 	addi	r8,sp,16
 2002c80:	003d9b06 	br	20022f0 <__alt_data_end+0xff0022f0>
 2002c84:	d9002d17 	ldw	r4,180(sp)
 2002c88:	d9801e04 	addi	r6,sp,120
 2002c8c:	b80b883a 	mov	r5,r23
 2002c90:	20092080 	call	2009208 <__sprint_r>
 2002c94:	103c681e 	bne	r2,zero,2001e38 <__alt_data_end+0xff001e38>
 2002c98:	d8c02017 	ldw	r3,128(sp)
 2002c9c:	da000404 	addi	r8,sp,16
 2002ca0:	003da106 	br	2002328 <__alt_data_end+0xff002328>
 2002ca4:	d9402a17 	ldw	r5,168(sp)
 2002ca8:	d8002785 	stb	zero,158(sp)
 2002cac:	283f0616 	blt	r5,zero,20028c8 <__alt_data_end+0xff0028c8>
 2002cb0:	00ffdfc4 	movi	r3,-129
 2002cb4:	9d84b03a 	or	r2,r19,r22
 2002cb8:	90e4703a 	and	r18,r18,r3
 2002cbc:	103c3b26 	beq	r2,zero,2001dac <__alt_data_end+0xff001dac>
 2002cc0:	0039883a 	mov	fp,zero
 2002cc4:	003e5806 	br	2002628 <__alt_data_end+0xff002628>
 2002cc8:	9080040c 	andi	r2,r18,16
 2002ccc:	1001b326 	beq	r2,zero,200339c <___vfprintf_internal_r+0x1974>
 2002cd0:	d8c02e17 	ldw	r3,184(sp)
 2002cd4:	d9002a17 	ldw	r4,168(sp)
 2002cd8:	d8002785 	stb	zero,158(sp)
 2002cdc:	18800104 	addi	r2,r3,4
 2002ce0:	1cc00017 	ldw	r19,0(r3)
 2002ce4:	002d883a 	mov	r22,zero
 2002ce8:	2001b516 	blt	r4,zero,20033c0 <___vfprintf_internal_r+0x1998>
 2002cec:	00ffdfc4 	movi	r3,-129
 2002cf0:	d8802e15 	stw	r2,184(sp)
 2002cf4:	90e4703a 	and	r18,r18,r3
 2002cf8:	983d0526 	beq	r19,zero,2002110 <__alt_data_end+0xff002110>
 2002cfc:	0039883a 	mov	fp,zero
 2002d00:	003d0806 	br	2002124 <__alt_data_end+0xff002124>
 2002d04:	dc402617 	ldw	r17,152(sp)
 2002d08:	0441d30e 	bge	zero,r17,2003458 <___vfprintf_internal_r+0x1a30>
 2002d0c:	dc403217 	ldw	r17,200(sp)
 2002d10:	d8803317 	ldw	r2,204(sp)
 2002d14:	1440010e 	bge	r2,r17,2002d1c <___vfprintf_internal_r+0x12f4>
 2002d18:	1023883a 	mov	r17,r2
 2002d1c:	04400a0e 	bge	zero,r17,2002d48 <___vfprintf_internal_r+0x1320>
 2002d20:	d8801f17 	ldw	r2,124(sp)
 2002d24:	1c47883a 	add	r3,r3,r17
 2002d28:	44000015 	stw	r16,0(r8)
 2002d2c:	10800044 	addi	r2,r2,1
 2002d30:	44400115 	stw	r17,4(r8)
 2002d34:	d8c02015 	stw	r3,128(sp)
 2002d38:	d8801f15 	stw	r2,124(sp)
 2002d3c:	010001c4 	movi	r4,7
 2002d40:	20826516 	blt	r4,r2,20036d8 <___vfprintf_internal_r+0x1cb0>
 2002d44:	42000204 	addi	r8,r8,8
 2002d48:	88026116 	blt	r17,zero,20036d0 <___vfprintf_internal_r+0x1ca8>
 2002d4c:	d9003217 	ldw	r4,200(sp)
 2002d50:	2463c83a 	sub	r17,r4,r17
 2002d54:	04407b0e 	bge	zero,r17,2002f44 <___vfprintf_internal_r+0x151c>
 2002d58:	05800404 	movi	r22,16
 2002d5c:	d8801f17 	ldw	r2,124(sp)
 2002d60:	b4419d0e 	bge	r22,r17,20033d8 <___vfprintf_internal_r+0x19b0>
 2002d64:	01008074 	movhi	r4,513
 2002d68:	21041184 	addi	r4,r4,4166
 2002d6c:	d9002c15 	stw	r4,176(sp)
 2002d70:	070001c4 	movi	fp,7
 2002d74:	dcc02d17 	ldw	r19,180(sp)
 2002d78:	00000306 	br	2002d88 <___vfprintf_internal_r+0x1360>
 2002d7c:	42000204 	addi	r8,r8,8
 2002d80:	8c7ffc04 	addi	r17,r17,-16
 2002d84:	b441970e 	bge	r22,r17,20033e4 <___vfprintf_internal_r+0x19bc>
 2002d88:	18c00404 	addi	r3,r3,16
 2002d8c:	10800044 	addi	r2,r2,1
 2002d90:	45000015 	stw	r20,0(r8)
 2002d94:	45800115 	stw	r22,4(r8)
 2002d98:	d8c02015 	stw	r3,128(sp)
 2002d9c:	d8801f15 	stw	r2,124(sp)
 2002da0:	e0bff60e 	bge	fp,r2,2002d7c <__alt_data_end+0xff002d7c>
 2002da4:	d9801e04 	addi	r6,sp,120
 2002da8:	b80b883a 	mov	r5,r23
 2002dac:	9809883a 	mov	r4,r19
 2002db0:	20092080 	call	2009208 <__sprint_r>
 2002db4:	103c201e 	bne	r2,zero,2001e38 <__alt_data_end+0xff001e38>
 2002db8:	d8c02017 	ldw	r3,128(sp)
 2002dbc:	d8801f17 	ldw	r2,124(sp)
 2002dc0:	da000404 	addi	r8,sp,16
 2002dc4:	003fee06 	br	2002d80 <__alt_data_end+0xff002d80>
 2002dc8:	d9002d17 	ldw	r4,180(sp)
 2002dcc:	d9801e04 	addi	r6,sp,120
 2002dd0:	b80b883a 	mov	r5,r23
 2002dd4:	20092080 	call	2009208 <__sprint_r>
 2002dd8:	103c171e 	bne	r2,zero,2001e38 <__alt_data_end+0xff001e38>
 2002ddc:	d8c02017 	ldw	r3,128(sp)
 2002de0:	df002787 	ldb	fp,158(sp)
 2002de4:	da000404 	addi	r8,sp,16
 2002de8:	003d3406 	br	20022bc <__alt_data_end+0xff0022bc>
 2002dec:	9080040c 	andi	r2,r18,16
 2002df0:	10016126 	beq	r2,zero,2003378 <___vfprintf_internal_r+0x1950>
 2002df4:	d9402e17 	ldw	r5,184(sp)
 2002df8:	2cc00017 	ldw	r19,0(r5)
 2002dfc:	29400104 	addi	r5,r5,4
 2002e00:	d9402e15 	stw	r5,184(sp)
 2002e04:	982dd7fa 	srai	r22,r19,31
 2002e08:	b005883a 	mov	r2,r22
 2002e0c:	003c5a06 	br	2001f78 <__alt_data_end+0xff001f78>
 2002e10:	9080040c 	andi	r2,r18,16
 2002e14:	10003526 	beq	r2,zero,2002eec <___vfprintf_internal_r+0x14c4>
 2002e18:	d8c02e17 	ldw	r3,184(sp)
 2002e1c:	d9002a17 	ldw	r4,168(sp)
 2002e20:	d8002785 	stb	zero,158(sp)
 2002e24:	18800104 	addi	r2,r3,4
 2002e28:	1cc00017 	ldw	r19,0(r3)
 2002e2c:	002d883a 	mov	r22,zero
 2002e30:	20003716 	blt	r4,zero,2002f10 <___vfprintf_internal_r+0x14e8>
 2002e34:	00ffdfc4 	movi	r3,-129
 2002e38:	d8802e15 	stw	r2,184(sp)
 2002e3c:	90e4703a 	and	r18,r18,r3
 2002e40:	0039883a 	mov	fp,zero
 2002e44:	983dd426 	beq	r19,zero,2002598 <__alt_data_end+0xff002598>
 2002e48:	00800244 	movi	r2,9
 2002e4c:	14fc5336 	bltu	r2,r19,2001f9c <__alt_data_end+0xff001f9c>
 2002e50:	d8c02817 	ldw	r3,160(sp)
 2002e54:	dc001dc4 	addi	r16,sp,119
 2002e58:	9cc00c04 	addi	r19,r19,48
 2002e5c:	1c07c83a 	sub	r3,r3,r16
 2002e60:	dcc01dc5 	stb	r19,119(sp)
 2002e64:	d8c02b15 	stw	r3,172(sp)
 2002e68:	003cc606 	br	2002184 <__alt_data_end+0xff002184>
 2002e6c:	d8803317 	ldw	r2,204(sp)
 2002e70:	143fffc4 	addi	r16,r2,-1
 2002e74:	043f4d0e 	bge	zero,r16,2002bac <__alt_data_end+0xff002bac>
 2002e78:	07000404 	movi	fp,16
 2002e7c:	e400810e 	bge	fp,r16,2003084 <___vfprintf_internal_r+0x165c>
 2002e80:	01408074 	movhi	r5,513
 2002e84:	29441184 	addi	r5,r5,4166
 2002e88:	d9402c15 	stw	r5,176(sp)
 2002e8c:	01c001c4 	movi	r7,7
 2002e90:	dcc02d17 	ldw	r19,180(sp)
 2002e94:	00000306 	br	2002ea4 <___vfprintf_internal_r+0x147c>
 2002e98:	b5800204 	addi	r22,r22,8
 2002e9c:	843ffc04 	addi	r16,r16,-16
 2002ea0:	e4007b0e 	bge	fp,r16,2003090 <___vfprintf_internal_r+0x1668>
 2002ea4:	18c00404 	addi	r3,r3,16
 2002ea8:	8c400044 	addi	r17,r17,1
 2002eac:	b5000015 	stw	r20,0(r22)
 2002eb0:	b7000115 	stw	fp,4(r22)
 2002eb4:	d8c02015 	stw	r3,128(sp)
 2002eb8:	dc401f15 	stw	r17,124(sp)
 2002ebc:	3c7ff60e 	bge	r7,r17,2002e98 <__alt_data_end+0xff002e98>
 2002ec0:	d9801e04 	addi	r6,sp,120
 2002ec4:	b80b883a 	mov	r5,r23
 2002ec8:	9809883a 	mov	r4,r19
 2002ecc:	d9c03c15 	stw	r7,240(sp)
 2002ed0:	20092080 	call	2009208 <__sprint_r>
 2002ed4:	d9c03c17 	ldw	r7,240(sp)
 2002ed8:	103bd71e 	bne	r2,zero,2001e38 <__alt_data_end+0xff001e38>
 2002edc:	d8c02017 	ldw	r3,128(sp)
 2002ee0:	dc401f17 	ldw	r17,124(sp)
 2002ee4:	dd800404 	addi	r22,sp,16
 2002ee8:	003fec06 	br	2002e9c <__alt_data_end+0xff002e9c>
 2002eec:	9080100c 	andi	r2,r18,64
 2002ef0:	d8002785 	stb	zero,158(sp)
 2002ef4:	10010e26 	beq	r2,zero,2003330 <___vfprintf_internal_r+0x1908>
 2002ef8:	d9402e17 	ldw	r5,184(sp)
 2002efc:	d8c02a17 	ldw	r3,168(sp)
 2002f00:	002d883a 	mov	r22,zero
 2002f04:	28800104 	addi	r2,r5,4
 2002f08:	2cc0000b 	ldhu	r19,0(r5)
 2002f0c:	183fc90e 	bge	r3,zero,2002e34 <__alt_data_end+0xff002e34>
 2002f10:	d8802e15 	stw	r2,184(sp)
 2002f14:	0039883a 	mov	fp,zero
 2002f18:	9d84b03a 	or	r2,r19,r22
 2002f1c:	103c1e1e 	bne	r2,zero,2001f98 <__alt_data_end+0xff001f98>
 2002f20:	00800044 	movi	r2,1
 2002f24:	003e6c06 	br	20028d8 <__alt_data_end+0xff0028d8>
 2002f28:	d9002d17 	ldw	r4,180(sp)
 2002f2c:	d9801e04 	addi	r6,sp,120
 2002f30:	b80b883a 	mov	r5,r23
 2002f34:	20092080 	call	2009208 <__sprint_r>
 2002f38:	103bbf1e 	bne	r2,zero,2001e38 <__alt_data_end+0xff001e38>
 2002f3c:	d8c02017 	ldw	r3,128(sp)
 2002f40:	da000404 	addi	r8,sp,16
 2002f44:	d9003217 	ldw	r4,200(sp)
 2002f48:	d8802617 	ldw	r2,152(sp)
 2002f4c:	d9403317 	ldw	r5,204(sp)
 2002f50:	8123883a 	add	r17,r16,r4
 2002f54:	11400216 	blt	r2,r5,2002f60 <___vfprintf_internal_r+0x1538>
 2002f58:	9100004c 	andi	r4,r18,1
 2002f5c:	20000d26 	beq	r4,zero,2002f94 <___vfprintf_internal_r+0x156c>
 2002f60:	d9003717 	ldw	r4,220(sp)
 2002f64:	d9403417 	ldw	r5,208(sp)
 2002f68:	1907883a 	add	r3,r3,r4
 2002f6c:	d9001f17 	ldw	r4,124(sp)
 2002f70:	41400015 	stw	r5,0(r8)
 2002f74:	d9403717 	ldw	r5,220(sp)
 2002f78:	21000044 	addi	r4,r4,1
 2002f7c:	d8c02015 	stw	r3,128(sp)
 2002f80:	41400115 	stw	r5,4(r8)
 2002f84:	d9001f15 	stw	r4,124(sp)
 2002f88:	014001c4 	movi	r5,7
 2002f8c:	2901e816 	blt	r5,r4,2003730 <___vfprintf_internal_r+0x1d08>
 2002f90:	42000204 	addi	r8,r8,8
 2002f94:	d9003317 	ldw	r4,204(sp)
 2002f98:	8121883a 	add	r16,r16,r4
 2002f9c:	2085c83a 	sub	r2,r4,r2
 2002fa0:	8461c83a 	sub	r16,r16,r17
 2002fa4:	1400010e 	bge	r2,r16,2002fac <___vfprintf_internal_r+0x1584>
 2002fa8:	1021883a 	mov	r16,r2
 2002fac:	04000a0e 	bge	zero,r16,2002fd8 <___vfprintf_internal_r+0x15b0>
 2002fb0:	d9001f17 	ldw	r4,124(sp)
 2002fb4:	1c07883a 	add	r3,r3,r16
 2002fb8:	44400015 	stw	r17,0(r8)
 2002fbc:	21000044 	addi	r4,r4,1
 2002fc0:	44000115 	stw	r16,4(r8)
 2002fc4:	d8c02015 	stw	r3,128(sp)
 2002fc8:	d9001f15 	stw	r4,124(sp)
 2002fcc:	014001c4 	movi	r5,7
 2002fd0:	2901fb16 	blt	r5,r4,20037c0 <___vfprintf_internal_r+0x1d98>
 2002fd4:	42000204 	addi	r8,r8,8
 2002fd8:	8001f716 	blt	r16,zero,20037b8 <___vfprintf_internal_r+0x1d90>
 2002fdc:	1421c83a 	sub	r16,r2,r16
 2002fe0:	043d160e 	bge	zero,r16,200243c <__alt_data_end+0xff00243c>
 2002fe4:	04400404 	movi	r17,16
 2002fe8:	d8801f17 	ldw	r2,124(sp)
 2002fec:	8c3efb0e 	bge	r17,r16,2002bdc <__alt_data_end+0xff002bdc>
 2002ff0:	01408074 	movhi	r5,513
 2002ff4:	29441184 	addi	r5,r5,4166
 2002ff8:	d9402c15 	stw	r5,176(sp)
 2002ffc:	058001c4 	movi	r22,7
 2003000:	dcc02d17 	ldw	r19,180(sp)
 2003004:	00000306 	br	2003014 <___vfprintf_internal_r+0x15ec>
 2003008:	42000204 	addi	r8,r8,8
 200300c:	843ffc04 	addi	r16,r16,-16
 2003010:	8c3ef50e 	bge	r17,r16,2002be8 <__alt_data_end+0xff002be8>
 2003014:	18c00404 	addi	r3,r3,16
 2003018:	10800044 	addi	r2,r2,1
 200301c:	45000015 	stw	r20,0(r8)
 2003020:	44400115 	stw	r17,4(r8)
 2003024:	d8c02015 	stw	r3,128(sp)
 2003028:	d8801f15 	stw	r2,124(sp)
 200302c:	b0bff60e 	bge	r22,r2,2003008 <__alt_data_end+0xff003008>
 2003030:	d9801e04 	addi	r6,sp,120
 2003034:	b80b883a 	mov	r5,r23
 2003038:	9809883a 	mov	r4,r19
 200303c:	20092080 	call	2009208 <__sprint_r>
 2003040:	103b7d1e 	bne	r2,zero,2001e38 <__alt_data_end+0xff001e38>
 2003044:	d8c02017 	ldw	r3,128(sp)
 2003048:	d8801f17 	ldw	r2,124(sp)
 200304c:	da000404 	addi	r8,sp,16
 2003050:	003fee06 	br	200300c <__alt_data_end+0xff00300c>
 2003054:	9088703a 	and	r4,r18,r2
 2003058:	203eab1e 	bne	r4,zero,2002b08 <__alt_data_end+0xff002b08>
 200305c:	dc401f17 	ldw	r17,124(sp)
 2003060:	40800115 	stw	r2,4(r8)
 2003064:	44000015 	stw	r16,0(r8)
 2003068:	8c400044 	addi	r17,r17,1
 200306c:	d8c02015 	stw	r3,128(sp)
 2003070:	dc401f15 	stw	r17,124(sp)
 2003074:	008001c4 	movi	r2,7
 2003078:	14400e16 	blt	r2,r17,20030b4 <___vfprintf_internal_r+0x168c>
 200307c:	45800204 	addi	r22,r8,8
 2003080:	003eca06 	br	2002bac <__alt_data_end+0xff002bac>
 2003084:	01008074 	movhi	r4,513
 2003088:	21041184 	addi	r4,r4,4166
 200308c:	d9002c15 	stw	r4,176(sp)
 2003090:	d8802c17 	ldw	r2,176(sp)
 2003094:	1c07883a 	add	r3,r3,r16
 2003098:	8c400044 	addi	r17,r17,1
 200309c:	b0800015 	stw	r2,0(r22)
 20030a0:	b4000115 	stw	r16,4(r22)
 20030a4:	d8c02015 	stw	r3,128(sp)
 20030a8:	dc401f15 	stw	r17,124(sp)
 20030ac:	008001c4 	movi	r2,7
 20030b0:	147ebd0e 	bge	r2,r17,2002ba8 <__alt_data_end+0xff002ba8>
 20030b4:	d9002d17 	ldw	r4,180(sp)
 20030b8:	d9801e04 	addi	r6,sp,120
 20030bc:	b80b883a 	mov	r5,r23
 20030c0:	20092080 	call	2009208 <__sprint_r>
 20030c4:	103b5c1e 	bne	r2,zero,2001e38 <__alt_data_end+0xff001e38>
 20030c8:	d8c02017 	ldw	r3,128(sp)
 20030cc:	dc401f17 	ldw	r17,124(sp)
 20030d0:	dd800404 	addi	r22,sp,16
 20030d4:	003eb506 	br	2002bac <__alt_data_end+0xff002bac>
 20030d8:	d9002d17 	ldw	r4,180(sp)
 20030dc:	d9801e04 	addi	r6,sp,120
 20030e0:	b80b883a 	mov	r5,r23
 20030e4:	20092080 	call	2009208 <__sprint_r>
 20030e8:	103b531e 	bne	r2,zero,2001e38 <__alt_data_end+0xff001e38>
 20030ec:	d8c02017 	ldw	r3,128(sp)
 20030f0:	dc401f17 	ldw	r17,124(sp)
 20030f4:	da000404 	addi	r8,sp,16
 20030f8:	003e8d06 	br	2002b30 <__alt_data_end+0xff002b30>
 20030fc:	d9002d17 	ldw	r4,180(sp)
 2003100:	d9801e04 	addi	r6,sp,120
 2003104:	b80b883a 	mov	r5,r23
 2003108:	20092080 	call	2009208 <__sprint_r>
 200310c:	103b4a1e 	bne	r2,zero,2001e38 <__alt_data_end+0xff001e38>
 2003110:	d8c02017 	ldw	r3,128(sp)
 2003114:	dc401f17 	ldw	r17,124(sp)
 2003118:	dd800404 	addi	r22,sp,16
 200311c:	003e8f06 	br	2002b5c <__alt_data_end+0xff002b5c>
 2003120:	0027883a 	mov	r19,zero
 2003124:	003f4a06 	br	2002e50 <__alt_data_end+0xff002e50>
 2003128:	d9002d17 	ldw	r4,180(sp)
 200312c:	d9801e04 	addi	r6,sp,120
 2003130:	b80b883a 	mov	r5,r23
 2003134:	20092080 	call	2009208 <__sprint_r>
 2003138:	103b3f1e 	bne	r2,zero,2001e38 <__alt_data_end+0xff001e38>
 200313c:	d8c02017 	ldw	r3,128(sp)
 2003140:	da000404 	addi	r8,sp,16
 2003144:	003c7b06 	br	2002334 <__alt_data_end+0xff002334>
 2003148:	d9402a17 	ldw	r5,168(sp)
 200314c:	04e7c83a 	sub	r19,zero,r19
 2003150:	07000b44 	movi	fp,45
 2003154:	9804c03a 	cmpne	r2,r19,zero
 2003158:	05adc83a 	sub	r22,zero,r22
 200315c:	df002785 	stb	fp,158(sp)
 2003160:	b0adc83a 	sub	r22,r22,r2
 2003164:	28017b16 	blt	r5,zero,2003754 <___vfprintf_internal_r+0x1d2c>
 2003168:	00bfdfc4 	movi	r2,-129
 200316c:	90a4703a 	and	r18,r18,r2
 2003170:	003b8906 	br	2001f98 <__alt_data_end+0xff001f98>
 2003174:	d9003617 	ldw	r4,216(sp)
 2003178:	d9403817 	ldw	r5,224(sp)
 200317c:	da003d15 	stw	r8,244(sp)
 2003180:	2008e2c0 	call	2008e2c <__fpclassifyd>
 2003184:	da003d17 	ldw	r8,244(sp)
 2003188:	1000f026 	beq	r2,zero,200354c <___vfprintf_internal_r+0x1b24>
 200318c:	d9002a17 	ldw	r4,168(sp)
 2003190:	05bff7c4 	movi	r22,-33
 2003194:	00bfffc4 	movi	r2,-1
 2003198:	8dac703a 	and	r22,r17,r22
 200319c:	20820026 	beq	r4,r2,20039a0 <___vfprintf_internal_r+0x1f78>
 20031a0:	008011c4 	movi	r2,71
 20031a4:	b081f726 	beq	r22,r2,2003984 <___vfprintf_internal_r+0x1f5c>
 20031a8:	d9003817 	ldw	r4,224(sp)
 20031ac:	90c04014 	ori	r3,r18,256
 20031b0:	d8c02c15 	stw	r3,176(sp)
 20031b4:	20021516 	blt	r4,zero,2003a0c <___vfprintf_internal_r+0x1fe4>
 20031b8:	dcc03817 	ldw	r19,224(sp)
 20031bc:	d8002905 	stb	zero,164(sp)
 20031c0:	00801984 	movi	r2,102
 20031c4:	8881f926 	beq	r17,r2,20039ac <___vfprintf_internal_r+0x1f84>
 20031c8:	00801184 	movi	r2,70
 20031cc:	88821c26 	beq	r17,r2,2003a40 <___vfprintf_internal_r+0x2018>
 20031d0:	00801144 	movi	r2,69
 20031d4:	b081ef26 	beq	r22,r2,2003994 <___vfprintf_internal_r+0x1f6c>
 20031d8:	d8c02a17 	ldw	r3,168(sp)
 20031dc:	d8802104 	addi	r2,sp,132
 20031e0:	d8800315 	stw	r2,12(sp)
 20031e4:	d9403617 	ldw	r5,216(sp)
 20031e8:	d8802504 	addi	r2,sp,148
 20031ec:	d9002d17 	ldw	r4,180(sp)
 20031f0:	d8800215 	stw	r2,8(sp)
 20031f4:	d8802604 	addi	r2,sp,152
 20031f8:	d8c00015 	stw	r3,0(sp)
 20031fc:	d8800115 	stw	r2,4(sp)
 2003200:	01c00084 	movi	r7,2
 2003204:	980d883a 	mov	r6,r19
 2003208:	d8c03c15 	stw	r3,240(sp)
 200320c:	da003d15 	stw	r8,244(sp)
 2003210:	20041580 	call	2004158 <_dtoa_r>
 2003214:	1021883a 	mov	r16,r2
 2003218:	008019c4 	movi	r2,103
 200321c:	d8c03c17 	ldw	r3,240(sp)
 2003220:	da003d17 	ldw	r8,244(sp)
 2003224:	88817126 	beq	r17,r2,20037ec <___vfprintf_internal_r+0x1dc4>
 2003228:	008011c4 	movi	r2,71
 200322c:	88829126 	beq	r17,r2,2003c74 <___vfprintf_internal_r+0x224c>
 2003230:	80f9883a 	add	fp,r16,r3
 2003234:	d9003617 	ldw	r4,216(sp)
 2003238:	000d883a 	mov	r6,zero
 200323c:	000f883a 	mov	r7,zero
 2003240:	980b883a 	mov	r5,r19
 2003244:	da003d15 	stw	r8,244(sp)
 2003248:	200d1400 	call	200d140 <__eqdf2>
 200324c:	da003d17 	ldw	r8,244(sp)
 2003250:	10018d26 	beq	r2,zero,2003888 <___vfprintf_internal_r+0x1e60>
 2003254:	d8802117 	ldw	r2,132(sp)
 2003258:	1700062e 	bgeu	r2,fp,2003274 <___vfprintf_internal_r+0x184c>
 200325c:	01000c04 	movi	r4,48
 2003260:	10c00044 	addi	r3,r2,1
 2003264:	d8c02115 	stw	r3,132(sp)
 2003268:	11000005 	stb	r4,0(r2)
 200326c:	d8802117 	ldw	r2,132(sp)
 2003270:	173ffb36 	bltu	r2,fp,2003260 <__alt_data_end+0xff003260>
 2003274:	1405c83a 	sub	r2,r2,r16
 2003278:	d8803315 	stw	r2,204(sp)
 200327c:	008011c4 	movi	r2,71
 2003280:	b0817626 	beq	r22,r2,200385c <___vfprintf_internal_r+0x1e34>
 2003284:	00801944 	movi	r2,101
 2003288:	1442800e 	bge	r2,r17,2003c8c <___vfprintf_internal_r+0x2264>
 200328c:	d8c02617 	ldw	r3,152(sp)
 2003290:	00801984 	movi	r2,102
 2003294:	d8c03215 	stw	r3,200(sp)
 2003298:	8881fe26 	beq	r17,r2,2003a94 <___vfprintf_internal_r+0x206c>
 200329c:	d8c03217 	ldw	r3,200(sp)
 20032a0:	d9003317 	ldw	r4,204(sp)
 20032a4:	1901dd16 	blt	r3,r4,2003a1c <___vfprintf_internal_r+0x1ff4>
 20032a8:	9480004c 	andi	r18,r18,1
 20032ac:	90022b1e 	bne	r18,zero,2003b5c <___vfprintf_internal_r+0x2134>
 20032b0:	1805883a 	mov	r2,r3
 20032b4:	18028316 	blt	r3,zero,2003cc4 <___vfprintf_internal_r+0x229c>
 20032b8:	d8c03217 	ldw	r3,200(sp)
 20032bc:	044019c4 	movi	r17,103
 20032c0:	d8c02b15 	stw	r3,172(sp)
 20032c4:	df002907 	ldb	fp,164(sp)
 20032c8:	e001531e 	bne	fp,zero,2003818 <___vfprintf_internal_r+0x1df0>
 20032cc:	df002783 	ldbu	fp,158(sp)
 20032d0:	d8802915 	stw	r2,164(sp)
 20032d4:	dc802c17 	ldw	r18,176(sp)
 20032d8:	d8002a15 	stw	zero,168(sp)
 20032dc:	003baf06 	br	200219c <__alt_data_end+0xff00219c>
 20032e0:	d8c02e17 	ldw	r3,184(sp)
 20032e4:	d9002e17 	ldw	r4,184(sp)
 20032e8:	d9402e17 	ldw	r5,184(sp)
 20032ec:	18c00017 	ldw	r3,0(r3)
 20032f0:	21000117 	ldw	r4,4(r4)
 20032f4:	29400204 	addi	r5,r5,8
 20032f8:	d8c03615 	stw	r3,216(sp)
 20032fc:	d9003815 	stw	r4,224(sp)
 2003300:	d9402e15 	stw	r5,184(sp)
 2003304:	003b5006 	br	2002048 <__alt_data_end+0xff002048>
 2003308:	ac400007 	ldb	r17,0(r21)
 200330c:	003a2806 	br	2001bb0 <__alt_data_end+0xff001bb0>
 2003310:	9080100c 	andi	r2,r18,64
 2003314:	1000a826 	beq	r2,zero,20035b8 <___vfprintf_internal_r+0x1b90>
 2003318:	d8c02e17 	ldw	r3,184(sp)
 200331c:	002d883a 	mov	r22,zero
 2003320:	1cc0000b 	ldhu	r19,0(r3)
 2003324:	18c00104 	addi	r3,r3,4
 2003328:	d8c02e15 	stw	r3,184(sp)
 200332c:	003caf06 	br	20025ec <__alt_data_end+0xff0025ec>
 2003330:	d9002e17 	ldw	r4,184(sp)
 2003334:	d9402a17 	ldw	r5,168(sp)
 2003338:	002d883a 	mov	r22,zero
 200333c:	20800104 	addi	r2,r4,4
 2003340:	24c00017 	ldw	r19,0(r4)
 2003344:	283ebb0e 	bge	r5,zero,2002e34 <__alt_data_end+0xff002e34>
 2003348:	003ef106 	br	2002f10 <__alt_data_end+0xff002f10>
 200334c:	9080040c 	andi	r2,r18,16
 2003350:	1000921e 	bne	r2,zero,200359c <___vfprintf_internal_r+0x1b74>
 2003354:	9480100c 	andi	r18,r18,64
 2003358:	90013926 	beq	r18,zero,2003840 <___vfprintf_internal_r+0x1e18>
 200335c:	d9402e17 	ldw	r5,184(sp)
 2003360:	d8c02f17 	ldw	r3,188(sp)
 2003364:	28800017 	ldw	r2,0(r5)
 2003368:	29400104 	addi	r5,r5,4
 200336c:	d9402e15 	stw	r5,184(sp)
 2003370:	10c0000d 	sth	r3,0(r2)
 2003374:	0039e406 	br	2001b08 <__alt_data_end+0xff001b08>
 2003378:	9080100c 	andi	r2,r18,64
 200337c:	10008026 	beq	r2,zero,2003580 <___vfprintf_internal_r+0x1b58>
 2003380:	d8802e17 	ldw	r2,184(sp)
 2003384:	14c0000f 	ldh	r19,0(r2)
 2003388:	10800104 	addi	r2,r2,4
 200338c:	d8802e15 	stw	r2,184(sp)
 2003390:	982dd7fa 	srai	r22,r19,31
 2003394:	b005883a 	mov	r2,r22
 2003398:	003af706 	br	2001f78 <__alt_data_end+0xff001f78>
 200339c:	9080100c 	andi	r2,r18,64
 20033a0:	d8002785 	stb	zero,158(sp)
 20033a4:	10008a1e 	bne	r2,zero,20035d0 <___vfprintf_internal_r+0x1ba8>
 20033a8:	d9002e17 	ldw	r4,184(sp)
 20033ac:	d9402a17 	ldw	r5,168(sp)
 20033b0:	002d883a 	mov	r22,zero
 20033b4:	20800104 	addi	r2,r4,4
 20033b8:	24c00017 	ldw	r19,0(r4)
 20033bc:	283e4b0e 	bge	r5,zero,2002cec <__alt_data_end+0xff002cec>
 20033c0:	9d86b03a 	or	r3,r19,r22
 20033c4:	d8802e15 	stw	r2,184(sp)
 20033c8:	183e4c1e 	bne	r3,zero,2002cfc <__alt_data_end+0xff002cfc>
 20033cc:	0039883a 	mov	fp,zero
 20033d0:	0005883a 	mov	r2,zero
 20033d4:	003d4006 	br	20028d8 <__alt_data_end+0xff0028d8>
 20033d8:	01408074 	movhi	r5,513
 20033dc:	29441184 	addi	r5,r5,4166
 20033e0:	d9402c15 	stw	r5,176(sp)
 20033e4:	d9402c17 	ldw	r5,176(sp)
 20033e8:	1c47883a 	add	r3,r3,r17
 20033ec:	10800044 	addi	r2,r2,1
 20033f0:	41400015 	stw	r5,0(r8)
 20033f4:	44400115 	stw	r17,4(r8)
 20033f8:	d8c02015 	stw	r3,128(sp)
 20033fc:	d8801f15 	stw	r2,124(sp)
 2003400:	010001c4 	movi	r4,7
 2003404:	20bec816 	blt	r4,r2,2002f28 <__alt_data_end+0xff002f28>
 2003408:	42000204 	addi	r8,r8,8
 200340c:	003ecd06 	br	2002f44 <__alt_data_end+0xff002f44>
 2003410:	d9002a17 	ldw	r4,168(sp)
 2003414:	d8002785 	stb	zero,158(sp)
 2003418:	203d2d16 	blt	r4,zero,20028d0 <__alt_data_end+0xff0028d0>
 200341c:	00bfdfc4 	movi	r2,-129
 2003420:	90a4703a 	and	r18,r18,r2
 2003424:	003a6106 	br	2001dac <__alt_data_end+0xff001dac>
 2003428:	01008074 	movhi	r4,513
 200342c:	21041184 	addi	r4,r4,4166
 2003430:	d9002c15 	stw	r4,176(sp)
 2003434:	003bea06 	br	20023e0 <__alt_data_end+0xff0023e0>
 2003438:	d9002d17 	ldw	r4,180(sp)
 200343c:	d9801e04 	addi	r6,sp,120
 2003440:	b80b883a 	mov	r5,r23
 2003444:	20092080 	call	2009208 <__sprint_r>
 2003448:	103a7b1e 	bne	r2,zero,2001e38 <__alt_data_end+0xff001e38>
 200344c:	d8c02017 	ldw	r3,128(sp)
 2003450:	da000404 	addi	r8,sp,16
 2003454:	003d4106 	br	200295c <__alt_data_end+0xff00295c>
 2003458:	d8801f17 	ldw	r2,124(sp)
 200345c:	01408074 	movhi	r5,513
 2003460:	01000044 	movi	r4,1
 2003464:	18c00044 	addi	r3,r3,1
 2003468:	10800044 	addi	r2,r2,1
 200346c:	29441104 	addi	r5,r5,4164
 2003470:	41000115 	stw	r4,4(r8)
 2003474:	41400015 	stw	r5,0(r8)
 2003478:	d8c02015 	stw	r3,128(sp)
 200347c:	d8801f15 	stw	r2,124(sp)
 2003480:	010001c4 	movi	r4,7
 2003484:	20805c16 	blt	r4,r2,20035f8 <___vfprintf_internal_r+0x1bd0>
 2003488:	42000204 	addi	r8,r8,8
 200348c:	8800041e 	bne	r17,zero,20034a0 <___vfprintf_internal_r+0x1a78>
 2003490:	d8803317 	ldw	r2,204(sp)
 2003494:	1000021e 	bne	r2,zero,20034a0 <___vfprintf_internal_r+0x1a78>
 2003498:	9080004c 	andi	r2,r18,1
 200349c:	103be726 	beq	r2,zero,200243c <__alt_data_end+0xff00243c>
 20034a0:	d9003717 	ldw	r4,220(sp)
 20034a4:	d8801f17 	ldw	r2,124(sp)
 20034a8:	d9403417 	ldw	r5,208(sp)
 20034ac:	20c7883a 	add	r3,r4,r3
 20034b0:	10800044 	addi	r2,r2,1
 20034b4:	41000115 	stw	r4,4(r8)
 20034b8:	41400015 	stw	r5,0(r8)
 20034bc:	d8c02015 	stw	r3,128(sp)
 20034c0:	d8801f15 	stw	r2,124(sp)
 20034c4:	010001c4 	movi	r4,7
 20034c8:	20812116 	blt	r4,r2,2003950 <___vfprintf_internal_r+0x1f28>
 20034cc:	42000204 	addi	r8,r8,8
 20034d0:	0463c83a 	sub	r17,zero,r17
 20034d4:	0440730e 	bge	zero,r17,20036a4 <___vfprintf_internal_r+0x1c7c>
 20034d8:	05800404 	movi	r22,16
 20034dc:	b440860e 	bge	r22,r17,20036f8 <___vfprintf_internal_r+0x1cd0>
 20034e0:	01408074 	movhi	r5,513
 20034e4:	29441184 	addi	r5,r5,4166
 20034e8:	d9402c15 	stw	r5,176(sp)
 20034ec:	070001c4 	movi	fp,7
 20034f0:	dcc02d17 	ldw	r19,180(sp)
 20034f4:	00000306 	br	2003504 <___vfprintf_internal_r+0x1adc>
 20034f8:	42000204 	addi	r8,r8,8
 20034fc:	8c7ffc04 	addi	r17,r17,-16
 2003500:	b440800e 	bge	r22,r17,2003704 <___vfprintf_internal_r+0x1cdc>
 2003504:	18c00404 	addi	r3,r3,16
 2003508:	10800044 	addi	r2,r2,1
 200350c:	45000015 	stw	r20,0(r8)
 2003510:	45800115 	stw	r22,4(r8)
 2003514:	d8c02015 	stw	r3,128(sp)
 2003518:	d8801f15 	stw	r2,124(sp)
 200351c:	e0bff60e 	bge	fp,r2,20034f8 <__alt_data_end+0xff0034f8>
 2003520:	d9801e04 	addi	r6,sp,120
 2003524:	b80b883a 	mov	r5,r23
 2003528:	9809883a 	mov	r4,r19
 200352c:	20092080 	call	2009208 <__sprint_r>
 2003530:	103a411e 	bne	r2,zero,2001e38 <__alt_data_end+0xff001e38>
 2003534:	d8c02017 	ldw	r3,128(sp)
 2003538:	d8801f17 	ldw	r2,124(sp)
 200353c:	da000404 	addi	r8,sp,16
 2003540:	003fee06 	br	20034fc <__alt_data_end+0xff0034fc>
 2003544:	00bfffc4 	movi	r2,-1
 2003548:	003a3f06 	br	2001e48 <__alt_data_end+0xff001e48>
 200354c:	008011c4 	movi	r2,71
 2003550:	1440b816 	blt	r2,r17,2003834 <___vfprintf_internal_r+0x1e0c>
 2003554:	04008074 	movhi	r16,513
 2003558:	84040304 	addi	r16,r16,4108
 200355c:	00c000c4 	movi	r3,3
 2003560:	00bfdfc4 	movi	r2,-129
 2003564:	d8c02915 	stw	r3,164(sp)
 2003568:	90a4703a 	and	r18,r18,r2
 200356c:	df002783 	ldbu	fp,158(sp)
 2003570:	d8c02b15 	stw	r3,172(sp)
 2003574:	d8002a15 	stw	zero,168(sp)
 2003578:	d8003215 	stw	zero,200(sp)
 200357c:	003b0706 	br	200219c <__alt_data_end+0xff00219c>
 2003580:	d8c02e17 	ldw	r3,184(sp)
 2003584:	1cc00017 	ldw	r19,0(r3)
 2003588:	18c00104 	addi	r3,r3,4
 200358c:	d8c02e15 	stw	r3,184(sp)
 2003590:	982dd7fa 	srai	r22,r19,31
 2003594:	b005883a 	mov	r2,r22
 2003598:	003a7706 	br	2001f78 <__alt_data_end+0xff001f78>
 200359c:	d8c02e17 	ldw	r3,184(sp)
 20035a0:	d9002f17 	ldw	r4,188(sp)
 20035a4:	18800017 	ldw	r2,0(r3)
 20035a8:	18c00104 	addi	r3,r3,4
 20035ac:	d8c02e15 	stw	r3,184(sp)
 20035b0:	11000015 	stw	r4,0(r2)
 20035b4:	00395406 	br	2001b08 <__alt_data_end+0xff001b08>
 20035b8:	d9002e17 	ldw	r4,184(sp)
 20035bc:	002d883a 	mov	r22,zero
 20035c0:	24c00017 	ldw	r19,0(r4)
 20035c4:	21000104 	addi	r4,r4,4
 20035c8:	d9002e15 	stw	r4,184(sp)
 20035cc:	003c0706 	br	20025ec <__alt_data_end+0xff0025ec>
 20035d0:	d9402e17 	ldw	r5,184(sp)
 20035d4:	d8c02a17 	ldw	r3,168(sp)
 20035d8:	002d883a 	mov	r22,zero
 20035dc:	28800104 	addi	r2,r5,4
 20035e0:	2cc0000b 	ldhu	r19,0(r5)
 20035e4:	183dc10e 	bge	r3,zero,2002cec <__alt_data_end+0xff002cec>
 20035e8:	003f7506 	br	20033c0 <__alt_data_end+0xff0033c0>
 20035ec:	04008074 	movhi	r16,513
 20035f0:	84040104 	addi	r16,r16,4100
 20035f4:	003aa706 	br	2002094 <__alt_data_end+0xff002094>
 20035f8:	d9002d17 	ldw	r4,180(sp)
 20035fc:	d9801e04 	addi	r6,sp,120
 2003600:	b80b883a 	mov	r5,r23
 2003604:	20092080 	call	2009208 <__sprint_r>
 2003608:	103a0b1e 	bne	r2,zero,2001e38 <__alt_data_end+0xff001e38>
 200360c:	dc402617 	ldw	r17,152(sp)
 2003610:	d8c02017 	ldw	r3,128(sp)
 2003614:	da000404 	addi	r8,sp,16
 2003618:	003f9c06 	br	200348c <__alt_data_end+0xff00348c>
 200361c:	ac400043 	ldbu	r17,1(r21)
 2003620:	84000814 	ori	r16,r16,32
 2003624:	ad400044 	addi	r21,r21,1
 2003628:	8c403fcc 	andi	r17,r17,255
 200362c:	8c40201c 	xori	r17,r17,128
 2003630:	8c7fe004 	addi	r17,r17,-128
 2003634:	00395e06 	br	2001bb0 <__alt_data_end+0xff001bb0>
 2003638:	d8c02e15 	stw	r3,184(sp)
 200363c:	0039883a 	mov	fp,zero
 2003640:	003e3506 	br	2002f18 <__alt_data_end+0xff002f18>
 2003644:	d9002d17 	ldw	r4,180(sp)
 2003648:	d9801e04 	addi	r6,sp,120
 200364c:	b80b883a 	mov	r5,r23
 2003650:	20092080 	call	2009208 <__sprint_r>
 2003654:	1039f81e 	bne	r2,zero,2001e38 <__alt_data_end+0xff001e38>
 2003658:	d8c02017 	ldw	r3,128(sp)
 200365c:	da000404 	addi	r8,sp,16
 2003660:	003cd006 	br	20029a4 <__alt_data_end+0xff0029a4>
 2003664:	8009883a 	mov	r4,r16
 2003668:	df003d15 	stw	fp,244(sp)
 200366c:	20019900 	call	2001990 <strlen>
 2003670:	d8802b15 	stw	r2,172(sp)
 2003674:	da003d17 	ldw	r8,244(sp)
 2003678:	103c200e 	bge	r2,zero,20026fc <__alt_data_end+0xff0026fc>
 200367c:	0005883a 	mov	r2,zero
 2003680:	003c1e06 	br	20026fc <__alt_data_end+0xff0026fc>
 2003684:	d9002d17 	ldw	r4,180(sp)
 2003688:	d9801e04 	addi	r6,sp,120
 200368c:	b80b883a 	mov	r5,r23
 2003690:	20092080 	call	2009208 <__sprint_r>
 2003694:	1039e81e 	bne	r2,zero,2001e38 <__alt_data_end+0xff001e38>
 2003698:	d8c02017 	ldw	r3,128(sp)
 200369c:	d8801f17 	ldw	r2,124(sp)
 20036a0:	da000404 	addi	r8,sp,16
 20036a4:	d9403317 	ldw	r5,204(sp)
 20036a8:	10800044 	addi	r2,r2,1
 20036ac:	44000015 	stw	r16,0(r8)
 20036b0:	28c7883a 	add	r3,r5,r3
 20036b4:	003b5b06 	br	2002424 <__alt_data_end+0xff002424>
 20036b8:	01008074 	movhi	r4,513
 20036bc:	21041584 	addi	r4,r4,4182
 20036c0:	d9003515 	stw	r4,212(sp)
 20036c4:	003af206 	br	2002290 <__alt_data_end+0xff002290>
 20036c8:	013fffc4 	movi	r4,-1
 20036cc:	003a0806 	br	2001ef0 <__alt_data_end+0xff001ef0>
 20036d0:	0023883a 	mov	r17,zero
 20036d4:	003d9d06 	br	2002d4c <__alt_data_end+0xff002d4c>
 20036d8:	d9002d17 	ldw	r4,180(sp)
 20036dc:	d9801e04 	addi	r6,sp,120
 20036e0:	b80b883a 	mov	r5,r23
 20036e4:	20092080 	call	2009208 <__sprint_r>
 20036e8:	1039d31e 	bne	r2,zero,2001e38 <__alt_data_end+0xff001e38>
 20036ec:	d8c02017 	ldw	r3,128(sp)
 20036f0:	da000404 	addi	r8,sp,16
 20036f4:	003d9406 	br	2002d48 <__alt_data_end+0xff002d48>
 20036f8:	01008074 	movhi	r4,513
 20036fc:	21041184 	addi	r4,r4,4166
 2003700:	d9002c15 	stw	r4,176(sp)
 2003704:	d9002c17 	ldw	r4,176(sp)
 2003708:	1c47883a 	add	r3,r3,r17
 200370c:	10800044 	addi	r2,r2,1
 2003710:	41000015 	stw	r4,0(r8)
 2003714:	44400115 	stw	r17,4(r8)
 2003718:	d8c02015 	stw	r3,128(sp)
 200371c:	d8801f15 	stw	r2,124(sp)
 2003720:	010001c4 	movi	r4,7
 2003724:	20bfd716 	blt	r4,r2,2003684 <__alt_data_end+0xff003684>
 2003728:	42000204 	addi	r8,r8,8
 200372c:	003fdd06 	br	20036a4 <__alt_data_end+0xff0036a4>
 2003730:	d9002d17 	ldw	r4,180(sp)
 2003734:	d9801e04 	addi	r6,sp,120
 2003738:	b80b883a 	mov	r5,r23
 200373c:	20092080 	call	2009208 <__sprint_r>
 2003740:	1039bd1e 	bne	r2,zero,2001e38 <__alt_data_end+0xff001e38>
 2003744:	d8802617 	ldw	r2,152(sp)
 2003748:	d8c02017 	ldw	r3,128(sp)
 200374c:	da000404 	addi	r8,sp,16
 2003750:	003e1006 	br	2002f94 <__alt_data_end+0xff002f94>
 2003754:	00800044 	movi	r2,1
 2003758:	10803fcc 	andi	r2,r2,255
 200375c:	00c00044 	movi	r3,1
 2003760:	10fa0d26 	beq	r2,r3,2001f98 <__alt_data_end+0xff001f98>
 2003764:	00c00084 	movi	r3,2
 2003768:	10fbaf26 	beq	r2,r3,2002628 <__alt_data_end+0xff002628>
 200376c:	003a6d06 	br	2002124 <__alt_data_end+0xff002124>
 2003770:	01008074 	movhi	r4,513
 2003774:	21041584 	addi	r4,r4,4182
 2003778:	d9003515 	stw	r4,212(sp)
 200377c:	003b5406 	br	20024d0 <__alt_data_end+0xff0024d0>
 2003780:	d8802a17 	ldw	r2,168(sp)
 2003784:	00c00184 	movi	r3,6
 2003788:	1880012e 	bgeu	r3,r2,2003790 <___vfprintf_internal_r+0x1d68>
 200378c:	1805883a 	mov	r2,r3
 2003790:	d8802b15 	stw	r2,172(sp)
 2003794:	1000ef16 	blt	r2,zero,2003b54 <___vfprintf_internal_r+0x212c>
 2003798:	04008074 	movhi	r16,513
 200379c:	d8802915 	stw	r2,164(sp)
 20037a0:	dcc02e15 	stw	r19,184(sp)
 20037a4:	d8002a15 	stw	zero,168(sp)
 20037a8:	d8003215 	stw	zero,200(sp)
 20037ac:	84040f04 	addi	r16,r16,4156
 20037b0:	0039883a 	mov	fp,zero
 20037b4:	003a8006 	br	20021b8 <__alt_data_end+0xff0021b8>
 20037b8:	0021883a 	mov	r16,zero
 20037bc:	003e0706 	br	2002fdc <__alt_data_end+0xff002fdc>
 20037c0:	d9002d17 	ldw	r4,180(sp)
 20037c4:	d9801e04 	addi	r6,sp,120
 20037c8:	b80b883a 	mov	r5,r23
 20037cc:	20092080 	call	2009208 <__sprint_r>
 20037d0:	1039991e 	bne	r2,zero,2001e38 <__alt_data_end+0xff001e38>
 20037d4:	d8802617 	ldw	r2,152(sp)
 20037d8:	d9403317 	ldw	r5,204(sp)
 20037dc:	d8c02017 	ldw	r3,128(sp)
 20037e0:	da000404 	addi	r8,sp,16
 20037e4:	2885c83a 	sub	r2,r5,r2
 20037e8:	003dfb06 	br	2002fd8 <__alt_data_end+0xff002fd8>
 20037ec:	9080004c 	andi	r2,r18,1
 20037f0:	103e8f1e 	bne	r2,zero,2003230 <__alt_data_end+0xff003230>
 20037f4:	d8802117 	ldw	r2,132(sp)
 20037f8:	003e9e06 	br	2003274 <__alt_data_end+0xff003274>
 20037fc:	1025883a 	mov	r18,r2
 2003800:	0039883a 	mov	fp,zero
 2003804:	00800084 	movi	r2,2
 2003808:	003fd306 	br	2003758 <__alt_data_end+0xff003758>
 200380c:	07000b44 	movi	fp,45
 2003810:	df002785 	stb	fp,158(sp)
 2003814:	003a1b06 	br	2002084 <__alt_data_end+0xff002084>
 2003818:	00c00b44 	movi	r3,45
 200381c:	d8c02785 	stb	r3,158(sp)
 2003820:	d8802915 	stw	r2,164(sp)
 2003824:	dc802c17 	ldw	r18,176(sp)
 2003828:	d8002a15 	stw	zero,168(sp)
 200382c:	07000b44 	movi	fp,45
 2003830:	003a5e06 	br	20021ac <__alt_data_end+0xff0021ac>
 2003834:	04008074 	movhi	r16,513
 2003838:	84040404 	addi	r16,r16,4112
 200383c:	003f4706 	br	200355c <__alt_data_end+0xff00355c>
 2003840:	d9002e17 	ldw	r4,184(sp)
 2003844:	d9402f17 	ldw	r5,188(sp)
 2003848:	20800017 	ldw	r2,0(r4)
 200384c:	21000104 	addi	r4,r4,4
 2003850:	d9002e15 	stw	r4,184(sp)
 2003854:	11400015 	stw	r5,0(r2)
 2003858:	0038ab06 	br	2001b08 <__alt_data_end+0xff001b08>
 200385c:	dd802617 	ldw	r22,152(sp)
 2003860:	00bfff44 	movi	r2,-3
 2003864:	b0801c16 	blt	r22,r2,20038d8 <___vfprintf_internal_r+0x1eb0>
 2003868:	d9402a17 	ldw	r5,168(sp)
 200386c:	2d801a16 	blt	r5,r22,20038d8 <___vfprintf_internal_r+0x1eb0>
 2003870:	dd803215 	stw	r22,200(sp)
 2003874:	003e8906 	br	200329c <__alt_data_end+0xff00329c>
 2003878:	01008074 	movhi	r4,513
 200387c:	21041184 	addi	r4,r4,4166
 2003880:	d9002c15 	stw	r4,176(sp)
 2003884:	003c9106 	br	2002acc <__alt_data_end+0xff002acc>
 2003888:	e005883a 	mov	r2,fp
 200388c:	003e7906 	br	2003274 <__alt_data_end+0xff003274>
 2003890:	d9002a17 	ldw	r4,168(sp)
 2003894:	df002783 	ldbu	fp,158(sp)
 2003898:	dcc02e15 	stw	r19,184(sp)
 200389c:	d9002915 	stw	r4,164(sp)
 20038a0:	d9002b15 	stw	r4,172(sp)
 20038a4:	d8002a15 	stw	zero,168(sp)
 20038a8:	d8003215 	stw	zero,200(sp)
 20038ac:	003a3b06 	br	200219c <__alt_data_end+0xff00219c>
 20038b0:	9080004c 	andi	r2,r18,1
 20038b4:	0039883a 	mov	fp,zero
 20038b8:	10000426 	beq	r2,zero,20038cc <___vfprintf_internal_r+0x1ea4>
 20038bc:	00800c04 	movi	r2,48
 20038c0:	dc001dc4 	addi	r16,sp,119
 20038c4:	d8801dc5 	stb	r2,119(sp)
 20038c8:	003b6406 	br	200265c <__alt_data_end+0xff00265c>
 20038cc:	d8002b15 	stw	zero,172(sp)
 20038d0:	dc001e04 	addi	r16,sp,120
 20038d4:	003a2b06 	br	2002184 <__alt_data_end+0xff002184>
 20038d8:	8c7fff84 	addi	r17,r17,-2
 20038dc:	b5bfffc4 	addi	r22,r22,-1
 20038e0:	dd802615 	stw	r22,152(sp)
 20038e4:	dc4022c5 	stb	r17,139(sp)
 20038e8:	b000bf16 	blt	r22,zero,2003be8 <___vfprintf_internal_r+0x21c0>
 20038ec:	00800ac4 	movi	r2,43
 20038f0:	d8802305 	stb	r2,140(sp)
 20038f4:	00800244 	movi	r2,9
 20038f8:	15807016 	blt	r2,r22,2003abc <___vfprintf_internal_r+0x2094>
 20038fc:	00800c04 	movi	r2,48
 2003900:	b5800c04 	addi	r22,r22,48
 2003904:	d8802345 	stb	r2,141(sp)
 2003908:	dd802385 	stb	r22,142(sp)
 200390c:	d88023c4 	addi	r2,sp,143
 2003910:	df0022c4 	addi	fp,sp,139
 2003914:	d8c03317 	ldw	r3,204(sp)
 2003918:	1739c83a 	sub	fp,r2,fp
 200391c:	d9003317 	ldw	r4,204(sp)
 2003920:	e0c7883a 	add	r3,fp,r3
 2003924:	df003a15 	stw	fp,232(sp)
 2003928:	d8c02b15 	stw	r3,172(sp)
 200392c:	00800044 	movi	r2,1
 2003930:	1100b30e 	bge	r2,r4,2003c00 <___vfprintf_internal_r+0x21d8>
 2003934:	d8c02b17 	ldw	r3,172(sp)
 2003938:	18c00044 	addi	r3,r3,1
 200393c:	d8c02b15 	stw	r3,172(sp)
 2003940:	1805883a 	mov	r2,r3
 2003944:	1800ac16 	blt	r3,zero,2003bf8 <___vfprintf_internal_r+0x21d0>
 2003948:	d8003215 	stw	zero,200(sp)
 200394c:	003e5d06 	br	20032c4 <__alt_data_end+0xff0032c4>
 2003950:	d9002d17 	ldw	r4,180(sp)
 2003954:	d9801e04 	addi	r6,sp,120
 2003958:	b80b883a 	mov	r5,r23
 200395c:	20092080 	call	2009208 <__sprint_r>
 2003960:	1039351e 	bne	r2,zero,2001e38 <__alt_data_end+0xff001e38>
 2003964:	dc402617 	ldw	r17,152(sp)
 2003968:	d8c02017 	ldw	r3,128(sp)
 200396c:	d8801f17 	ldw	r2,124(sp)
 2003970:	da000404 	addi	r8,sp,16
 2003974:	003ed606 	br	20034d0 <__alt_data_end+0xff0034d0>
 2003978:	182b883a 	mov	r21,r3
 200397c:	d8002a15 	stw	zero,168(sp)
 2003980:	00388c06 	br	2001bb4 <__alt_data_end+0xff001bb4>
 2003984:	d8802a17 	ldw	r2,168(sp)
 2003988:	103e071e 	bne	r2,zero,20031a8 <__alt_data_end+0xff0031a8>
 200398c:	dc002a15 	stw	r16,168(sp)
 2003990:	003e0506 	br	20031a8 <__alt_data_end+0xff0031a8>
 2003994:	d9002a17 	ldw	r4,168(sp)
 2003998:	20c00044 	addi	r3,r4,1
 200399c:	003e0f06 	br	20031dc <__alt_data_end+0xff0031dc>
 20039a0:	01400184 	movi	r5,6
 20039a4:	d9402a15 	stw	r5,168(sp)
 20039a8:	003dff06 	br	20031a8 <__alt_data_end+0xff0031a8>
 20039ac:	d8802104 	addi	r2,sp,132
 20039b0:	d8800315 	stw	r2,12(sp)
 20039b4:	d8802504 	addi	r2,sp,148
 20039b8:	d8800215 	stw	r2,8(sp)
 20039bc:	d8802604 	addi	r2,sp,152
 20039c0:	d8800115 	stw	r2,4(sp)
 20039c4:	d8802a17 	ldw	r2,168(sp)
 20039c8:	d9403617 	ldw	r5,216(sp)
 20039cc:	d9002d17 	ldw	r4,180(sp)
 20039d0:	d8800015 	stw	r2,0(sp)
 20039d4:	01c000c4 	movi	r7,3
 20039d8:	980d883a 	mov	r6,r19
 20039dc:	da003d15 	stw	r8,244(sp)
 20039e0:	20041580 	call	2004158 <_dtoa_r>
 20039e4:	d8c02a17 	ldw	r3,168(sp)
 20039e8:	da003d17 	ldw	r8,244(sp)
 20039ec:	1021883a 	mov	r16,r2
 20039f0:	10f9883a 	add	fp,r2,r3
 20039f4:	81000007 	ldb	r4,0(r16)
 20039f8:	00800c04 	movi	r2,48
 20039fc:	20805e26 	beq	r4,r2,2003b78 <___vfprintf_internal_r+0x2150>
 2003a00:	d8c02617 	ldw	r3,152(sp)
 2003a04:	e0f9883a 	add	fp,fp,r3
 2003a08:	003e0a06 	br	2003234 <__alt_data_end+0xff003234>
 2003a0c:	00c00b44 	movi	r3,45
 2003a10:	24e0003c 	xorhi	r19,r4,32768
 2003a14:	d8c02905 	stb	r3,164(sp)
 2003a18:	003de906 	br	20031c0 <__alt_data_end+0xff0031c0>
 2003a1c:	d8c03217 	ldw	r3,200(sp)
 2003a20:	00c07a0e 	bge	zero,r3,2003c0c <___vfprintf_internal_r+0x21e4>
 2003a24:	00800044 	movi	r2,1
 2003a28:	d9003317 	ldw	r4,204(sp)
 2003a2c:	1105883a 	add	r2,r2,r4
 2003a30:	d8802b15 	stw	r2,172(sp)
 2003a34:	10004e16 	blt	r2,zero,2003b70 <___vfprintf_internal_r+0x2148>
 2003a38:	044019c4 	movi	r17,103
 2003a3c:	003e2106 	br	20032c4 <__alt_data_end+0xff0032c4>
 2003a40:	d9002a17 	ldw	r4,168(sp)
 2003a44:	d8802104 	addi	r2,sp,132
 2003a48:	d8800315 	stw	r2,12(sp)
 2003a4c:	d9000015 	stw	r4,0(sp)
 2003a50:	d8802504 	addi	r2,sp,148
 2003a54:	d9403617 	ldw	r5,216(sp)
 2003a58:	d9002d17 	ldw	r4,180(sp)
 2003a5c:	d8800215 	stw	r2,8(sp)
 2003a60:	d8802604 	addi	r2,sp,152
 2003a64:	d8800115 	stw	r2,4(sp)
 2003a68:	01c000c4 	movi	r7,3
 2003a6c:	980d883a 	mov	r6,r19
 2003a70:	da003d15 	stw	r8,244(sp)
 2003a74:	20041580 	call	2004158 <_dtoa_r>
 2003a78:	d8c02a17 	ldw	r3,168(sp)
 2003a7c:	da003d17 	ldw	r8,244(sp)
 2003a80:	1021883a 	mov	r16,r2
 2003a84:	00801184 	movi	r2,70
 2003a88:	80f9883a 	add	fp,r16,r3
 2003a8c:	88bfd926 	beq	r17,r2,20039f4 <__alt_data_end+0xff0039f4>
 2003a90:	003de806 	br	2003234 <__alt_data_end+0xff003234>
 2003a94:	d9002a17 	ldw	r4,168(sp)
 2003a98:	00c04d0e 	bge	zero,r3,2003bd0 <___vfprintf_internal_r+0x21a8>
 2003a9c:	2000441e 	bne	r4,zero,2003bb0 <___vfprintf_internal_r+0x2188>
 2003aa0:	9480004c 	andi	r18,r18,1
 2003aa4:	9000421e 	bne	r18,zero,2003bb0 <___vfprintf_internal_r+0x2188>
 2003aa8:	1805883a 	mov	r2,r3
 2003aac:	18006f16 	blt	r3,zero,2003c6c <___vfprintf_internal_r+0x2244>
 2003ab0:	d8c03217 	ldw	r3,200(sp)
 2003ab4:	d8c02b15 	stw	r3,172(sp)
 2003ab8:	003e0206 	br	20032c4 <__alt_data_end+0xff0032c4>
 2003abc:	df0022c4 	addi	fp,sp,139
 2003ac0:	dc002a15 	stw	r16,168(sp)
 2003ac4:	4027883a 	mov	r19,r8
 2003ac8:	e021883a 	mov	r16,fp
 2003acc:	b009883a 	mov	r4,r22
 2003ad0:	01400284 	movi	r5,10
 2003ad4:	200bd940 	call	200bd94 <__modsi3>
 2003ad8:	10800c04 	addi	r2,r2,48
 2003adc:	843fffc4 	addi	r16,r16,-1
 2003ae0:	b009883a 	mov	r4,r22
 2003ae4:	01400284 	movi	r5,10
 2003ae8:	80800005 	stb	r2,0(r16)
 2003aec:	200bd100 	call	200bd10 <__divsi3>
 2003af0:	102d883a 	mov	r22,r2
 2003af4:	00800244 	movi	r2,9
 2003af8:	15bff416 	blt	r2,r22,2003acc <__alt_data_end+0xff003acc>
 2003afc:	9811883a 	mov	r8,r19
 2003b00:	b0800c04 	addi	r2,r22,48
 2003b04:	8027883a 	mov	r19,r16
 2003b08:	997fffc4 	addi	r5,r19,-1
 2003b0c:	98bfffc5 	stb	r2,-1(r19)
 2003b10:	dc002a17 	ldw	r16,168(sp)
 2003b14:	2f006d2e 	bgeu	r5,fp,2003ccc <___vfprintf_internal_r+0x22a4>
 2003b18:	d9c02384 	addi	r7,sp,142
 2003b1c:	3ccfc83a 	sub	r7,r7,r19
 2003b20:	d9002344 	addi	r4,sp,141
 2003b24:	e1cf883a 	add	r7,fp,r7
 2003b28:	00000106 	br	2003b30 <___vfprintf_internal_r+0x2108>
 2003b2c:	28800003 	ldbu	r2,0(r5)
 2003b30:	20800005 	stb	r2,0(r4)
 2003b34:	21000044 	addi	r4,r4,1
 2003b38:	29400044 	addi	r5,r5,1
 2003b3c:	393ffb1e 	bne	r7,r4,2003b2c <__alt_data_end+0xff003b2c>
 2003b40:	d8802304 	addi	r2,sp,140
 2003b44:	14c5c83a 	sub	r2,r2,r19
 2003b48:	d8c02344 	addi	r3,sp,141
 2003b4c:	1885883a 	add	r2,r3,r2
 2003b50:	003f7006 	br	2003914 <__alt_data_end+0xff003914>
 2003b54:	0005883a 	mov	r2,zero
 2003b58:	003f0f06 	br	2003798 <__alt_data_end+0xff003798>
 2003b5c:	d8c03217 	ldw	r3,200(sp)
 2003b60:	18c00044 	addi	r3,r3,1
 2003b64:	d8c02b15 	stw	r3,172(sp)
 2003b68:	1805883a 	mov	r2,r3
 2003b6c:	183fb20e 	bge	r3,zero,2003a38 <__alt_data_end+0xff003a38>
 2003b70:	0005883a 	mov	r2,zero
 2003b74:	003fb006 	br	2003a38 <__alt_data_end+0xff003a38>
 2003b78:	d9003617 	ldw	r4,216(sp)
 2003b7c:	000d883a 	mov	r6,zero
 2003b80:	000f883a 	mov	r7,zero
 2003b84:	980b883a 	mov	r5,r19
 2003b88:	d8c03c15 	stw	r3,240(sp)
 2003b8c:	da003d15 	stw	r8,244(sp)
 2003b90:	200d1400 	call	200d140 <__eqdf2>
 2003b94:	d8c03c17 	ldw	r3,240(sp)
 2003b98:	da003d17 	ldw	r8,244(sp)
 2003b9c:	103f9826 	beq	r2,zero,2003a00 <__alt_data_end+0xff003a00>
 2003ba0:	00800044 	movi	r2,1
 2003ba4:	10c7c83a 	sub	r3,r2,r3
 2003ba8:	d8c02615 	stw	r3,152(sp)
 2003bac:	003f9506 	br	2003a04 <__alt_data_end+0xff003a04>
 2003bb0:	d9002a17 	ldw	r4,168(sp)
 2003bb4:	d8c03217 	ldw	r3,200(sp)
 2003bb8:	20800044 	addi	r2,r4,1
 2003bbc:	1885883a 	add	r2,r3,r2
 2003bc0:	d8802b15 	stw	r2,172(sp)
 2003bc4:	103dbf0e 	bge	r2,zero,20032c4 <__alt_data_end+0xff0032c4>
 2003bc8:	0005883a 	mov	r2,zero
 2003bcc:	003dbd06 	br	20032c4 <__alt_data_end+0xff0032c4>
 2003bd0:	2000201e 	bne	r4,zero,2003c54 <___vfprintf_internal_r+0x222c>
 2003bd4:	9480004c 	andi	r18,r18,1
 2003bd8:	90001e1e 	bne	r18,zero,2003c54 <___vfprintf_internal_r+0x222c>
 2003bdc:	00800044 	movi	r2,1
 2003be0:	d8802b15 	stw	r2,172(sp)
 2003be4:	003db706 	br	20032c4 <__alt_data_end+0xff0032c4>
 2003be8:	00800b44 	movi	r2,45
 2003bec:	05adc83a 	sub	r22,zero,r22
 2003bf0:	d8802305 	stb	r2,140(sp)
 2003bf4:	003f3f06 	br	20038f4 <__alt_data_end+0xff0038f4>
 2003bf8:	0005883a 	mov	r2,zero
 2003bfc:	003f5206 	br	2003948 <__alt_data_end+0xff003948>
 2003c00:	90a4703a 	and	r18,r18,r2
 2003c04:	903f4e26 	beq	r18,zero,2003940 <__alt_data_end+0xff003940>
 2003c08:	003f4a06 	br	2003934 <__alt_data_end+0xff003934>
 2003c0c:	00800084 	movi	r2,2
 2003c10:	10c5c83a 	sub	r2,r2,r3
 2003c14:	003f8406 	br	2003a28 <__alt_data_end+0xff003a28>
 2003c18:	d9402e17 	ldw	r5,184(sp)
 2003c1c:	d9002e17 	ldw	r4,184(sp)
 2003c20:	ac400043 	ldbu	r17,1(r21)
 2003c24:	29400017 	ldw	r5,0(r5)
 2003c28:	20800104 	addi	r2,r4,4
 2003c2c:	d8802e15 	stw	r2,184(sp)
 2003c30:	d9402a15 	stw	r5,168(sp)
 2003c34:	182b883a 	mov	r21,r3
 2003c38:	283e7b0e 	bge	r5,zero,2003628 <__alt_data_end+0xff003628>
 2003c3c:	8c403fcc 	andi	r17,r17,255
 2003c40:	017fffc4 	movi	r5,-1
 2003c44:	8c40201c 	xori	r17,r17,128
 2003c48:	d9402a15 	stw	r5,168(sp)
 2003c4c:	8c7fe004 	addi	r17,r17,-128
 2003c50:	0037d706 	br	2001bb0 <__alt_data_end+0xff001bb0>
 2003c54:	d8c02a17 	ldw	r3,168(sp)
 2003c58:	18c00084 	addi	r3,r3,2
 2003c5c:	d8c02b15 	stw	r3,172(sp)
 2003c60:	1805883a 	mov	r2,r3
 2003c64:	183d970e 	bge	r3,zero,20032c4 <__alt_data_end+0xff0032c4>
 2003c68:	003fd706 	br	2003bc8 <__alt_data_end+0xff003bc8>
 2003c6c:	0005883a 	mov	r2,zero
 2003c70:	003f8f06 	br	2003ab0 <__alt_data_end+0xff003ab0>
 2003c74:	9080004c 	andi	r2,r18,1
 2003c78:	103f821e 	bne	r2,zero,2003a84 <__alt_data_end+0xff003a84>
 2003c7c:	d8802117 	ldw	r2,132(sp)
 2003c80:	1405c83a 	sub	r2,r2,r16
 2003c84:	d8803315 	stw	r2,204(sp)
 2003c88:	b47ef426 	beq	r22,r17,200385c <__alt_data_end+0xff00385c>
 2003c8c:	dd802617 	ldw	r22,152(sp)
 2003c90:	003f1206 	br	20038dc <__alt_data_end+0xff0038dc>
 2003c94:	d8c02b03 	ldbu	r3,172(sp)
 2003c98:	d8c02785 	stb	r3,158(sp)
 2003c9c:	0038df06 	br	200201c <__alt_data_end+0xff00201c>
 2003ca0:	d8c02b03 	ldbu	r3,172(sp)
 2003ca4:	d8c02785 	stb	r3,158(sp)
 2003ca8:	0038aa06 	br	2001f54 <__alt_data_end+0xff001f54>
 2003cac:	d8c02b03 	ldbu	r3,172(sp)
 2003cb0:	d8c02785 	stb	r3,158(sp)
 2003cb4:	003a4306 	br	20025c4 <__alt_data_end+0xff0025c4>
 2003cb8:	d8c02b03 	ldbu	r3,172(sp)
 2003cbc:	d8c02785 	stb	r3,158(sp)
 2003cc0:	003af506 	br	2002898 <__alt_data_end+0xff002898>
 2003cc4:	0005883a 	mov	r2,zero
 2003cc8:	003d7b06 	br	20032b8 <__alt_data_end+0xff0032b8>
 2003ccc:	d8802344 	addi	r2,sp,141
 2003cd0:	003f1006 	br	2003914 <__alt_data_end+0xff003914>
 2003cd4:	d8c02b03 	ldbu	r3,172(sp)
 2003cd8:	d8c02785 	stb	r3,158(sp)
 2003cdc:	0038fd06 	br	20020d4 <__alt_data_end+0xff0020d4>
 2003ce0:	d8c02b03 	ldbu	r3,172(sp)
 2003ce4:	d8c02785 	stb	r3,158(sp)
 2003ce8:	003a9706 	br	2002748 <__alt_data_end+0xff002748>
 2003cec:	d8c02b03 	ldbu	r3,172(sp)
 2003cf0:	d8c02785 	stb	r3,158(sp)
 2003cf4:	003a1806 	br	2002558 <__alt_data_end+0xff002558>
 2003cf8:	d8c02b03 	ldbu	r3,172(sp)
 2003cfc:	d8c02785 	stb	r3,158(sp)
 2003d00:	003abe06 	br	20027fc <__alt_data_end+0xff0027fc>

02003d04 <__vfprintf_internal>:
 2003d04:	00808074 	movhi	r2,513
 2003d08:	108b6c04 	addi	r2,r2,11696
 2003d0c:	300f883a 	mov	r7,r6
 2003d10:	280d883a 	mov	r6,r5
 2003d14:	200b883a 	mov	r5,r4
 2003d18:	11000017 	ldw	r4,0(r2)
 2003d1c:	2001a281 	jmpi	2001a28 <___vfprintf_internal_r>

02003d20 <__sbprintf>:
 2003d20:	2880030b 	ldhu	r2,12(r5)
 2003d24:	2ac01917 	ldw	r11,100(r5)
 2003d28:	2a80038b 	ldhu	r10,14(r5)
 2003d2c:	2a400717 	ldw	r9,28(r5)
 2003d30:	2a000917 	ldw	r8,36(r5)
 2003d34:	defee204 	addi	sp,sp,-1144
 2003d38:	00c10004 	movi	r3,1024
 2003d3c:	dc011a15 	stw	r16,1128(sp)
 2003d40:	10bfff4c 	andi	r2,r2,65533
 2003d44:	2821883a 	mov	r16,r5
 2003d48:	d8cb883a 	add	r5,sp,r3
 2003d4c:	dc811c15 	stw	r18,1136(sp)
 2003d50:	dc411b15 	stw	r17,1132(sp)
 2003d54:	dfc11d15 	stw	ra,1140(sp)
 2003d58:	2025883a 	mov	r18,r4
 2003d5c:	d881030d 	sth	r2,1036(sp)
 2003d60:	dac11915 	stw	r11,1124(sp)
 2003d64:	da81038d 	sth	r10,1038(sp)
 2003d68:	da410715 	stw	r9,1052(sp)
 2003d6c:	da010915 	stw	r8,1060(sp)
 2003d70:	dec10015 	stw	sp,1024(sp)
 2003d74:	dec10415 	stw	sp,1040(sp)
 2003d78:	d8c10215 	stw	r3,1032(sp)
 2003d7c:	d8c10515 	stw	r3,1044(sp)
 2003d80:	d8010615 	stw	zero,1048(sp)
 2003d84:	2001a280 	call	2001a28 <___vfprintf_internal_r>
 2003d88:	1023883a 	mov	r17,r2
 2003d8c:	10000416 	blt	r2,zero,2003da0 <__sbprintf+0x80>
 2003d90:	d9410004 	addi	r5,sp,1024
 2003d94:	9009883a 	mov	r4,r18
 2003d98:	20059fc0 	call	20059fc <_fflush_r>
 2003d9c:	10000d1e 	bne	r2,zero,2003dd4 <__sbprintf+0xb4>
 2003da0:	d881030b 	ldhu	r2,1036(sp)
 2003da4:	1080100c 	andi	r2,r2,64
 2003da8:	10000326 	beq	r2,zero,2003db8 <__sbprintf+0x98>
 2003dac:	8080030b 	ldhu	r2,12(r16)
 2003db0:	10801014 	ori	r2,r2,64
 2003db4:	8080030d 	sth	r2,12(r16)
 2003db8:	8805883a 	mov	r2,r17
 2003dbc:	dfc11d17 	ldw	ra,1140(sp)
 2003dc0:	dc811c17 	ldw	r18,1136(sp)
 2003dc4:	dc411b17 	ldw	r17,1132(sp)
 2003dc8:	dc011a17 	ldw	r16,1128(sp)
 2003dcc:	dec11e04 	addi	sp,sp,1144
 2003dd0:	f800283a 	ret
 2003dd4:	047fffc4 	movi	r17,-1
 2003dd8:	003ff106 	br	2003da0 <__alt_data_end+0xff003da0>

02003ddc <__swsetup_r>:
 2003ddc:	00808074 	movhi	r2,513
 2003de0:	defffd04 	addi	sp,sp,-12
 2003de4:	108b6c04 	addi	r2,r2,11696
 2003de8:	dc400115 	stw	r17,4(sp)
 2003dec:	2023883a 	mov	r17,r4
 2003df0:	11000017 	ldw	r4,0(r2)
 2003df4:	dc000015 	stw	r16,0(sp)
 2003df8:	dfc00215 	stw	ra,8(sp)
 2003dfc:	2821883a 	mov	r16,r5
 2003e00:	20000226 	beq	r4,zero,2003e0c <__swsetup_r+0x30>
 2003e04:	20800e17 	ldw	r2,56(r4)
 2003e08:	10003126 	beq	r2,zero,2003ed0 <__swsetup_r+0xf4>
 2003e0c:	8080030b 	ldhu	r2,12(r16)
 2003e10:	10c0020c 	andi	r3,r2,8
 2003e14:	1009883a 	mov	r4,r2
 2003e18:	18000f26 	beq	r3,zero,2003e58 <__swsetup_r+0x7c>
 2003e1c:	80c00417 	ldw	r3,16(r16)
 2003e20:	18001526 	beq	r3,zero,2003e78 <__swsetup_r+0x9c>
 2003e24:	1100004c 	andi	r4,r2,1
 2003e28:	20001c1e 	bne	r4,zero,2003e9c <__swsetup_r+0xc0>
 2003e2c:	1080008c 	andi	r2,r2,2
 2003e30:	1000291e 	bne	r2,zero,2003ed8 <__swsetup_r+0xfc>
 2003e34:	80800517 	ldw	r2,20(r16)
 2003e38:	80800215 	stw	r2,8(r16)
 2003e3c:	18001c26 	beq	r3,zero,2003eb0 <__swsetup_r+0xd4>
 2003e40:	0005883a 	mov	r2,zero
 2003e44:	dfc00217 	ldw	ra,8(sp)
 2003e48:	dc400117 	ldw	r17,4(sp)
 2003e4c:	dc000017 	ldw	r16,0(sp)
 2003e50:	dec00304 	addi	sp,sp,12
 2003e54:	f800283a 	ret
 2003e58:	2080040c 	andi	r2,r4,16
 2003e5c:	10002e26 	beq	r2,zero,2003f18 <__swsetup_r+0x13c>
 2003e60:	2080010c 	andi	r2,r4,4
 2003e64:	10001e1e 	bne	r2,zero,2003ee0 <__swsetup_r+0x104>
 2003e68:	80c00417 	ldw	r3,16(r16)
 2003e6c:	20800214 	ori	r2,r4,8
 2003e70:	8080030d 	sth	r2,12(r16)
 2003e74:	183feb1e 	bne	r3,zero,2003e24 <__alt_data_end+0xff003e24>
 2003e78:	1100a00c 	andi	r4,r2,640
 2003e7c:	01408004 	movi	r5,512
 2003e80:	217fe826 	beq	r4,r5,2003e24 <__alt_data_end+0xff003e24>
 2003e84:	800b883a 	mov	r5,r16
 2003e88:	8809883a 	mov	r4,r17
 2003e8c:	20069980 	call	2006998 <__smakebuf_r>
 2003e90:	8080030b 	ldhu	r2,12(r16)
 2003e94:	80c00417 	ldw	r3,16(r16)
 2003e98:	003fe206 	br	2003e24 <__alt_data_end+0xff003e24>
 2003e9c:	80800517 	ldw	r2,20(r16)
 2003ea0:	80000215 	stw	zero,8(r16)
 2003ea4:	0085c83a 	sub	r2,zero,r2
 2003ea8:	80800615 	stw	r2,24(r16)
 2003eac:	183fe41e 	bne	r3,zero,2003e40 <__alt_data_end+0xff003e40>
 2003eb0:	80c0030b 	ldhu	r3,12(r16)
 2003eb4:	0005883a 	mov	r2,zero
 2003eb8:	1900200c 	andi	r4,r3,128
 2003ebc:	203fe126 	beq	r4,zero,2003e44 <__alt_data_end+0xff003e44>
 2003ec0:	18c01014 	ori	r3,r3,64
 2003ec4:	80c0030d 	sth	r3,12(r16)
 2003ec8:	00bfffc4 	movi	r2,-1
 2003ecc:	003fdd06 	br	2003e44 <__alt_data_end+0xff003e44>
 2003ed0:	2005de80 	call	2005de8 <__sinit>
 2003ed4:	003fcd06 	br	2003e0c <__alt_data_end+0xff003e0c>
 2003ed8:	0005883a 	mov	r2,zero
 2003edc:	003fd606 	br	2003e38 <__alt_data_end+0xff003e38>
 2003ee0:	81400c17 	ldw	r5,48(r16)
 2003ee4:	28000626 	beq	r5,zero,2003f00 <__swsetup_r+0x124>
 2003ee8:	80801004 	addi	r2,r16,64
 2003eec:	28800326 	beq	r5,r2,2003efc <__swsetup_r+0x120>
 2003ef0:	8809883a 	mov	r4,r17
 2003ef4:	2005f5c0 	call	2005f5c <_free_r>
 2003ef8:	8100030b 	ldhu	r4,12(r16)
 2003efc:	80000c15 	stw	zero,48(r16)
 2003f00:	80c00417 	ldw	r3,16(r16)
 2003f04:	00bff6c4 	movi	r2,-37
 2003f08:	1108703a 	and	r4,r2,r4
 2003f0c:	80000115 	stw	zero,4(r16)
 2003f10:	80c00015 	stw	r3,0(r16)
 2003f14:	003fd506 	br	2003e6c <__alt_data_end+0xff003e6c>
 2003f18:	00800244 	movi	r2,9
 2003f1c:	88800015 	stw	r2,0(r17)
 2003f20:	20801014 	ori	r2,r4,64
 2003f24:	8080030d 	sth	r2,12(r16)
 2003f28:	00bfffc4 	movi	r2,-1
 2003f2c:	003fc506 	br	2003e44 <__alt_data_end+0xff003e44>

02003f30 <quorem>:
 2003f30:	defff204 	addi	sp,sp,-56
 2003f34:	ddc00b15 	stw	r23,44(sp)
 2003f38:	20800417 	ldw	r2,16(r4)
 2003f3c:	2dc00417 	ldw	r23,16(r5)
 2003f40:	dfc00d15 	stw	ra,52(sp)
 2003f44:	df000c15 	stw	fp,48(sp)
 2003f48:	dd800a15 	stw	r22,40(sp)
 2003f4c:	dd400915 	stw	r21,36(sp)
 2003f50:	dd000815 	stw	r20,32(sp)
 2003f54:	dcc00715 	stw	r19,28(sp)
 2003f58:	dc800615 	stw	r18,24(sp)
 2003f5c:	dc400515 	stw	r17,20(sp)
 2003f60:	dc000415 	stw	r16,16(sp)
 2003f64:	15c07a16 	blt	r2,r23,2004150 <quorem+0x220>
 2003f68:	bdffffc4 	addi	r23,r23,-1
 2003f6c:	bde9883a 	add	r20,r23,r23
 2003f70:	28c00504 	addi	r3,r5,20
 2003f74:	a529883a 	add	r20,r20,r20
 2003f78:	1d39883a 	add	fp,r3,r20
 2003f7c:	24c00504 	addi	r19,r4,20
 2003f80:	d9400215 	stw	r5,8(sp)
 2003f84:	9d29883a 	add	r20,r19,r20
 2003f88:	e1400017 	ldw	r5,0(fp)
 2003f8c:	d9000015 	stw	r4,0(sp)
 2003f90:	a1000017 	ldw	r4,0(r20)
 2003f94:	29400044 	addi	r5,r5,1
 2003f98:	d8c00115 	stw	r3,4(sp)
 2003f9c:	dd000315 	stw	r20,12(sp)
 2003fa0:	200be080 	call	200be08 <__udivsi3>
 2003fa4:	1025883a 	mov	r18,r2
 2003fa8:	10003026 	beq	r2,zero,200406c <quorem+0x13c>
 2003fac:	dc400117 	ldw	r17,4(sp)
 2003fb0:	9829883a 	mov	r20,r19
 2003fb4:	002d883a 	mov	r22,zero
 2003fb8:	0021883a 	mov	r16,zero
 2003fbc:	8d400017 	ldw	r21,0(r17)
 2003fc0:	900b883a 	mov	r5,r18
 2003fc4:	8c400104 	addi	r17,r17,4
 2003fc8:	a93fffcc 	andi	r4,r21,65535
 2003fcc:	20018280 	call	2001828 <__mulsi3>
 2003fd0:	a808d43a 	srli	r4,r21,16
 2003fd4:	900b883a 	mov	r5,r18
 2003fd8:	15ad883a 	add	r22,r2,r22
 2003fdc:	20018280 	call	2001828 <__mulsi3>
 2003fe0:	a1000017 	ldw	r4,0(r20)
 2003fe4:	b00cd43a 	srli	r6,r22,16
 2003fe8:	b0ffffcc 	andi	r3,r22,65535
 2003fec:	217fffcc 	andi	r5,r4,65535
 2003ff0:	2c21883a 	add	r16,r5,r16
 2003ff4:	80c7c83a 	sub	r3,r16,r3
 2003ff8:	2008d43a 	srli	r4,r4,16
 2003ffc:	1185883a 	add	r2,r2,r6
 2004000:	1821d43a 	srai	r16,r3,16
 2004004:	117fffcc 	andi	r5,r2,65535
 2004008:	2149c83a 	sub	r4,r4,r5
 200400c:	2421883a 	add	r16,r4,r16
 2004010:	8008943a 	slli	r4,r16,16
 2004014:	18ffffcc 	andi	r3,r3,65535
 2004018:	102cd43a 	srli	r22,r2,16
 200401c:	20c8b03a 	or	r4,r4,r3
 2004020:	a1000015 	stw	r4,0(r20)
 2004024:	8021d43a 	srai	r16,r16,16
 2004028:	a5000104 	addi	r20,r20,4
 200402c:	e47fe32e 	bgeu	fp,r17,2003fbc <__alt_data_end+0xff003fbc>
 2004030:	d8c00317 	ldw	r3,12(sp)
 2004034:	18800017 	ldw	r2,0(r3)
 2004038:	10000c1e 	bne	r2,zero,200406c <quorem+0x13c>
 200403c:	18bfff04 	addi	r2,r3,-4
 2004040:	9880082e 	bgeu	r19,r2,2004064 <quorem+0x134>
 2004044:	18ffff17 	ldw	r3,-4(r3)
 2004048:	18000326 	beq	r3,zero,2004058 <quorem+0x128>
 200404c:	00000506 	br	2004064 <quorem+0x134>
 2004050:	10c00017 	ldw	r3,0(r2)
 2004054:	1800031e 	bne	r3,zero,2004064 <quorem+0x134>
 2004058:	10bfff04 	addi	r2,r2,-4
 200405c:	bdffffc4 	addi	r23,r23,-1
 2004060:	98bffb36 	bltu	r19,r2,2004050 <__alt_data_end+0xff004050>
 2004064:	d8c00017 	ldw	r3,0(sp)
 2004068:	1dc00415 	stw	r23,16(r3)
 200406c:	d9400217 	ldw	r5,8(sp)
 2004070:	d9000017 	ldw	r4,0(sp)
 2004074:	20081940 	call	2008194 <__mcmp>
 2004078:	10002816 	blt	r2,zero,200411c <quorem+0x1ec>
 200407c:	dc400117 	ldw	r17,4(sp)
 2004080:	94800044 	addi	r18,r18,1
 2004084:	980d883a 	mov	r6,r19
 2004088:	0007883a 	mov	r3,zero
 200408c:	31000017 	ldw	r4,0(r6)
 2004090:	89400017 	ldw	r5,0(r17)
 2004094:	31800104 	addi	r6,r6,4
 2004098:	20bfffcc 	andi	r2,r4,65535
 200409c:	10c7883a 	add	r3,r2,r3
 20040a0:	28bfffcc 	andi	r2,r5,65535
 20040a4:	1885c83a 	sub	r2,r3,r2
 20040a8:	280ad43a 	srli	r5,r5,16
 20040ac:	2008d43a 	srli	r4,r4,16
 20040b0:	1007d43a 	srai	r3,r2,16
 20040b4:	10bfffcc 	andi	r2,r2,65535
 20040b8:	2149c83a 	sub	r4,r4,r5
 20040bc:	20c9883a 	add	r4,r4,r3
 20040c0:	200a943a 	slli	r5,r4,16
 20040c4:	8c400104 	addi	r17,r17,4
 20040c8:	2007d43a 	srai	r3,r4,16
 20040cc:	2884b03a 	or	r2,r5,r2
 20040d0:	30bfff15 	stw	r2,-4(r6)
 20040d4:	e47fed2e 	bgeu	fp,r17,200408c <__alt_data_end+0xff00408c>
 20040d8:	bdc5883a 	add	r2,r23,r23
 20040dc:	1085883a 	add	r2,r2,r2
 20040e0:	9887883a 	add	r3,r19,r2
 20040e4:	18800017 	ldw	r2,0(r3)
 20040e8:	10000c1e 	bne	r2,zero,200411c <quorem+0x1ec>
 20040ec:	18bfff04 	addi	r2,r3,-4
 20040f0:	9880082e 	bgeu	r19,r2,2004114 <quorem+0x1e4>
 20040f4:	18ffff17 	ldw	r3,-4(r3)
 20040f8:	18000326 	beq	r3,zero,2004108 <quorem+0x1d8>
 20040fc:	00000506 	br	2004114 <quorem+0x1e4>
 2004100:	10c00017 	ldw	r3,0(r2)
 2004104:	1800031e 	bne	r3,zero,2004114 <quorem+0x1e4>
 2004108:	10bfff04 	addi	r2,r2,-4
 200410c:	bdffffc4 	addi	r23,r23,-1
 2004110:	98bffb36 	bltu	r19,r2,2004100 <__alt_data_end+0xff004100>
 2004114:	d8c00017 	ldw	r3,0(sp)
 2004118:	1dc00415 	stw	r23,16(r3)
 200411c:	9005883a 	mov	r2,r18
 2004120:	dfc00d17 	ldw	ra,52(sp)
 2004124:	df000c17 	ldw	fp,48(sp)
 2004128:	ddc00b17 	ldw	r23,44(sp)
 200412c:	dd800a17 	ldw	r22,40(sp)
 2004130:	dd400917 	ldw	r21,36(sp)
 2004134:	dd000817 	ldw	r20,32(sp)
 2004138:	dcc00717 	ldw	r19,28(sp)
 200413c:	dc800617 	ldw	r18,24(sp)
 2004140:	dc400517 	ldw	r17,20(sp)
 2004144:	dc000417 	ldw	r16,16(sp)
 2004148:	dec00e04 	addi	sp,sp,56
 200414c:	f800283a 	ret
 2004150:	0005883a 	mov	r2,zero
 2004154:	003ff206 	br	2004120 <__alt_data_end+0xff004120>

02004158 <_dtoa_r>:
 2004158:	20801017 	ldw	r2,64(r4)
 200415c:	deffde04 	addi	sp,sp,-136
 2004160:	df002015 	stw	fp,128(sp)
 2004164:	dcc01b15 	stw	r19,108(sp)
 2004168:	dc801a15 	stw	r18,104(sp)
 200416c:	dc401915 	stw	r17,100(sp)
 2004170:	dc001815 	stw	r16,96(sp)
 2004174:	dfc02115 	stw	ra,132(sp)
 2004178:	ddc01f15 	stw	r23,124(sp)
 200417c:	dd801e15 	stw	r22,120(sp)
 2004180:	dd401d15 	stw	r21,116(sp)
 2004184:	dd001c15 	stw	r20,112(sp)
 2004188:	d9c00315 	stw	r7,12(sp)
 200418c:	2039883a 	mov	fp,r4
 2004190:	3023883a 	mov	r17,r6
 2004194:	2825883a 	mov	r18,r5
 2004198:	dc002417 	ldw	r16,144(sp)
 200419c:	3027883a 	mov	r19,r6
 20041a0:	10000826 	beq	r2,zero,20041c4 <_dtoa_r+0x6c>
 20041a4:	21801117 	ldw	r6,68(r4)
 20041a8:	00c00044 	movi	r3,1
 20041ac:	100b883a 	mov	r5,r2
 20041b0:	1986983a 	sll	r3,r3,r6
 20041b4:	11800115 	stw	r6,4(r2)
 20041b8:	10c00215 	stw	r3,8(r2)
 20041bc:	20078b80 	call	20078b8 <_Bfree>
 20041c0:	e0001015 	stw	zero,64(fp)
 20041c4:	88002e16 	blt	r17,zero,2004280 <_dtoa_r+0x128>
 20041c8:	80000015 	stw	zero,0(r16)
 20041cc:	889ffc2c 	andhi	r2,r17,32752
 20041d0:	00dffc34 	movhi	r3,32752
 20041d4:	10c01c26 	beq	r2,r3,2004248 <_dtoa_r+0xf0>
 20041d8:	000d883a 	mov	r6,zero
 20041dc:	000f883a 	mov	r7,zero
 20041e0:	9009883a 	mov	r4,r18
 20041e4:	980b883a 	mov	r5,r19
 20041e8:	200d1400 	call	200d140 <__eqdf2>
 20041ec:	10002b1e 	bne	r2,zero,200429c <_dtoa_r+0x144>
 20041f0:	d9c02317 	ldw	r7,140(sp)
 20041f4:	00800044 	movi	r2,1
 20041f8:	38800015 	stw	r2,0(r7)
 20041fc:	d8802517 	ldw	r2,148(sp)
 2004200:	10019e26 	beq	r2,zero,200487c <_dtoa_r+0x724>
 2004204:	d8c02517 	ldw	r3,148(sp)
 2004208:	00808074 	movhi	r2,513
 200420c:	10841144 	addi	r2,r2,4165
 2004210:	18800015 	stw	r2,0(r3)
 2004214:	10bfffc4 	addi	r2,r2,-1
 2004218:	dfc02117 	ldw	ra,132(sp)
 200421c:	df002017 	ldw	fp,128(sp)
 2004220:	ddc01f17 	ldw	r23,124(sp)
 2004224:	dd801e17 	ldw	r22,120(sp)
 2004228:	dd401d17 	ldw	r21,116(sp)
 200422c:	dd001c17 	ldw	r20,112(sp)
 2004230:	dcc01b17 	ldw	r19,108(sp)
 2004234:	dc801a17 	ldw	r18,104(sp)
 2004238:	dc401917 	ldw	r17,100(sp)
 200423c:	dc001817 	ldw	r16,96(sp)
 2004240:	dec02204 	addi	sp,sp,136
 2004244:	f800283a 	ret
 2004248:	d8c02317 	ldw	r3,140(sp)
 200424c:	0089c3c4 	movi	r2,9999
 2004250:	18800015 	stw	r2,0(r3)
 2004254:	90017726 	beq	r18,zero,2004834 <_dtoa_r+0x6dc>
 2004258:	00808074 	movhi	r2,513
 200425c:	10841d04 	addi	r2,r2,4212
 2004260:	d9002517 	ldw	r4,148(sp)
 2004264:	203fec26 	beq	r4,zero,2004218 <__alt_data_end+0xff004218>
 2004268:	10c000c7 	ldb	r3,3(r2)
 200426c:	1801781e 	bne	r3,zero,2004850 <_dtoa_r+0x6f8>
 2004270:	10c000c4 	addi	r3,r2,3
 2004274:	d9802517 	ldw	r6,148(sp)
 2004278:	30c00015 	stw	r3,0(r6)
 200427c:	003fe606 	br	2004218 <__alt_data_end+0xff004218>
 2004280:	04e00034 	movhi	r19,32768
 2004284:	9cffffc4 	addi	r19,r19,-1
 2004288:	00800044 	movi	r2,1
 200428c:	8ce6703a 	and	r19,r17,r19
 2004290:	80800015 	stw	r2,0(r16)
 2004294:	9823883a 	mov	r17,r19
 2004298:	003fcc06 	br	20041cc <__alt_data_end+0xff0041cc>
 200429c:	d8800204 	addi	r2,sp,8
 20042a0:	d8800015 	stw	r2,0(sp)
 20042a4:	d9c00104 	addi	r7,sp,4
 20042a8:	900b883a 	mov	r5,r18
 20042ac:	980d883a 	mov	r6,r19
 20042b0:	e009883a 	mov	r4,fp
 20042b4:	8820d53a 	srli	r16,r17,20
 20042b8:	20085600 	call	2008560 <__d2b>
 20042bc:	d8800915 	stw	r2,36(sp)
 20042c0:	8001651e 	bne	r16,zero,2004858 <_dtoa_r+0x700>
 20042c4:	dd800217 	ldw	r22,8(sp)
 20042c8:	dc000117 	ldw	r16,4(sp)
 20042cc:	00800804 	movi	r2,32
 20042d0:	b421883a 	add	r16,r22,r16
 20042d4:	80c10c84 	addi	r3,r16,1074
 20042d8:	10c2d10e 	bge	r2,r3,2004e20 <_dtoa_r+0xcc8>
 20042dc:	00801004 	movi	r2,64
 20042e0:	81010484 	addi	r4,r16,1042
 20042e4:	10c7c83a 	sub	r3,r2,r3
 20042e8:	9108d83a 	srl	r4,r18,r4
 20042ec:	88e2983a 	sll	r17,r17,r3
 20042f0:	2448b03a 	or	r4,r4,r17
 20042f4:	200e65c0 	call	200e65c <__floatunsidf>
 20042f8:	017f8434 	movhi	r5,65040
 20042fc:	01800044 	movi	r6,1
 2004300:	1009883a 	mov	r4,r2
 2004304:	194b883a 	add	r5,r3,r5
 2004308:	843fffc4 	addi	r16,r16,-1
 200430c:	d9801115 	stw	r6,68(sp)
 2004310:	000d883a 	mov	r6,zero
 2004314:	01cffe34 	movhi	r7,16376
 2004318:	200dc040 	call	200dc04 <__subdf3>
 200431c:	0198dbf4 	movhi	r6,25455
 2004320:	01cff4f4 	movhi	r7,16339
 2004324:	3190d844 	addi	r6,r6,17249
 2004328:	39e1e9c4 	addi	r7,r7,-30809
 200432c:	1009883a 	mov	r4,r2
 2004330:	180b883a 	mov	r5,r3
 2004334:	200d3980 	call	200d398 <__muldf3>
 2004338:	01a2d874 	movhi	r6,35681
 200433c:	01cff1f4 	movhi	r7,16327
 2004340:	31b22cc4 	addi	r6,r6,-14157
 2004344:	39e28a04 	addi	r7,r7,-30168
 2004348:	180b883a 	mov	r5,r3
 200434c:	1009883a 	mov	r4,r2
 2004350:	200bec40 	call	200bec4 <__adddf3>
 2004354:	8009883a 	mov	r4,r16
 2004358:	1029883a 	mov	r20,r2
 200435c:	1823883a 	mov	r17,r3
 2004360:	200e5800 	call	200e580 <__floatsidf>
 2004364:	019427f4 	movhi	r6,20639
 2004368:	01cff4f4 	movhi	r7,16339
 200436c:	319e7ec4 	addi	r6,r6,31227
 2004370:	39d104c4 	addi	r7,r7,17427
 2004374:	1009883a 	mov	r4,r2
 2004378:	180b883a 	mov	r5,r3
 200437c:	200d3980 	call	200d398 <__muldf3>
 2004380:	100d883a 	mov	r6,r2
 2004384:	180f883a 	mov	r7,r3
 2004388:	a009883a 	mov	r4,r20
 200438c:	880b883a 	mov	r5,r17
 2004390:	200bec40 	call	200bec4 <__adddf3>
 2004394:	1009883a 	mov	r4,r2
 2004398:	180b883a 	mov	r5,r3
 200439c:	1029883a 	mov	r20,r2
 20043a0:	1823883a 	mov	r17,r3
 20043a4:	200e5000 	call	200e500 <__fixdfsi>
 20043a8:	000d883a 	mov	r6,zero
 20043ac:	000f883a 	mov	r7,zero
 20043b0:	a009883a 	mov	r4,r20
 20043b4:	880b883a 	mov	r5,r17
 20043b8:	d8800515 	stw	r2,20(sp)
 20043bc:	200d2a40 	call	200d2a4 <__ledf2>
 20043c0:	10028716 	blt	r2,zero,2004de0 <_dtoa_r+0xc88>
 20043c4:	d8c00517 	ldw	r3,20(sp)
 20043c8:	00800584 	movi	r2,22
 20043cc:	10c27536 	bltu	r2,r3,2004da4 <_dtoa_r+0xc4c>
 20043d0:	180490fa 	slli	r2,r3,3
 20043d4:	00c08074 	movhi	r3,513
 20043d8:	18c43904 	addi	r3,r3,4324
 20043dc:	1885883a 	add	r2,r3,r2
 20043e0:	11000017 	ldw	r4,0(r2)
 20043e4:	11400117 	ldw	r5,4(r2)
 20043e8:	900d883a 	mov	r6,r18
 20043ec:	980f883a 	mov	r7,r19
 20043f0:	200d1c80 	call	200d1c8 <__gedf2>
 20043f4:	00828d0e 	bge	zero,r2,2004e2c <_dtoa_r+0xcd4>
 20043f8:	d9000517 	ldw	r4,20(sp)
 20043fc:	d8000e15 	stw	zero,56(sp)
 2004400:	213fffc4 	addi	r4,r4,-1
 2004404:	d9000515 	stw	r4,20(sp)
 2004408:	b42dc83a 	sub	r22,r22,r16
 200440c:	b5bfffc4 	addi	r22,r22,-1
 2004410:	b0026f16 	blt	r22,zero,2004dd0 <_dtoa_r+0xc78>
 2004414:	d8000815 	stw	zero,32(sp)
 2004418:	d9c00517 	ldw	r7,20(sp)
 200441c:	38026416 	blt	r7,zero,2004db0 <_dtoa_r+0xc58>
 2004420:	b1ed883a 	add	r22,r22,r7
 2004424:	d9c00d15 	stw	r7,52(sp)
 2004428:	d8000a15 	stw	zero,40(sp)
 200442c:	d9800317 	ldw	r6,12(sp)
 2004430:	00800244 	movi	r2,9
 2004434:	11811436 	bltu	r2,r6,2004888 <_dtoa_r+0x730>
 2004438:	00800144 	movi	r2,5
 200443c:	1184e10e 	bge	r2,r6,20057c4 <_dtoa_r+0x166c>
 2004440:	31bfff04 	addi	r6,r6,-4
 2004444:	d9800315 	stw	r6,12(sp)
 2004448:	0023883a 	mov	r17,zero
 200444c:	d9800317 	ldw	r6,12(sp)
 2004450:	008000c4 	movi	r2,3
 2004454:	30836726 	beq	r6,r2,20051f4 <_dtoa_r+0x109c>
 2004458:	1183410e 	bge	r2,r6,2005160 <_dtoa_r+0x1008>
 200445c:	d9c00317 	ldw	r7,12(sp)
 2004460:	00800104 	movi	r2,4
 2004464:	38827c26 	beq	r7,r2,2004e58 <_dtoa_r+0xd00>
 2004468:	00800144 	movi	r2,5
 200446c:	3884c41e 	bne	r7,r2,2005780 <_dtoa_r+0x1628>
 2004470:	00800044 	movi	r2,1
 2004474:	d8800b15 	stw	r2,44(sp)
 2004478:	d8c00517 	ldw	r3,20(sp)
 200447c:	d9002217 	ldw	r4,136(sp)
 2004480:	1907883a 	add	r3,r3,r4
 2004484:	19800044 	addi	r6,r3,1
 2004488:	d8c00c15 	stw	r3,48(sp)
 200448c:	d9800615 	stw	r6,24(sp)
 2004490:	0183a40e 	bge	zero,r6,2005324 <_dtoa_r+0x11cc>
 2004494:	d9800617 	ldw	r6,24(sp)
 2004498:	3021883a 	mov	r16,r6
 200449c:	e0001115 	stw	zero,68(fp)
 20044a0:	008005c4 	movi	r2,23
 20044a4:	1184c92e 	bgeu	r2,r6,20057cc <_dtoa_r+0x1674>
 20044a8:	00c00044 	movi	r3,1
 20044ac:	00800104 	movi	r2,4
 20044b0:	1085883a 	add	r2,r2,r2
 20044b4:	11000504 	addi	r4,r2,20
 20044b8:	180b883a 	mov	r5,r3
 20044bc:	18c00044 	addi	r3,r3,1
 20044c0:	313ffb2e 	bgeu	r6,r4,20044b0 <__alt_data_end+0xff0044b0>
 20044c4:	e1401115 	stw	r5,68(fp)
 20044c8:	e009883a 	mov	r4,fp
 20044cc:	20078100 	call	2007810 <_Balloc>
 20044d0:	d8800715 	stw	r2,28(sp)
 20044d4:	e0801015 	stw	r2,64(fp)
 20044d8:	00800384 	movi	r2,14
 20044dc:	1400f736 	bltu	r2,r16,20048bc <_dtoa_r+0x764>
 20044e0:	8800f626 	beq	r17,zero,20048bc <_dtoa_r+0x764>
 20044e4:	d9c00517 	ldw	r7,20(sp)
 20044e8:	01c39a0e 	bge	zero,r7,2005354 <_dtoa_r+0x11fc>
 20044ec:	388003cc 	andi	r2,r7,15
 20044f0:	100490fa 	slli	r2,r2,3
 20044f4:	382bd13a 	srai	r21,r7,4
 20044f8:	00c08074 	movhi	r3,513
 20044fc:	18c43904 	addi	r3,r3,4324
 2004500:	1885883a 	add	r2,r3,r2
 2004504:	a8c0040c 	andi	r3,r21,16
 2004508:	12400017 	ldw	r9,0(r2)
 200450c:	12000117 	ldw	r8,4(r2)
 2004510:	18037926 	beq	r3,zero,20052f8 <_dtoa_r+0x11a0>
 2004514:	00808074 	movhi	r2,513
 2004518:	10842f04 	addi	r2,r2,4284
 200451c:	11800817 	ldw	r6,32(r2)
 2004520:	11c00917 	ldw	r7,36(r2)
 2004524:	9009883a 	mov	r4,r18
 2004528:	980b883a 	mov	r5,r19
 200452c:	da001715 	stw	r8,92(sp)
 2004530:	da401615 	stw	r9,88(sp)
 2004534:	200c7700 	call	200c770 <__divdf3>
 2004538:	da001717 	ldw	r8,92(sp)
 200453c:	da401617 	ldw	r9,88(sp)
 2004540:	ad4003cc 	andi	r21,r21,15
 2004544:	040000c4 	movi	r16,3
 2004548:	1023883a 	mov	r17,r2
 200454c:	1829883a 	mov	r20,r3
 2004550:	a8001126 	beq	r21,zero,2004598 <_dtoa_r+0x440>
 2004554:	05c08074 	movhi	r23,513
 2004558:	bdc42f04 	addi	r23,r23,4284
 200455c:	4805883a 	mov	r2,r9
 2004560:	4007883a 	mov	r3,r8
 2004564:	a980004c 	andi	r6,r21,1
 2004568:	1009883a 	mov	r4,r2
 200456c:	a82bd07a 	srai	r21,r21,1
 2004570:	180b883a 	mov	r5,r3
 2004574:	30000426 	beq	r6,zero,2004588 <_dtoa_r+0x430>
 2004578:	b9800017 	ldw	r6,0(r23)
 200457c:	b9c00117 	ldw	r7,4(r23)
 2004580:	84000044 	addi	r16,r16,1
 2004584:	200d3980 	call	200d398 <__muldf3>
 2004588:	bdc00204 	addi	r23,r23,8
 200458c:	a83ff51e 	bne	r21,zero,2004564 <__alt_data_end+0xff004564>
 2004590:	1013883a 	mov	r9,r2
 2004594:	1811883a 	mov	r8,r3
 2004598:	480d883a 	mov	r6,r9
 200459c:	400f883a 	mov	r7,r8
 20045a0:	8809883a 	mov	r4,r17
 20045a4:	a00b883a 	mov	r5,r20
 20045a8:	200c7700 	call	200c770 <__divdf3>
 20045ac:	d8800f15 	stw	r2,60(sp)
 20045b0:	d8c01015 	stw	r3,64(sp)
 20045b4:	d8c00e17 	ldw	r3,56(sp)
 20045b8:	18000626 	beq	r3,zero,20045d4 <_dtoa_r+0x47c>
 20045bc:	d9000f17 	ldw	r4,60(sp)
 20045c0:	d9401017 	ldw	r5,64(sp)
 20045c4:	000d883a 	mov	r6,zero
 20045c8:	01cffc34 	movhi	r7,16368
 20045cc:	200d2a40 	call	200d2a4 <__ledf2>
 20045d0:	10040b16 	blt	r2,zero,2005600 <_dtoa_r+0x14a8>
 20045d4:	8009883a 	mov	r4,r16
 20045d8:	200e5800 	call	200e580 <__floatsidf>
 20045dc:	d9800f17 	ldw	r6,60(sp)
 20045e0:	d9c01017 	ldw	r7,64(sp)
 20045e4:	1009883a 	mov	r4,r2
 20045e8:	180b883a 	mov	r5,r3
 20045ec:	200d3980 	call	200d398 <__muldf3>
 20045f0:	000d883a 	mov	r6,zero
 20045f4:	01d00734 	movhi	r7,16412
 20045f8:	1009883a 	mov	r4,r2
 20045fc:	180b883a 	mov	r5,r3
 2004600:	200bec40 	call	200bec4 <__adddf3>
 2004604:	1021883a 	mov	r16,r2
 2004608:	d8800617 	ldw	r2,24(sp)
 200460c:	047f3034 	movhi	r17,64704
 2004610:	1c63883a 	add	r17,r3,r17
 2004614:	10031826 	beq	r2,zero,2005278 <_dtoa_r+0x1120>
 2004618:	d8c00517 	ldw	r3,20(sp)
 200461c:	db000617 	ldw	r12,24(sp)
 2004620:	d8c01315 	stw	r3,76(sp)
 2004624:	d9000b17 	ldw	r4,44(sp)
 2004628:	20038f26 	beq	r4,zero,2005468 <_dtoa_r+0x1310>
 200462c:	60bfffc4 	addi	r2,r12,-1
 2004630:	100490fa 	slli	r2,r2,3
 2004634:	00c08074 	movhi	r3,513
 2004638:	18c43904 	addi	r3,r3,4324
 200463c:	1885883a 	add	r2,r3,r2
 2004640:	11800017 	ldw	r6,0(r2)
 2004644:	11c00117 	ldw	r7,4(r2)
 2004648:	d8800717 	ldw	r2,28(sp)
 200464c:	0009883a 	mov	r4,zero
 2004650:	014ff834 	movhi	r5,16352
 2004654:	db001615 	stw	r12,88(sp)
 2004658:	15c00044 	addi	r23,r2,1
 200465c:	200c7700 	call	200c770 <__divdf3>
 2004660:	800d883a 	mov	r6,r16
 2004664:	880f883a 	mov	r7,r17
 2004668:	1009883a 	mov	r4,r2
 200466c:	180b883a 	mov	r5,r3
 2004670:	200dc040 	call	200dc04 <__subdf3>
 2004674:	d9401017 	ldw	r5,64(sp)
 2004678:	d9000f17 	ldw	r4,60(sp)
 200467c:	102b883a 	mov	r21,r2
 2004680:	d8c01215 	stw	r3,72(sp)
 2004684:	200e5000 	call	200e500 <__fixdfsi>
 2004688:	1009883a 	mov	r4,r2
 200468c:	1029883a 	mov	r20,r2
 2004690:	200e5800 	call	200e580 <__floatsidf>
 2004694:	d9000f17 	ldw	r4,60(sp)
 2004698:	d9401017 	ldw	r5,64(sp)
 200469c:	100d883a 	mov	r6,r2
 20046a0:	180f883a 	mov	r7,r3
 20046a4:	200dc040 	call	200dc04 <__subdf3>
 20046a8:	1823883a 	mov	r17,r3
 20046ac:	d8c00717 	ldw	r3,28(sp)
 20046b0:	d9401217 	ldw	r5,72(sp)
 20046b4:	a2000c04 	addi	r8,r20,48
 20046b8:	1021883a 	mov	r16,r2
 20046bc:	1a000005 	stb	r8,0(r3)
 20046c0:	800d883a 	mov	r6,r16
 20046c4:	880f883a 	mov	r7,r17
 20046c8:	a809883a 	mov	r4,r21
 20046cc:	4029883a 	mov	r20,r8
 20046d0:	200d1c80 	call	200d1c8 <__gedf2>
 20046d4:	00841d16 	blt	zero,r2,200574c <_dtoa_r+0x15f4>
 20046d8:	800d883a 	mov	r6,r16
 20046dc:	880f883a 	mov	r7,r17
 20046e0:	0009883a 	mov	r4,zero
 20046e4:	014ffc34 	movhi	r5,16368
 20046e8:	200dc040 	call	200dc04 <__subdf3>
 20046ec:	d9401217 	ldw	r5,72(sp)
 20046f0:	100d883a 	mov	r6,r2
 20046f4:	180f883a 	mov	r7,r3
 20046f8:	a809883a 	mov	r4,r21
 20046fc:	200d1c80 	call	200d1c8 <__gedf2>
 2004700:	db001617 	ldw	r12,88(sp)
 2004704:	00840e16 	blt	zero,r2,2005740 <_dtoa_r+0x15e8>
 2004708:	00800044 	movi	r2,1
 200470c:	13006b0e 	bge	r2,r12,20048bc <_dtoa_r+0x764>
 2004710:	d9000717 	ldw	r4,28(sp)
 2004714:	dd800f15 	stw	r22,60(sp)
 2004718:	dcc01015 	stw	r19,64(sp)
 200471c:	2319883a 	add	r12,r4,r12
 2004720:	dcc01217 	ldw	r19,72(sp)
 2004724:	602d883a 	mov	r22,r12
 2004728:	dc801215 	stw	r18,72(sp)
 200472c:	b825883a 	mov	r18,r23
 2004730:	00000906 	br	2004758 <_dtoa_r+0x600>
 2004734:	200dc040 	call	200dc04 <__subdf3>
 2004738:	a80d883a 	mov	r6,r21
 200473c:	980f883a 	mov	r7,r19
 2004740:	1009883a 	mov	r4,r2
 2004744:	180b883a 	mov	r5,r3
 2004748:	200d2a40 	call	200d2a4 <__ledf2>
 200474c:	1003e816 	blt	r2,zero,20056f0 <_dtoa_r+0x1598>
 2004750:	b825883a 	mov	r18,r23
 2004754:	bd83e926 	beq	r23,r22,20056fc <_dtoa_r+0x15a4>
 2004758:	a809883a 	mov	r4,r21
 200475c:	980b883a 	mov	r5,r19
 2004760:	000d883a 	mov	r6,zero
 2004764:	01d00934 	movhi	r7,16420
 2004768:	200d3980 	call	200d398 <__muldf3>
 200476c:	000d883a 	mov	r6,zero
 2004770:	01d00934 	movhi	r7,16420
 2004774:	8009883a 	mov	r4,r16
 2004778:	880b883a 	mov	r5,r17
 200477c:	102b883a 	mov	r21,r2
 2004780:	1827883a 	mov	r19,r3
 2004784:	200d3980 	call	200d398 <__muldf3>
 2004788:	180b883a 	mov	r5,r3
 200478c:	1009883a 	mov	r4,r2
 2004790:	1821883a 	mov	r16,r3
 2004794:	1023883a 	mov	r17,r2
 2004798:	200e5000 	call	200e500 <__fixdfsi>
 200479c:	1009883a 	mov	r4,r2
 20047a0:	1029883a 	mov	r20,r2
 20047a4:	200e5800 	call	200e580 <__floatsidf>
 20047a8:	8809883a 	mov	r4,r17
 20047ac:	800b883a 	mov	r5,r16
 20047b0:	100d883a 	mov	r6,r2
 20047b4:	180f883a 	mov	r7,r3
 20047b8:	200dc040 	call	200dc04 <__subdf3>
 20047bc:	a5000c04 	addi	r20,r20,48
 20047c0:	a80d883a 	mov	r6,r21
 20047c4:	980f883a 	mov	r7,r19
 20047c8:	1009883a 	mov	r4,r2
 20047cc:	180b883a 	mov	r5,r3
 20047d0:	95000005 	stb	r20,0(r18)
 20047d4:	1021883a 	mov	r16,r2
 20047d8:	1823883a 	mov	r17,r3
 20047dc:	200d2a40 	call	200d2a4 <__ledf2>
 20047e0:	bdc00044 	addi	r23,r23,1
 20047e4:	800d883a 	mov	r6,r16
 20047e8:	880f883a 	mov	r7,r17
 20047ec:	0009883a 	mov	r4,zero
 20047f0:	014ffc34 	movhi	r5,16368
 20047f4:	103fcf0e 	bge	r2,zero,2004734 <__alt_data_end+0xff004734>
 20047f8:	d8c01317 	ldw	r3,76(sp)
 20047fc:	d8c00515 	stw	r3,20(sp)
 2004800:	d9400917 	ldw	r5,36(sp)
 2004804:	e009883a 	mov	r4,fp
 2004808:	20078b80 	call	20078b8 <_Bfree>
 200480c:	d9000517 	ldw	r4,20(sp)
 2004810:	d9802317 	ldw	r6,140(sp)
 2004814:	d9c02517 	ldw	r7,148(sp)
 2004818:	b8000005 	stb	zero,0(r23)
 200481c:	20800044 	addi	r2,r4,1
 2004820:	30800015 	stw	r2,0(r6)
 2004824:	3802aa26 	beq	r7,zero,20052d0 <_dtoa_r+0x1178>
 2004828:	3dc00015 	stw	r23,0(r7)
 200482c:	d8800717 	ldw	r2,28(sp)
 2004830:	003e7906 	br	2004218 <__alt_data_end+0xff004218>
 2004834:	00800434 	movhi	r2,16
 2004838:	10bfffc4 	addi	r2,r2,-1
 200483c:	88a2703a 	and	r17,r17,r2
 2004840:	883e851e 	bne	r17,zero,2004258 <__alt_data_end+0xff004258>
 2004844:	00808074 	movhi	r2,513
 2004848:	10841a04 	addi	r2,r2,4200
 200484c:	003e8406 	br	2004260 <__alt_data_end+0xff004260>
 2004850:	10c00204 	addi	r3,r2,8
 2004854:	003e8706 	br	2004274 <__alt_data_end+0xff004274>
 2004858:	01400434 	movhi	r5,16
 200485c:	297fffc4 	addi	r5,r5,-1
 2004860:	994a703a 	and	r5,r19,r5
 2004864:	9009883a 	mov	r4,r18
 2004868:	843f0044 	addi	r16,r16,-1023
 200486c:	294ffc34 	orhi	r5,r5,16368
 2004870:	dd800217 	ldw	r22,8(sp)
 2004874:	d8001115 	stw	zero,68(sp)
 2004878:	003ea506 	br	2004310 <__alt_data_end+0xff004310>
 200487c:	00808074 	movhi	r2,513
 2004880:	10841104 	addi	r2,r2,4164
 2004884:	003e6406 	br	2004218 <__alt_data_end+0xff004218>
 2004888:	e0001115 	stw	zero,68(fp)
 200488c:	000b883a 	mov	r5,zero
 2004890:	e009883a 	mov	r4,fp
 2004894:	20078100 	call	2007810 <_Balloc>
 2004898:	01bfffc4 	movi	r6,-1
 200489c:	01c00044 	movi	r7,1
 20048a0:	d8800715 	stw	r2,28(sp)
 20048a4:	d9800c15 	stw	r6,48(sp)
 20048a8:	e0801015 	stw	r2,64(fp)
 20048ac:	d8000315 	stw	zero,12(sp)
 20048b0:	d9c00b15 	stw	r7,44(sp)
 20048b4:	d9800615 	stw	r6,24(sp)
 20048b8:	d8002215 	stw	zero,136(sp)
 20048bc:	d8800117 	ldw	r2,4(sp)
 20048c0:	10008916 	blt	r2,zero,2004ae8 <_dtoa_r+0x990>
 20048c4:	d9000517 	ldw	r4,20(sp)
 20048c8:	00c00384 	movi	r3,14
 20048cc:	19008616 	blt	r3,r4,2004ae8 <_dtoa_r+0x990>
 20048d0:	200490fa 	slli	r2,r4,3
 20048d4:	00c08074 	movhi	r3,513
 20048d8:	d9802217 	ldw	r6,136(sp)
 20048dc:	18c43904 	addi	r3,r3,4324
 20048e0:	1885883a 	add	r2,r3,r2
 20048e4:	14000017 	ldw	r16,0(r2)
 20048e8:	14400117 	ldw	r17,4(r2)
 20048ec:	30016316 	blt	r6,zero,2004e7c <_dtoa_r+0xd24>
 20048f0:	800d883a 	mov	r6,r16
 20048f4:	880f883a 	mov	r7,r17
 20048f8:	9009883a 	mov	r4,r18
 20048fc:	980b883a 	mov	r5,r19
 2004900:	200c7700 	call	200c770 <__divdf3>
 2004904:	180b883a 	mov	r5,r3
 2004908:	1009883a 	mov	r4,r2
 200490c:	200e5000 	call	200e500 <__fixdfsi>
 2004910:	1009883a 	mov	r4,r2
 2004914:	102b883a 	mov	r21,r2
 2004918:	200e5800 	call	200e580 <__floatsidf>
 200491c:	800d883a 	mov	r6,r16
 2004920:	880f883a 	mov	r7,r17
 2004924:	1009883a 	mov	r4,r2
 2004928:	180b883a 	mov	r5,r3
 200492c:	200d3980 	call	200d398 <__muldf3>
 2004930:	100d883a 	mov	r6,r2
 2004934:	180f883a 	mov	r7,r3
 2004938:	9009883a 	mov	r4,r18
 200493c:	980b883a 	mov	r5,r19
 2004940:	200dc040 	call	200dc04 <__subdf3>
 2004944:	d9c00717 	ldw	r7,28(sp)
 2004948:	1009883a 	mov	r4,r2
 200494c:	a8800c04 	addi	r2,r21,48
 2004950:	38800005 	stb	r2,0(r7)
 2004954:	3dc00044 	addi	r23,r7,1
 2004958:	d9c00617 	ldw	r7,24(sp)
 200495c:	01800044 	movi	r6,1
 2004960:	180b883a 	mov	r5,r3
 2004964:	2005883a 	mov	r2,r4
 2004968:	39803826 	beq	r7,r6,2004a4c <_dtoa_r+0x8f4>
 200496c:	000d883a 	mov	r6,zero
 2004970:	01d00934 	movhi	r7,16420
 2004974:	200d3980 	call	200d398 <__muldf3>
 2004978:	000d883a 	mov	r6,zero
 200497c:	000f883a 	mov	r7,zero
 2004980:	1009883a 	mov	r4,r2
 2004984:	180b883a 	mov	r5,r3
 2004988:	1025883a 	mov	r18,r2
 200498c:	1827883a 	mov	r19,r3
 2004990:	200d1400 	call	200d140 <__eqdf2>
 2004994:	103f9a26 	beq	r2,zero,2004800 <__alt_data_end+0xff004800>
 2004998:	d9c00617 	ldw	r7,24(sp)
 200499c:	d8c00717 	ldw	r3,28(sp)
 20049a0:	b829883a 	mov	r20,r23
 20049a4:	38bfffc4 	addi	r2,r7,-1
 20049a8:	18ad883a 	add	r22,r3,r2
 20049ac:	00000a06 	br	20049d8 <_dtoa_r+0x880>
 20049b0:	200d3980 	call	200d398 <__muldf3>
 20049b4:	000d883a 	mov	r6,zero
 20049b8:	000f883a 	mov	r7,zero
 20049bc:	1009883a 	mov	r4,r2
 20049c0:	180b883a 	mov	r5,r3
 20049c4:	1025883a 	mov	r18,r2
 20049c8:	1827883a 	mov	r19,r3
 20049cc:	b829883a 	mov	r20,r23
 20049d0:	200d1400 	call	200d140 <__eqdf2>
 20049d4:	103f8a26 	beq	r2,zero,2004800 <__alt_data_end+0xff004800>
 20049d8:	800d883a 	mov	r6,r16
 20049dc:	880f883a 	mov	r7,r17
 20049e0:	9009883a 	mov	r4,r18
 20049e4:	980b883a 	mov	r5,r19
 20049e8:	200c7700 	call	200c770 <__divdf3>
 20049ec:	180b883a 	mov	r5,r3
 20049f0:	1009883a 	mov	r4,r2
 20049f4:	200e5000 	call	200e500 <__fixdfsi>
 20049f8:	1009883a 	mov	r4,r2
 20049fc:	102b883a 	mov	r21,r2
 2004a00:	200e5800 	call	200e580 <__floatsidf>
 2004a04:	800d883a 	mov	r6,r16
 2004a08:	880f883a 	mov	r7,r17
 2004a0c:	1009883a 	mov	r4,r2
 2004a10:	180b883a 	mov	r5,r3
 2004a14:	200d3980 	call	200d398 <__muldf3>
 2004a18:	100d883a 	mov	r6,r2
 2004a1c:	180f883a 	mov	r7,r3
 2004a20:	9009883a 	mov	r4,r18
 2004a24:	980b883a 	mov	r5,r19
 2004a28:	200dc040 	call	200dc04 <__subdf3>
 2004a2c:	aa000c04 	addi	r8,r21,48
 2004a30:	a2000005 	stb	r8,0(r20)
 2004a34:	000d883a 	mov	r6,zero
 2004a38:	01d00934 	movhi	r7,16420
 2004a3c:	1009883a 	mov	r4,r2
 2004a40:	180b883a 	mov	r5,r3
 2004a44:	a5c00044 	addi	r23,r20,1
 2004a48:	b53fd91e 	bne	r22,r20,20049b0 <__alt_data_end+0xff0049b0>
 2004a4c:	100d883a 	mov	r6,r2
 2004a50:	180f883a 	mov	r7,r3
 2004a54:	1009883a 	mov	r4,r2
 2004a58:	180b883a 	mov	r5,r3
 2004a5c:	200bec40 	call	200bec4 <__adddf3>
 2004a60:	100d883a 	mov	r6,r2
 2004a64:	180f883a 	mov	r7,r3
 2004a68:	8009883a 	mov	r4,r16
 2004a6c:	880b883a 	mov	r5,r17
 2004a70:	1027883a 	mov	r19,r2
 2004a74:	1825883a 	mov	r18,r3
 2004a78:	200d2a40 	call	200d2a4 <__ledf2>
 2004a7c:	10000816 	blt	r2,zero,2004aa0 <_dtoa_r+0x948>
 2004a80:	980d883a 	mov	r6,r19
 2004a84:	900f883a 	mov	r7,r18
 2004a88:	8009883a 	mov	r4,r16
 2004a8c:	880b883a 	mov	r5,r17
 2004a90:	200d1400 	call	200d140 <__eqdf2>
 2004a94:	103f5a1e 	bne	r2,zero,2004800 <__alt_data_end+0xff004800>
 2004a98:	ad40004c 	andi	r21,r21,1
 2004a9c:	a83f5826 	beq	r21,zero,2004800 <__alt_data_end+0xff004800>
 2004aa0:	bd3fffc3 	ldbu	r20,-1(r23)
 2004aa4:	b8bfffc4 	addi	r2,r23,-1
 2004aa8:	1007883a 	mov	r3,r2
 2004aac:	01400e44 	movi	r5,57
 2004ab0:	d9800717 	ldw	r6,28(sp)
 2004ab4:	00000506 	br	2004acc <_dtoa_r+0x974>
 2004ab8:	18ffffc4 	addi	r3,r3,-1
 2004abc:	11824726 	beq	r2,r6,20053dc <_dtoa_r+0x1284>
 2004ac0:	1d000003 	ldbu	r20,0(r3)
 2004ac4:	102f883a 	mov	r23,r2
 2004ac8:	10bfffc4 	addi	r2,r2,-1
 2004acc:	a1003fcc 	andi	r4,r20,255
 2004ad0:	2100201c 	xori	r4,r4,128
 2004ad4:	213fe004 	addi	r4,r4,-128
 2004ad8:	217ff726 	beq	r4,r5,2004ab8 <__alt_data_end+0xff004ab8>
 2004adc:	a2000044 	addi	r8,r20,1
 2004ae0:	12000005 	stb	r8,0(r2)
 2004ae4:	003f4606 	br	2004800 <__alt_data_end+0xff004800>
 2004ae8:	d9000b17 	ldw	r4,44(sp)
 2004aec:	2000c826 	beq	r4,zero,2004e10 <_dtoa_r+0xcb8>
 2004af0:	d9800317 	ldw	r6,12(sp)
 2004af4:	00c00044 	movi	r3,1
 2004af8:	1980f90e 	bge	r3,r6,2004ee0 <_dtoa_r+0xd88>
 2004afc:	d8800617 	ldw	r2,24(sp)
 2004b00:	d8c00a17 	ldw	r3,40(sp)
 2004b04:	157fffc4 	addi	r21,r2,-1
 2004b08:	1d41f316 	blt	r3,r21,20052d8 <_dtoa_r+0x1180>
 2004b0c:	1d6bc83a 	sub	r21,r3,r21
 2004b10:	d9c00617 	ldw	r7,24(sp)
 2004b14:	3802aa16 	blt	r7,zero,20055c0 <_dtoa_r+0x1468>
 2004b18:	dd000817 	ldw	r20,32(sp)
 2004b1c:	d8800617 	ldw	r2,24(sp)
 2004b20:	d8c00817 	ldw	r3,32(sp)
 2004b24:	01400044 	movi	r5,1
 2004b28:	e009883a 	mov	r4,fp
 2004b2c:	1887883a 	add	r3,r3,r2
 2004b30:	d8c00815 	stw	r3,32(sp)
 2004b34:	b0ad883a 	add	r22,r22,r2
 2004b38:	2007c440 	call	2007c44 <__i2b>
 2004b3c:	1023883a 	mov	r17,r2
 2004b40:	a0000826 	beq	r20,zero,2004b64 <_dtoa_r+0xa0c>
 2004b44:	0580070e 	bge	zero,r22,2004b64 <_dtoa_r+0xa0c>
 2004b48:	a005883a 	mov	r2,r20
 2004b4c:	b500b916 	blt	r22,r20,2004e34 <_dtoa_r+0xcdc>
 2004b50:	d9000817 	ldw	r4,32(sp)
 2004b54:	a0a9c83a 	sub	r20,r20,r2
 2004b58:	b0adc83a 	sub	r22,r22,r2
 2004b5c:	2089c83a 	sub	r4,r4,r2
 2004b60:	d9000815 	stw	r4,32(sp)
 2004b64:	d9800a17 	ldw	r6,40(sp)
 2004b68:	0181810e 	bge	zero,r6,2005170 <_dtoa_r+0x1018>
 2004b6c:	d9c00b17 	ldw	r7,44(sp)
 2004b70:	3800b326 	beq	r7,zero,2004e40 <_dtoa_r+0xce8>
 2004b74:	a800b226 	beq	r21,zero,2004e40 <_dtoa_r+0xce8>
 2004b78:	880b883a 	mov	r5,r17
 2004b7c:	a80d883a 	mov	r6,r21
 2004b80:	e009883a 	mov	r4,fp
 2004b84:	2007f0c0 	call	2007f0c <__pow5mult>
 2004b88:	d9800917 	ldw	r6,36(sp)
 2004b8c:	100b883a 	mov	r5,r2
 2004b90:	e009883a 	mov	r4,fp
 2004b94:	1023883a 	mov	r17,r2
 2004b98:	2007c800 	call	2007c80 <__multiply>
 2004b9c:	1021883a 	mov	r16,r2
 2004ba0:	d8800a17 	ldw	r2,40(sp)
 2004ba4:	d9400917 	ldw	r5,36(sp)
 2004ba8:	e009883a 	mov	r4,fp
 2004bac:	1545c83a 	sub	r2,r2,r21
 2004bb0:	d8800a15 	stw	r2,40(sp)
 2004bb4:	20078b80 	call	20078b8 <_Bfree>
 2004bb8:	d8c00a17 	ldw	r3,40(sp)
 2004bbc:	18009f1e 	bne	r3,zero,2004e3c <_dtoa_r+0xce4>
 2004bc0:	05c00044 	movi	r23,1
 2004bc4:	e009883a 	mov	r4,fp
 2004bc8:	b80b883a 	mov	r5,r23
 2004bcc:	2007c440 	call	2007c44 <__i2b>
 2004bd0:	d9000d17 	ldw	r4,52(sp)
 2004bd4:	102b883a 	mov	r21,r2
 2004bd8:	2000ce26 	beq	r4,zero,2004f14 <_dtoa_r+0xdbc>
 2004bdc:	200d883a 	mov	r6,r4
 2004be0:	100b883a 	mov	r5,r2
 2004be4:	e009883a 	mov	r4,fp
 2004be8:	2007f0c0 	call	2007f0c <__pow5mult>
 2004bec:	d9800317 	ldw	r6,12(sp)
 2004bf0:	102b883a 	mov	r21,r2
 2004bf4:	b981810e 	bge	r23,r6,20051fc <_dtoa_r+0x10a4>
 2004bf8:	0027883a 	mov	r19,zero
 2004bfc:	a8800417 	ldw	r2,16(r21)
 2004c00:	05c00804 	movi	r23,32
 2004c04:	10800104 	addi	r2,r2,4
 2004c08:	1085883a 	add	r2,r2,r2
 2004c0c:	1085883a 	add	r2,r2,r2
 2004c10:	a885883a 	add	r2,r21,r2
 2004c14:	11000017 	ldw	r4,0(r2)
 2004c18:	2007b2c0 	call	2007b2c <__hi0bits>
 2004c1c:	b885c83a 	sub	r2,r23,r2
 2004c20:	1585883a 	add	r2,r2,r22
 2004c24:	108007cc 	andi	r2,r2,31
 2004c28:	1000b326 	beq	r2,zero,2004ef8 <_dtoa_r+0xda0>
 2004c2c:	00c00804 	movi	r3,32
 2004c30:	1887c83a 	sub	r3,r3,r2
 2004c34:	01000104 	movi	r4,4
 2004c38:	20c2cd0e 	bge	r4,r3,2005770 <_dtoa_r+0x1618>
 2004c3c:	00c00704 	movi	r3,28
 2004c40:	1885c83a 	sub	r2,r3,r2
 2004c44:	d8c00817 	ldw	r3,32(sp)
 2004c48:	a0a9883a 	add	r20,r20,r2
 2004c4c:	b0ad883a 	add	r22,r22,r2
 2004c50:	1887883a 	add	r3,r3,r2
 2004c54:	d8c00815 	stw	r3,32(sp)
 2004c58:	d9800817 	ldw	r6,32(sp)
 2004c5c:	0180040e 	bge	zero,r6,2004c70 <_dtoa_r+0xb18>
 2004c60:	800b883a 	mov	r5,r16
 2004c64:	e009883a 	mov	r4,fp
 2004c68:	200804c0 	call	200804c <__lshift>
 2004c6c:	1021883a 	mov	r16,r2
 2004c70:	0580050e 	bge	zero,r22,2004c88 <_dtoa_r+0xb30>
 2004c74:	a80b883a 	mov	r5,r21
 2004c78:	b00d883a 	mov	r6,r22
 2004c7c:	e009883a 	mov	r4,fp
 2004c80:	200804c0 	call	200804c <__lshift>
 2004c84:	102b883a 	mov	r21,r2
 2004c88:	d9c00e17 	ldw	r7,56(sp)
 2004c8c:	3801211e 	bne	r7,zero,2005114 <_dtoa_r+0xfbc>
 2004c90:	d9800617 	ldw	r6,24(sp)
 2004c94:	0181380e 	bge	zero,r6,2005178 <_dtoa_r+0x1020>
 2004c98:	d8c00b17 	ldw	r3,44(sp)
 2004c9c:	1800ab1e 	bne	r3,zero,2004f4c <_dtoa_r+0xdf4>
 2004ca0:	dc800717 	ldw	r18,28(sp)
 2004ca4:	dcc00617 	ldw	r19,24(sp)
 2004ca8:	9029883a 	mov	r20,r18
 2004cac:	00000206 	br	2004cb8 <_dtoa_r+0xb60>
 2004cb0:	20078e00 	call	20078e0 <__multadd>
 2004cb4:	1021883a 	mov	r16,r2
 2004cb8:	a80b883a 	mov	r5,r21
 2004cbc:	8009883a 	mov	r4,r16
 2004cc0:	2003f300 	call	2003f30 <quorem>
 2004cc4:	10800c04 	addi	r2,r2,48
 2004cc8:	90800005 	stb	r2,0(r18)
 2004ccc:	94800044 	addi	r18,r18,1
 2004cd0:	9507c83a 	sub	r3,r18,r20
 2004cd4:	000f883a 	mov	r7,zero
 2004cd8:	01800284 	movi	r6,10
 2004cdc:	800b883a 	mov	r5,r16
 2004ce0:	e009883a 	mov	r4,fp
 2004ce4:	1cfff216 	blt	r3,r19,2004cb0 <__alt_data_end+0xff004cb0>
 2004ce8:	1011883a 	mov	r8,r2
 2004cec:	d8800617 	ldw	r2,24(sp)
 2004cf0:	0082370e 	bge	zero,r2,20055d0 <_dtoa_r+0x1478>
 2004cf4:	d9000717 	ldw	r4,28(sp)
 2004cf8:	0025883a 	mov	r18,zero
 2004cfc:	20af883a 	add	r23,r4,r2
 2004d00:	01800044 	movi	r6,1
 2004d04:	800b883a 	mov	r5,r16
 2004d08:	e009883a 	mov	r4,fp
 2004d0c:	da001715 	stw	r8,92(sp)
 2004d10:	200804c0 	call	200804c <__lshift>
 2004d14:	a80b883a 	mov	r5,r21
 2004d18:	1009883a 	mov	r4,r2
 2004d1c:	d8800915 	stw	r2,36(sp)
 2004d20:	20081940 	call	2008194 <__mcmp>
 2004d24:	da001717 	ldw	r8,92(sp)
 2004d28:	0081800e 	bge	zero,r2,200532c <_dtoa_r+0x11d4>
 2004d2c:	b93fffc3 	ldbu	r4,-1(r23)
 2004d30:	b8bfffc4 	addi	r2,r23,-1
 2004d34:	1007883a 	mov	r3,r2
 2004d38:	01800e44 	movi	r6,57
 2004d3c:	d9c00717 	ldw	r7,28(sp)
 2004d40:	00000506 	br	2004d58 <_dtoa_r+0xc00>
 2004d44:	18ffffc4 	addi	r3,r3,-1
 2004d48:	11c12326 	beq	r2,r7,20051d8 <_dtoa_r+0x1080>
 2004d4c:	19000003 	ldbu	r4,0(r3)
 2004d50:	102f883a 	mov	r23,r2
 2004d54:	10bfffc4 	addi	r2,r2,-1
 2004d58:	21403fcc 	andi	r5,r4,255
 2004d5c:	2940201c 	xori	r5,r5,128
 2004d60:	297fe004 	addi	r5,r5,-128
 2004d64:	29bff726 	beq	r5,r6,2004d44 <__alt_data_end+0xff004d44>
 2004d68:	21000044 	addi	r4,r4,1
 2004d6c:	11000005 	stb	r4,0(r2)
 2004d70:	a80b883a 	mov	r5,r21
 2004d74:	e009883a 	mov	r4,fp
 2004d78:	20078b80 	call	20078b8 <_Bfree>
 2004d7c:	883ea026 	beq	r17,zero,2004800 <__alt_data_end+0xff004800>
 2004d80:	90000426 	beq	r18,zero,2004d94 <_dtoa_r+0xc3c>
 2004d84:	94400326 	beq	r18,r17,2004d94 <_dtoa_r+0xc3c>
 2004d88:	900b883a 	mov	r5,r18
 2004d8c:	e009883a 	mov	r4,fp
 2004d90:	20078b80 	call	20078b8 <_Bfree>
 2004d94:	880b883a 	mov	r5,r17
 2004d98:	e009883a 	mov	r4,fp
 2004d9c:	20078b80 	call	20078b8 <_Bfree>
 2004da0:	003e9706 	br	2004800 <__alt_data_end+0xff004800>
 2004da4:	01800044 	movi	r6,1
 2004da8:	d9800e15 	stw	r6,56(sp)
 2004dac:	003d9606 	br	2004408 <__alt_data_end+0xff004408>
 2004db0:	d8800817 	ldw	r2,32(sp)
 2004db4:	d8c00517 	ldw	r3,20(sp)
 2004db8:	d8000d15 	stw	zero,52(sp)
 2004dbc:	10c5c83a 	sub	r2,r2,r3
 2004dc0:	00c9c83a 	sub	r4,zero,r3
 2004dc4:	d8800815 	stw	r2,32(sp)
 2004dc8:	d9000a15 	stw	r4,40(sp)
 2004dcc:	003d9706 	br	200442c <__alt_data_end+0xff00442c>
 2004dd0:	05adc83a 	sub	r22,zero,r22
 2004dd4:	dd800815 	stw	r22,32(sp)
 2004dd8:	002d883a 	mov	r22,zero
 2004ddc:	003d8e06 	br	2004418 <__alt_data_end+0xff004418>
 2004de0:	d9000517 	ldw	r4,20(sp)
 2004de4:	200e5800 	call	200e580 <__floatsidf>
 2004de8:	100d883a 	mov	r6,r2
 2004dec:	180f883a 	mov	r7,r3
 2004df0:	a009883a 	mov	r4,r20
 2004df4:	880b883a 	mov	r5,r17
 2004df8:	200d1400 	call	200d140 <__eqdf2>
 2004dfc:	103d7126 	beq	r2,zero,20043c4 <__alt_data_end+0xff0043c4>
 2004e00:	d9c00517 	ldw	r7,20(sp)
 2004e04:	39ffffc4 	addi	r7,r7,-1
 2004e08:	d9c00515 	stw	r7,20(sp)
 2004e0c:	003d6d06 	br	20043c4 <__alt_data_end+0xff0043c4>
 2004e10:	dd400a17 	ldw	r21,40(sp)
 2004e14:	dd000817 	ldw	r20,32(sp)
 2004e18:	0023883a 	mov	r17,zero
 2004e1c:	003f4806 	br	2004b40 <__alt_data_end+0xff004b40>
 2004e20:	10e3c83a 	sub	r17,r2,r3
 2004e24:	9448983a 	sll	r4,r18,r17
 2004e28:	003d3206 	br	20042f4 <__alt_data_end+0xff0042f4>
 2004e2c:	d8000e15 	stw	zero,56(sp)
 2004e30:	003d7506 	br	2004408 <__alt_data_end+0xff004408>
 2004e34:	b005883a 	mov	r2,r22
 2004e38:	003f4506 	br	2004b50 <__alt_data_end+0xff004b50>
 2004e3c:	dc000915 	stw	r16,36(sp)
 2004e40:	d9800a17 	ldw	r6,40(sp)
 2004e44:	d9400917 	ldw	r5,36(sp)
 2004e48:	e009883a 	mov	r4,fp
 2004e4c:	2007f0c0 	call	2007f0c <__pow5mult>
 2004e50:	1021883a 	mov	r16,r2
 2004e54:	003f5a06 	br	2004bc0 <__alt_data_end+0xff004bc0>
 2004e58:	01c00044 	movi	r7,1
 2004e5c:	d9c00b15 	stw	r7,44(sp)
 2004e60:	d8802217 	ldw	r2,136(sp)
 2004e64:	0081280e 	bge	zero,r2,2005308 <_dtoa_r+0x11b0>
 2004e68:	100d883a 	mov	r6,r2
 2004e6c:	1021883a 	mov	r16,r2
 2004e70:	d8800c15 	stw	r2,48(sp)
 2004e74:	d8800615 	stw	r2,24(sp)
 2004e78:	003d8806 	br	200449c <__alt_data_end+0xff00449c>
 2004e7c:	d8800617 	ldw	r2,24(sp)
 2004e80:	00be9b16 	blt	zero,r2,20048f0 <__alt_data_end+0xff0048f0>
 2004e84:	10010f1e 	bne	r2,zero,20052c4 <_dtoa_r+0x116c>
 2004e88:	880b883a 	mov	r5,r17
 2004e8c:	000d883a 	mov	r6,zero
 2004e90:	01d00534 	movhi	r7,16404
 2004e94:	8009883a 	mov	r4,r16
 2004e98:	200d3980 	call	200d398 <__muldf3>
 2004e9c:	900d883a 	mov	r6,r18
 2004ea0:	980f883a 	mov	r7,r19
 2004ea4:	1009883a 	mov	r4,r2
 2004ea8:	180b883a 	mov	r5,r3
 2004eac:	200d1c80 	call	200d1c8 <__gedf2>
 2004eb0:	002b883a 	mov	r21,zero
 2004eb4:	0023883a 	mov	r17,zero
 2004eb8:	1000bf16 	blt	r2,zero,20051b8 <_dtoa_r+0x1060>
 2004ebc:	d9802217 	ldw	r6,136(sp)
 2004ec0:	ddc00717 	ldw	r23,28(sp)
 2004ec4:	018c303a 	nor	r6,zero,r6
 2004ec8:	d9800515 	stw	r6,20(sp)
 2004ecc:	a80b883a 	mov	r5,r21
 2004ed0:	e009883a 	mov	r4,fp
 2004ed4:	20078b80 	call	20078b8 <_Bfree>
 2004ed8:	883e4926 	beq	r17,zero,2004800 <__alt_data_end+0xff004800>
 2004edc:	003fad06 	br	2004d94 <__alt_data_end+0xff004d94>
 2004ee0:	d9c01117 	ldw	r7,68(sp)
 2004ee4:	3801bc26 	beq	r7,zero,20055d8 <_dtoa_r+0x1480>
 2004ee8:	10810cc4 	addi	r2,r2,1075
 2004eec:	dd400a17 	ldw	r21,40(sp)
 2004ef0:	dd000817 	ldw	r20,32(sp)
 2004ef4:	003f0a06 	br	2004b20 <__alt_data_end+0xff004b20>
 2004ef8:	00800704 	movi	r2,28
 2004efc:	d9000817 	ldw	r4,32(sp)
 2004f00:	a0a9883a 	add	r20,r20,r2
 2004f04:	b0ad883a 	add	r22,r22,r2
 2004f08:	2089883a 	add	r4,r4,r2
 2004f0c:	d9000815 	stw	r4,32(sp)
 2004f10:	003f5106 	br	2004c58 <__alt_data_end+0xff004c58>
 2004f14:	d8c00317 	ldw	r3,12(sp)
 2004f18:	b8c1fc0e 	bge	r23,r3,200570c <_dtoa_r+0x15b4>
 2004f1c:	0027883a 	mov	r19,zero
 2004f20:	b805883a 	mov	r2,r23
 2004f24:	003f3e06 	br	2004c20 <__alt_data_end+0xff004c20>
 2004f28:	880b883a 	mov	r5,r17
 2004f2c:	e009883a 	mov	r4,fp
 2004f30:	000f883a 	mov	r7,zero
 2004f34:	01800284 	movi	r6,10
 2004f38:	20078e00 	call	20078e0 <__multadd>
 2004f3c:	d9000c17 	ldw	r4,48(sp)
 2004f40:	1023883a 	mov	r17,r2
 2004f44:	0102040e 	bge	zero,r4,2005758 <_dtoa_r+0x1600>
 2004f48:	d9000615 	stw	r4,24(sp)
 2004f4c:	0500050e 	bge	zero,r20,2004f64 <_dtoa_r+0xe0c>
 2004f50:	880b883a 	mov	r5,r17
 2004f54:	a00d883a 	mov	r6,r20
 2004f58:	e009883a 	mov	r4,fp
 2004f5c:	200804c0 	call	200804c <__lshift>
 2004f60:	1023883a 	mov	r17,r2
 2004f64:	9801241e 	bne	r19,zero,20053f8 <_dtoa_r+0x12a0>
 2004f68:	8829883a 	mov	r20,r17
 2004f6c:	d9000617 	ldw	r4,24(sp)
 2004f70:	dcc00717 	ldw	r19,28(sp)
 2004f74:	9480004c 	andi	r18,r18,1
 2004f78:	20bfffc4 	addi	r2,r4,-1
 2004f7c:	9885883a 	add	r2,r19,r2
 2004f80:	d8800415 	stw	r2,16(sp)
 2004f84:	dc800615 	stw	r18,24(sp)
 2004f88:	a80b883a 	mov	r5,r21
 2004f8c:	8009883a 	mov	r4,r16
 2004f90:	2003f300 	call	2003f30 <quorem>
 2004f94:	880b883a 	mov	r5,r17
 2004f98:	8009883a 	mov	r4,r16
 2004f9c:	102f883a 	mov	r23,r2
 2004fa0:	20081940 	call	2008194 <__mcmp>
 2004fa4:	a80b883a 	mov	r5,r21
 2004fa8:	a00d883a 	mov	r6,r20
 2004fac:	e009883a 	mov	r4,fp
 2004fb0:	102d883a 	mov	r22,r2
 2004fb4:	20081f40 	call	20081f4 <__mdiff>
 2004fb8:	1007883a 	mov	r3,r2
 2004fbc:	10800317 	ldw	r2,12(r2)
 2004fc0:	bc800c04 	addi	r18,r23,48
 2004fc4:	180b883a 	mov	r5,r3
 2004fc8:	10004e1e 	bne	r2,zero,2005104 <_dtoa_r+0xfac>
 2004fcc:	8009883a 	mov	r4,r16
 2004fd0:	d8c01615 	stw	r3,88(sp)
 2004fd4:	20081940 	call	2008194 <__mcmp>
 2004fd8:	d8c01617 	ldw	r3,88(sp)
 2004fdc:	e009883a 	mov	r4,fp
 2004fe0:	d8801615 	stw	r2,88(sp)
 2004fe4:	180b883a 	mov	r5,r3
 2004fe8:	20078b80 	call	20078b8 <_Bfree>
 2004fec:	d8801617 	ldw	r2,88(sp)
 2004ff0:	1000041e 	bne	r2,zero,2005004 <_dtoa_r+0xeac>
 2004ff4:	d9800317 	ldw	r6,12(sp)
 2004ff8:	3000021e 	bne	r6,zero,2005004 <_dtoa_r+0xeac>
 2004ffc:	d8c00617 	ldw	r3,24(sp)
 2005000:	18003726 	beq	r3,zero,20050e0 <_dtoa_r+0xf88>
 2005004:	b0002016 	blt	r22,zero,2005088 <_dtoa_r+0xf30>
 2005008:	b000041e 	bne	r22,zero,200501c <_dtoa_r+0xec4>
 200500c:	d9000317 	ldw	r4,12(sp)
 2005010:	2000021e 	bne	r4,zero,200501c <_dtoa_r+0xec4>
 2005014:	d8c00617 	ldw	r3,24(sp)
 2005018:	18001b26 	beq	r3,zero,2005088 <_dtoa_r+0xf30>
 200501c:	00810716 	blt	zero,r2,200543c <_dtoa_r+0x12e4>
 2005020:	d8c00417 	ldw	r3,16(sp)
 2005024:	9d800044 	addi	r22,r19,1
 2005028:	9c800005 	stb	r18,0(r19)
 200502c:	b02f883a 	mov	r23,r22
 2005030:	98c10626 	beq	r19,r3,200544c <_dtoa_r+0x12f4>
 2005034:	800b883a 	mov	r5,r16
 2005038:	000f883a 	mov	r7,zero
 200503c:	01800284 	movi	r6,10
 2005040:	e009883a 	mov	r4,fp
 2005044:	20078e00 	call	20078e0 <__multadd>
 2005048:	1021883a 	mov	r16,r2
 200504c:	000f883a 	mov	r7,zero
 2005050:	01800284 	movi	r6,10
 2005054:	880b883a 	mov	r5,r17
 2005058:	e009883a 	mov	r4,fp
 200505c:	8d002526 	beq	r17,r20,20050f4 <_dtoa_r+0xf9c>
 2005060:	20078e00 	call	20078e0 <__multadd>
 2005064:	a00b883a 	mov	r5,r20
 2005068:	000f883a 	mov	r7,zero
 200506c:	01800284 	movi	r6,10
 2005070:	e009883a 	mov	r4,fp
 2005074:	1023883a 	mov	r17,r2
 2005078:	20078e00 	call	20078e0 <__multadd>
 200507c:	1029883a 	mov	r20,r2
 2005080:	b027883a 	mov	r19,r22
 2005084:	003fc006 	br	2004f88 <__alt_data_end+0xff004f88>
 2005088:	9011883a 	mov	r8,r18
 200508c:	00800e0e 	bge	zero,r2,20050c8 <_dtoa_r+0xf70>
 2005090:	800b883a 	mov	r5,r16
 2005094:	01800044 	movi	r6,1
 2005098:	e009883a 	mov	r4,fp
 200509c:	da001715 	stw	r8,92(sp)
 20050a0:	200804c0 	call	200804c <__lshift>
 20050a4:	a80b883a 	mov	r5,r21
 20050a8:	1009883a 	mov	r4,r2
 20050ac:	1021883a 	mov	r16,r2
 20050b0:	20081940 	call	2008194 <__mcmp>
 20050b4:	da001717 	ldw	r8,92(sp)
 20050b8:	0081960e 	bge	zero,r2,2005714 <_dtoa_r+0x15bc>
 20050bc:	00800e44 	movi	r2,57
 20050c0:	40817026 	beq	r8,r2,2005684 <_dtoa_r+0x152c>
 20050c4:	ba000c44 	addi	r8,r23,49
 20050c8:	8825883a 	mov	r18,r17
 20050cc:	9dc00044 	addi	r23,r19,1
 20050d0:	9a000005 	stb	r8,0(r19)
 20050d4:	a023883a 	mov	r17,r20
 20050d8:	dc000915 	stw	r16,36(sp)
 20050dc:	003f2406 	br	2004d70 <__alt_data_end+0xff004d70>
 20050e0:	00800e44 	movi	r2,57
 20050e4:	9011883a 	mov	r8,r18
 20050e8:	90816626 	beq	r18,r2,2005684 <_dtoa_r+0x152c>
 20050ec:	05bff516 	blt	zero,r22,20050c4 <__alt_data_end+0xff0050c4>
 20050f0:	003ff506 	br	20050c8 <__alt_data_end+0xff0050c8>
 20050f4:	20078e00 	call	20078e0 <__multadd>
 20050f8:	1023883a 	mov	r17,r2
 20050fc:	1029883a 	mov	r20,r2
 2005100:	003fdf06 	br	2005080 <__alt_data_end+0xff005080>
 2005104:	e009883a 	mov	r4,fp
 2005108:	20078b80 	call	20078b8 <_Bfree>
 200510c:	00800044 	movi	r2,1
 2005110:	003fbc06 	br	2005004 <__alt_data_end+0xff005004>
 2005114:	a80b883a 	mov	r5,r21
 2005118:	8009883a 	mov	r4,r16
 200511c:	20081940 	call	2008194 <__mcmp>
 2005120:	103edb0e 	bge	r2,zero,2004c90 <__alt_data_end+0xff004c90>
 2005124:	800b883a 	mov	r5,r16
 2005128:	000f883a 	mov	r7,zero
 200512c:	01800284 	movi	r6,10
 2005130:	e009883a 	mov	r4,fp
 2005134:	20078e00 	call	20078e0 <__multadd>
 2005138:	1021883a 	mov	r16,r2
 200513c:	d8800517 	ldw	r2,20(sp)
 2005140:	d8c00b17 	ldw	r3,44(sp)
 2005144:	10bfffc4 	addi	r2,r2,-1
 2005148:	d8800515 	stw	r2,20(sp)
 200514c:	183f761e 	bne	r3,zero,2004f28 <__alt_data_end+0xff004f28>
 2005150:	d9000c17 	ldw	r4,48(sp)
 2005154:	0101730e 	bge	zero,r4,2005724 <_dtoa_r+0x15cc>
 2005158:	d9000615 	stw	r4,24(sp)
 200515c:	003ed006 	br	2004ca0 <__alt_data_end+0xff004ca0>
 2005160:	00800084 	movi	r2,2
 2005164:	3081861e 	bne	r6,r2,2005780 <_dtoa_r+0x1628>
 2005168:	d8000b15 	stw	zero,44(sp)
 200516c:	003f3c06 	br	2004e60 <__alt_data_end+0xff004e60>
 2005170:	dc000917 	ldw	r16,36(sp)
 2005174:	003e9206 	br	2004bc0 <__alt_data_end+0xff004bc0>
 2005178:	d9c00317 	ldw	r7,12(sp)
 200517c:	00800084 	movi	r2,2
 2005180:	11fec50e 	bge	r2,r7,2004c98 <__alt_data_end+0xff004c98>
 2005184:	d9000617 	ldw	r4,24(sp)
 2005188:	20013c1e 	bne	r4,zero,200567c <_dtoa_r+0x1524>
 200518c:	a80b883a 	mov	r5,r21
 2005190:	000f883a 	mov	r7,zero
 2005194:	01800144 	movi	r6,5
 2005198:	e009883a 	mov	r4,fp
 200519c:	20078e00 	call	20078e0 <__multadd>
 20051a0:	100b883a 	mov	r5,r2
 20051a4:	8009883a 	mov	r4,r16
 20051a8:	102b883a 	mov	r21,r2
 20051ac:	20081940 	call	2008194 <__mcmp>
 20051b0:	dc000915 	stw	r16,36(sp)
 20051b4:	00bf410e 	bge	zero,r2,2004ebc <__alt_data_end+0xff004ebc>
 20051b8:	d9c00717 	ldw	r7,28(sp)
 20051bc:	00800c44 	movi	r2,49
 20051c0:	38800005 	stb	r2,0(r7)
 20051c4:	d8800517 	ldw	r2,20(sp)
 20051c8:	3dc00044 	addi	r23,r7,1
 20051cc:	10800044 	addi	r2,r2,1
 20051d0:	d8800515 	stw	r2,20(sp)
 20051d4:	003f3d06 	br	2004ecc <__alt_data_end+0xff004ecc>
 20051d8:	d9800517 	ldw	r6,20(sp)
 20051dc:	d9c00717 	ldw	r7,28(sp)
 20051e0:	00800c44 	movi	r2,49
 20051e4:	31800044 	addi	r6,r6,1
 20051e8:	d9800515 	stw	r6,20(sp)
 20051ec:	38800005 	stb	r2,0(r7)
 20051f0:	003edf06 	br	2004d70 <__alt_data_end+0xff004d70>
 20051f4:	d8000b15 	stw	zero,44(sp)
 20051f8:	003c9f06 	br	2004478 <__alt_data_end+0xff004478>
 20051fc:	903e7e1e 	bne	r18,zero,2004bf8 <__alt_data_end+0xff004bf8>
 2005200:	00800434 	movhi	r2,16
 2005204:	10bfffc4 	addi	r2,r2,-1
 2005208:	9884703a 	and	r2,r19,r2
 200520c:	1000ea1e 	bne	r2,zero,20055b8 <_dtoa_r+0x1460>
 2005210:	9cdffc2c 	andhi	r19,r19,32752
 2005214:	9800e826 	beq	r19,zero,20055b8 <_dtoa_r+0x1460>
 2005218:	d9c00817 	ldw	r7,32(sp)
 200521c:	b5800044 	addi	r22,r22,1
 2005220:	04c00044 	movi	r19,1
 2005224:	39c00044 	addi	r7,r7,1
 2005228:	d9c00815 	stw	r7,32(sp)
 200522c:	d8800d17 	ldw	r2,52(sp)
 2005230:	103e721e 	bne	r2,zero,2004bfc <__alt_data_end+0xff004bfc>
 2005234:	00800044 	movi	r2,1
 2005238:	003e7906 	br	2004c20 <__alt_data_end+0xff004c20>
 200523c:	8009883a 	mov	r4,r16
 2005240:	200e5800 	call	200e580 <__floatsidf>
 2005244:	d9800f17 	ldw	r6,60(sp)
 2005248:	d9c01017 	ldw	r7,64(sp)
 200524c:	1009883a 	mov	r4,r2
 2005250:	180b883a 	mov	r5,r3
 2005254:	200d3980 	call	200d398 <__muldf3>
 2005258:	000d883a 	mov	r6,zero
 200525c:	01d00734 	movhi	r7,16412
 2005260:	1009883a 	mov	r4,r2
 2005264:	180b883a 	mov	r5,r3
 2005268:	200bec40 	call	200bec4 <__adddf3>
 200526c:	047f3034 	movhi	r17,64704
 2005270:	1021883a 	mov	r16,r2
 2005274:	1c63883a 	add	r17,r3,r17
 2005278:	d9000f17 	ldw	r4,60(sp)
 200527c:	d9401017 	ldw	r5,64(sp)
 2005280:	000d883a 	mov	r6,zero
 2005284:	01d00534 	movhi	r7,16404
 2005288:	200dc040 	call	200dc04 <__subdf3>
 200528c:	800d883a 	mov	r6,r16
 2005290:	880f883a 	mov	r7,r17
 2005294:	1009883a 	mov	r4,r2
 2005298:	180b883a 	mov	r5,r3
 200529c:	102b883a 	mov	r21,r2
 20052a0:	1829883a 	mov	r20,r3
 20052a4:	200d1c80 	call	200d1c8 <__gedf2>
 20052a8:	00806c16 	blt	zero,r2,200545c <_dtoa_r+0x1304>
 20052ac:	89e0003c 	xorhi	r7,r17,32768
 20052b0:	800d883a 	mov	r6,r16
 20052b4:	a809883a 	mov	r4,r21
 20052b8:	a00b883a 	mov	r5,r20
 20052bc:	200d2a40 	call	200d2a4 <__ledf2>
 20052c0:	103d7e0e 	bge	r2,zero,20048bc <__alt_data_end+0xff0048bc>
 20052c4:	002b883a 	mov	r21,zero
 20052c8:	0023883a 	mov	r17,zero
 20052cc:	003efb06 	br	2004ebc <__alt_data_end+0xff004ebc>
 20052d0:	d8800717 	ldw	r2,28(sp)
 20052d4:	003bd006 	br	2004218 <__alt_data_end+0xff004218>
 20052d8:	d9000a17 	ldw	r4,40(sp)
 20052dc:	d9800d17 	ldw	r6,52(sp)
 20052e0:	dd400a15 	stw	r21,40(sp)
 20052e4:	a905c83a 	sub	r2,r21,r4
 20052e8:	308d883a 	add	r6,r6,r2
 20052ec:	d9800d15 	stw	r6,52(sp)
 20052f0:	002b883a 	mov	r21,zero
 20052f4:	003e0606 	br	2004b10 <__alt_data_end+0xff004b10>
 20052f8:	9023883a 	mov	r17,r18
 20052fc:	9829883a 	mov	r20,r19
 2005300:	04000084 	movi	r16,2
 2005304:	003c9206 	br	2004550 <__alt_data_end+0xff004550>
 2005308:	04000044 	movi	r16,1
 200530c:	dc000c15 	stw	r16,48(sp)
 2005310:	dc000615 	stw	r16,24(sp)
 2005314:	dc002215 	stw	r16,136(sp)
 2005318:	e0001115 	stw	zero,68(fp)
 200531c:	000b883a 	mov	r5,zero
 2005320:	003c6906 	br	20044c8 <__alt_data_end+0xff0044c8>
 2005324:	3021883a 	mov	r16,r6
 2005328:	003ffb06 	br	2005318 <__alt_data_end+0xff005318>
 200532c:	1000021e 	bne	r2,zero,2005338 <_dtoa_r+0x11e0>
 2005330:	4200004c 	andi	r8,r8,1
 2005334:	403e7d1e 	bne	r8,zero,2004d2c <__alt_data_end+0xff004d2c>
 2005338:	01000c04 	movi	r4,48
 200533c:	00000106 	br	2005344 <_dtoa_r+0x11ec>
 2005340:	102f883a 	mov	r23,r2
 2005344:	b8bfffc4 	addi	r2,r23,-1
 2005348:	10c00007 	ldb	r3,0(r2)
 200534c:	193ffc26 	beq	r3,r4,2005340 <__alt_data_end+0xff005340>
 2005350:	003e8706 	br	2004d70 <__alt_data_end+0xff004d70>
 2005354:	d8800517 	ldw	r2,20(sp)
 2005358:	00a3c83a 	sub	r17,zero,r2
 200535c:	8800a426 	beq	r17,zero,20055f0 <_dtoa_r+0x1498>
 2005360:	888003cc 	andi	r2,r17,15
 2005364:	100490fa 	slli	r2,r2,3
 2005368:	00c08074 	movhi	r3,513
 200536c:	18c43904 	addi	r3,r3,4324
 2005370:	1885883a 	add	r2,r3,r2
 2005374:	11800017 	ldw	r6,0(r2)
 2005378:	11c00117 	ldw	r7,4(r2)
 200537c:	9009883a 	mov	r4,r18
 2005380:	980b883a 	mov	r5,r19
 2005384:	8823d13a 	srai	r17,r17,4
 2005388:	200d3980 	call	200d398 <__muldf3>
 200538c:	d8800f15 	stw	r2,60(sp)
 2005390:	d8c01015 	stw	r3,64(sp)
 2005394:	8800e826 	beq	r17,zero,2005738 <_dtoa_r+0x15e0>
 2005398:	05008074 	movhi	r20,513
 200539c:	a5042f04 	addi	r20,r20,4284
 20053a0:	04000084 	movi	r16,2
 20053a4:	8980004c 	andi	r6,r17,1
 20053a8:	1009883a 	mov	r4,r2
 20053ac:	8823d07a 	srai	r17,r17,1
 20053b0:	180b883a 	mov	r5,r3
 20053b4:	30000426 	beq	r6,zero,20053c8 <_dtoa_r+0x1270>
 20053b8:	a1800017 	ldw	r6,0(r20)
 20053bc:	a1c00117 	ldw	r7,4(r20)
 20053c0:	84000044 	addi	r16,r16,1
 20053c4:	200d3980 	call	200d398 <__muldf3>
 20053c8:	a5000204 	addi	r20,r20,8
 20053cc:	883ff51e 	bne	r17,zero,20053a4 <__alt_data_end+0xff0053a4>
 20053d0:	d8800f15 	stw	r2,60(sp)
 20053d4:	d8c01015 	stw	r3,64(sp)
 20053d8:	003c7606 	br	20045b4 <__alt_data_end+0xff0045b4>
 20053dc:	00c00c04 	movi	r3,48
 20053e0:	10c00005 	stb	r3,0(r2)
 20053e4:	d8c00517 	ldw	r3,20(sp)
 20053e8:	bd3fffc3 	ldbu	r20,-1(r23)
 20053ec:	18c00044 	addi	r3,r3,1
 20053f0:	d8c00515 	stw	r3,20(sp)
 20053f4:	003db906 	br	2004adc <__alt_data_end+0xff004adc>
 20053f8:	89400117 	ldw	r5,4(r17)
 20053fc:	e009883a 	mov	r4,fp
 2005400:	20078100 	call	2007810 <_Balloc>
 2005404:	89800417 	ldw	r6,16(r17)
 2005408:	89400304 	addi	r5,r17,12
 200540c:	11000304 	addi	r4,r2,12
 2005410:	31800084 	addi	r6,r6,2
 2005414:	318d883a 	add	r6,r6,r6
 2005418:	318d883a 	add	r6,r6,r6
 200541c:	1027883a 	mov	r19,r2
 2005420:	20074440 	call	2007444 <memcpy>
 2005424:	01800044 	movi	r6,1
 2005428:	980b883a 	mov	r5,r19
 200542c:	e009883a 	mov	r4,fp
 2005430:	200804c0 	call	200804c <__lshift>
 2005434:	1029883a 	mov	r20,r2
 2005438:	003ecc06 	br	2004f6c <__alt_data_end+0xff004f6c>
 200543c:	00800e44 	movi	r2,57
 2005440:	90809026 	beq	r18,r2,2005684 <_dtoa_r+0x152c>
 2005444:	92000044 	addi	r8,r18,1
 2005448:	003f1f06 	br	20050c8 <__alt_data_end+0xff0050c8>
 200544c:	9011883a 	mov	r8,r18
 2005450:	8825883a 	mov	r18,r17
 2005454:	a023883a 	mov	r17,r20
 2005458:	003e2906 	br	2004d00 <__alt_data_end+0xff004d00>
 200545c:	002b883a 	mov	r21,zero
 2005460:	0023883a 	mov	r17,zero
 2005464:	003f5406 	br	20051b8 <__alt_data_end+0xff0051b8>
 2005468:	61bfffc4 	addi	r6,r12,-1
 200546c:	300490fa 	slli	r2,r6,3
 2005470:	00c08074 	movhi	r3,513
 2005474:	18c43904 	addi	r3,r3,4324
 2005478:	1885883a 	add	r2,r3,r2
 200547c:	11000017 	ldw	r4,0(r2)
 2005480:	11400117 	ldw	r5,4(r2)
 2005484:	d8800717 	ldw	r2,28(sp)
 2005488:	880f883a 	mov	r7,r17
 200548c:	d9801215 	stw	r6,72(sp)
 2005490:	800d883a 	mov	r6,r16
 2005494:	db001615 	stw	r12,88(sp)
 2005498:	15c00044 	addi	r23,r2,1
 200549c:	200d3980 	call	200d398 <__muldf3>
 20054a0:	d9401017 	ldw	r5,64(sp)
 20054a4:	d9000f17 	ldw	r4,60(sp)
 20054a8:	d8c01515 	stw	r3,84(sp)
 20054ac:	d8801415 	stw	r2,80(sp)
 20054b0:	200e5000 	call	200e500 <__fixdfsi>
 20054b4:	1009883a 	mov	r4,r2
 20054b8:	1021883a 	mov	r16,r2
 20054bc:	200e5800 	call	200e580 <__floatsidf>
 20054c0:	d9000f17 	ldw	r4,60(sp)
 20054c4:	d9401017 	ldw	r5,64(sp)
 20054c8:	100d883a 	mov	r6,r2
 20054cc:	180f883a 	mov	r7,r3
 20054d0:	200dc040 	call	200dc04 <__subdf3>
 20054d4:	1829883a 	mov	r20,r3
 20054d8:	d8c00717 	ldw	r3,28(sp)
 20054dc:	84000c04 	addi	r16,r16,48
 20054e0:	1023883a 	mov	r17,r2
 20054e4:	1c000005 	stb	r16,0(r3)
 20054e8:	db001617 	ldw	r12,88(sp)
 20054ec:	00800044 	movi	r2,1
 20054f0:	60802226 	beq	r12,r2,200557c <_dtoa_r+0x1424>
 20054f4:	d9c00717 	ldw	r7,28(sp)
 20054f8:	8805883a 	mov	r2,r17
 20054fc:	b82b883a 	mov	r21,r23
 2005500:	3b19883a 	add	r12,r7,r12
 2005504:	6023883a 	mov	r17,r12
 2005508:	a007883a 	mov	r3,r20
 200550c:	dc800f15 	stw	r18,60(sp)
 2005510:	000d883a 	mov	r6,zero
 2005514:	01d00934 	movhi	r7,16420
 2005518:	1009883a 	mov	r4,r2
 200551c:	180b883a 	mov	r5,r3
 2005520:	200d3980 	call	200d398 <__muldf3>
 2005524:	180b883a 	mov	r5,r3
 2005528:	1009883a 	mov	r4,r2
 200552c:	1829883a 	mov	r20,r3
 2005530:	1025883a 	mov	r18,r2
 2005534:	200e5000 	call	200e500 <__fixdfsi>
 2005538:	1009883a 	mov	r4,r2
 200553c:	1021883a 	mov	r16,r2
 2005540:	200e5800 	call	200e580 <__floatsidf>
 2005544:	100d883a 	mov	r6,r2
 2005548:	180f883a 	mov	r7,r3
 200554c:	9009883a 	mov	r4,r18
 2005550:	a00b883a 	mov	r5,r20
 2005554:	84000c04 	addi	r16,r16,48
 2005558:	200dc040 	call	200dc04 <__subdf3>
 200555c:	ad400044 	addi	r21,r21,1
 2005560:	ac3fffc5 	stb	r16,-1(r21)
 2005564:	ac7fea1e 	bne	r21,r17,2005510 <__alt_data_end+0xff005510>
 2005568:	1023883a 	mov	r17,r2
 200556c:	d8801217 	ldw	r2,72(sp)
 2005570:	dc800f17 	ldw	r18,60(sp)
 2005574:	1829883a 	mov	r20,r3
 2005578:	b8af883a 	add	r23,r23,r2
 200557c:	d9001417 	ldw	r4,80(sp)
 2005580:	d9401517 	ldw	r5,84(sp)
 2005584:	000d883a 	mov	r6,zero
 2005588:	01cff834 	movhi	r7,16352
 200558c:	200bec40 	call	200bec4 <__adddf3>
 2005590:	880d883a 	mov	r6,r17
 2005594:	a00f883a 	mov	r7,r20
 2005598:	1009883a 	mov	r4,r2
 200559c:	180b883a 	mov	r5,r3
 20055a0:	200d2a40 	call	200d2a4 <__ledf2>
 20055a4:	10003e0e 	bge	r2,zero,20056a0 <_dtoa_r+0x1548>
 20055a8:	d9001317 	ldw	r4,76(sp)
 20055ac:	bd3fffc3 	ldbu	r20,-1(r23)
 20055b0:	d9000515 	stw	r4,20(sp)
 20055b4:	003d3b06 	br	2004aa4 <__alt_data_end+0xff004aa4>
 20055b8:	0027883a 	mov	r19,zero
 20055bc:	003f1b06 	br	200522c <__alt_data_end+0xff00522c>
 20055c0:	d8800817 	ldw	r2,32(sp)
 20055c4:	11e9c83a 	sub	r20,r2,r7
 20055c8:	0005883a 	mov	r2,zero
 20055cc:	003d5406 	br	2004b20 <__alt_data_end+0xff004b20>
 20055d0:	00800044 	movi	r2,1
 20055d4:	003dc706 	br	2004cf4 <__alt_data_end+0xff004cf4>
 20055d8:	d8c00217 	ldw	r3,8(sp)
 20055dc:	00800d84 	movi	r2,54
 20055e0:	dd400a17 	ldw	r21,40(sp)
 20055e4:	10c5c83a 	sub	r2,r2,r3
 20055e8:	dd000817 	ldw	r20,32(sp)
 20055ec:	003d4c06 	br	2004b20 <__alt_data_end+0xff004b20>
 20055f0:	dc800f15 	stw	r18,60(sp)
 20055f4:	dcc01015 	stw	r19,64(sp)
 20055f8:	04000084 	movi	r16,2
 20055fc:	003bed06 	br	20045b4 <__alt_data_end+0xff0045b4>
 2005600:	d9000617 	ldw	r4,24(sp)
 2005604:	203f0d26 	beq	r4,zero,200523c <__alt_data_end+0xff00523c>
 2005608:	d9800c17 	ldw	r6,48(sp)
 200560c:	01bcab0e 	bge	zero,r6,20048bc <__alt_data_end+0xff0048bc>
 2005610:	d9401017 	ldw	r5,64(sp)
 2005614:	d9000f17 	ldw	r4,60(sp)
 2005618:	000d883a 	mov	r6,zero
 200561c:	01d00934 	movhi	r7,16420
 2005620:	200d3980 	call	200d398 <__muldf3>
 2005624:	81000044 	addi	r4,r16,1
 2005628:	d8800f15 	stw	r2,60(sp)
 200562c:	d8c01015 	stw	r3,64(sp)
 2005630:	200e5800 	call	200e580 <__floatsidf>
 2005634:	d9800f17 	ldw	r6,60(sp)
 2005638:	d9c01017 	ldw	r7,64(sp)
 200563c:	1009883a 	mov	r4,r2
 2005640:	180b883a 	mov	r5,r3
 2005644:	200d3980 	call	200d398 <__muldf3>
 2005648:	01d00734 	movhi	r7,16412
 200564c:	000d883a 	mov	r6,zero
 2005650:	1009883a 	mov	r4,r2
 2005654:	180b883a 	mov	r5,r3
 2005658:	200bec40 	call	200bec4 <__adddf3>
 200565c:	d9c00517 	ldw	r7,20(sp)
 2005660:	047f3034 	movhi	r17,64704
 2005664:	1021883a 	mov	r16,r2
 2005668:	39ffffc4 	addi	r7,r7,-1
 200566c:	d9c01315 	stw	r7,76(sp)
 2005670:	1c63883a 	add	r17,r3,r17
 2005674:	db000c17 	ldw	r12,48(sp)
 2005678:	003bea06 	br	2004624 <__alt_data_end+0xff004624>
 200567c:	dc000915 	stw	r16,36(sp)
 2005680:	003e0e06 	br	2004ebc <__alt_data_end+0xff004ebc>
 2005684:	01000e44 	movi	r4,57
 2005688:	8825883a 	mov	r18,r17
 200568c:	9dc00044 	addi	r23,r19,1
 2005690:	99000005 	stb	r4,0(r19)
 2005694:	a023883a 	mov	r17,r20
 2005698:	dc000915 	stw	r16,36(sp)
 200569c:	003da406 	br	2004d30 <__alt_data_end+0xff004d30>
 20056a0:	d9801417 	ldw	r6,80(sp)
 20056a4:	d9c01517 	ldw	r7,84(sp)
 20056a8:	0009883a 	mov	r4,zero
 20056ac:	014ff834 	movhi	r5,16352
 20056b0:	200dc040 	call	200dc04 <__subdf3>
 20056b4:	880d883a 	mov	r6,r17
 20056b8:	a00f883a 	mov	r7,r20
 20056bc:	1009883a 	mov	r4,r2
 20056c0:	180b883a 	mov	r5,r3
 20056c4:	200d1c80 	call	200d1c8 <__gedf2>
 20056c8:	00bc7c0e 	bge	zero,r2,20048bc <__alt_data_end+0xff0048bc>
 20056cc:	01000c04 	movi	r4,48
 20056d0:	00000106 	br	20056d8 <_dtoa_r+0x1580>
 20056d4:	102f883a 	mov	r23,r2
 20056d8:	b8bfffc4 	addi	r2,r23,-1
 20056dc:	10c00007 	ldb	r3,0(r2)
 20056e0:	193ffc26 	beq	r3,r4,20056d4 <__alt_data_end+0xff0056d4>
 20056e4:	d9801317 	ldw	r6,76(sp)
 20056e8:	d9800515 	stw	r6,20(sp)
 20056ec:	003c4406 	br	2004800 <__alt_data_end+0xff004800>
 20056f0:	d9801317 	ldw	r6,76(sp)
 20056f4:	d9800515 	stw	r6,20(sp)
 20056f8:	003cea06 	br	2004aa4 <__alt_data_end+0xff004aa4>
 20056fc:	dd800f17 	ldw	r22,60(sp)
 2005700:	dcc01017 	ldw	r19,64(sp)
 2005704:	dc801217 	ldw	r18,72(sp)
 2005708:	003c6c06 	br	20048bc <__alt_data_end+0xff0048bc>
 200570c:	903e031e 	bne	r18,zero,2004f1c <__alt_data_end+0xff004f1c>
 2005710:	003ebb06 	br	2005200 <__alt_data_end+0xff005200>
 2005714:	103e6c1e 	bne	r2,zero,20050c8 <__alt_data_end+0xff0050c8>
 2005718:	4080004c 	andi	r2,r8,1
 200571c:	103e6a26 	beq	r2,zero,20050c8 <__alt_data_end+0xff0050c8>
 2005720:	003e6606 	br	20050bc <__alt_data_end+0xff0050bc>
 2005724:	d8c00317 	ldw	r3,12(sp)
 2005728:	00800084 	movi	r2,2
 200572c:	10c02916 	blt	r2,r3,20057d4 <_dtoa_r+0x167c>
 2005730:	d9000c17 	ldw	r4,48(sp)
 2005734:	003e8806 	br	2005158 <__alt_data_end+0xff005158>
 2005738:	04000084 	movi	r16,2
 200573c:	003b9d06 	br	20045b4 <__alt_data_end+0xff0045b4>
 2005740:	d9001317 	ldw	r4,76(sp)
 2005744:	d9000515 	stw	r4,20(sp)
 2005748:	003cd606 	br	2004aa4 <__alt_data_end+0xff004aa4>
 200574c:	d8801317 	ldw	r2,76(sp)
 2005750:	d8800515 	stw	r2,20(sp)
 2005754:	003c2a06 	br	2004800 <__alt_data_end+0xff004800>
 2005758:	d9800317 	ldw	r6,12(sp)
 200575c:	00800084 	movi	r2,2
 2005760:	11801516 	blt	r2,r6,20057b8 <_dtoa_r+0x1660>
 2005764:	d9c00c17 	ldw	r7,48(sp)
 2005768:	d9c00615 	stw	r7,24(sp)
 200576c:	003df706 	br	2004f4c <__alt_data_end+0xff004f4c>
 2005770:	193d3926 	beq	r3,r4,2004c58 <__alt_data_end+0xff004c58>
 2005774:	00c00f04 	movi	r3,60
 2005778:	1885c83a 	sub	r2,r3,r2
 200577c:	003ddf06 	br	2004efc <__alt_data_end+0xff004efc>
 2005780:	e009883a 	mov	r4,fp
 2005784:	e0001115 	stw	zero,68(fp)
 2005788:	000b883a 	mov	r5,zero
 200578c:	20078100 	call	2007810 <_Balloc>
 2005790:	d8800715 	stw	r2,28(sp)
 2005794:	d8c00717 	ldw	r3,28(sp)
 2005798:	00bfffc4 	movi	r2,-1
 200579c:	01000044 	movi	r4,1
 20057a0:	d8800c15 	stw	r2,48(sp)
 20057a4:	e0c01015 	stw	r3,64(fp)
 20057a8:	d9000b15 	stw	r4,44(sp)
 20057ac:	d8800615 	stw	r2,24(sp)
 20057b0:	d8002215 	stw	zero,136(sp)
 20057b4:	003c4106 	br	20048bc <__alt_data_end+0xff0048bc>
 20057b8:	d8c00c17 	ldw	r3,48(sp)
 20057bc:	d8c00615 	stw	r3,24(sp)
 20057c0:	003e7006 	br	2005184 <__alt_data_end+0xff005184>
 20057c4:	04400044 	movi	r17,1
 20057c8:	003b2006 	br	200444c <__alt_data_end+0xff00444c>
 20057cc:	000b883a 	mov	r5,zero
 20057d0:	003b3d06 	br	20044c8 <__alt_data_end+0xff0044c8>
 20057d4:	d8800c17 	ldw	r2,48(sp)
 20057d8:	d8800615 	stw	r2,24(sp)
 20057dc:	003e6906 	br	2005184 <__alt_data_end+0xff005184>

020057e0 <__sflush_r>:
 20057e0:	2880030b 	ldhu	r2,12(r5)
 20057e4:	defffb04 	addi	sp,sp,-20
 20057e8:	dcc00315 	stw	r19,12(sp)
 20057ec:	dc400115 	stw	r17,4(sp)
 20057f0:	dfc00415 	stw	ra,16(sp)
 20057f4:	dc800215 	stw	r18,8(sp)
 20057f8:	dc000015 	stw	r16,0(sp)
 20057fc:	10c0020c 	andi	r3,r2,8
 2005800:	2823883a 	mov	r17,r5
 2005804:	2027883a 	mov	r19,r4
 2005808:	1800311e 	bne	r3,zero,20058d0 <__sflush_r+0xf0>
 200580c:	28c00117 	ldw	r3,4(r5)
 2005810:	10820014 	ori	r2,r2,2048
 2005814:	2880030d 	sth	r2,12(r5)
 2005818:	00c04b0e 	bge	zero,r3,2005948 <__sflush_r+0x168>
 200581c:	8a000a17 	ldw	r8,40(r17)
 2005820:	40002326 	beq	r8,zero,20058b0 <__sflush_r+0xd0>
 2005824:	9c000017 	ldw	r16,0(r19)
 2005828:	10c4000c 	andi	r3,r2,4096
 200582c:	98000015 	stw	zero,0(r19)
 2005830:	18004826 	beq	r3,zero,2005954 <__sflush_r+0x174>
 2005834:	89801417 	ldw	r6,80(r17)
 2005838:	10c0010c 	andi	r3,r2,4
 200583c:	18000626 	beq	r3,zero,2005858 <__sflush_r+0x78>
 2005840:	88c00117 	ldw	r3,4(r17)
 2005844:	88800c17 	ldw	r2,48(r17)
 2005848:	30cdc83a 	sub	r6,r6,r3
 200584c:	10000226 	beq	r2,zero,2005858 <__sflush_r+0x78>
 2005850:	88800f17 	ldw	r2,60(r17)
 2005854:	308dc83a 	sub	r6,r6,r2
 2005858:	89400717 	ldw	r5,28(r17)
 200585c:	000f883a 	mov	r7,zero
 2005860:	9809883a 	mov	r4,r19
 2005864:	403ee83a 	callr	r8
 2005868:	00ffffc4 	movi	r3,-1
 200586c:	10c04426 	beq	r2,r3,2005980 <__sflush_r+0x1a0>
 2005870:	88c0030b 	ldhu	r3,12(r17)
 2005874:	89000417 	ldw	r4,16(r17)
 2005878:	88000115 	stw	zero,4(r17)
 200587c:	197dffcc 	andi	r5,r3,63487
 2005880:	8940030d 	sth	r5,12(r17)
 2005884:	89000015 	stw	r4,0(r17)
 2005888:	18c4000c 	andi	r3,r3,4096
 200588c:	18002c1e 	bne	r3,zero,2005940 <__sflush_r+0x160>
 2005890:	89400c17 	ldw	r5,48(r17)
 2005894:	9c000015 	stw	r16,0(r19)
 2005898:	28000526 	beq	r5,zero,20058b0 <__sflush_r+0xd0>
 200589c:	88801004 	addi	r2,r17,64
 20058a0:	28800226 	beq	r5,r2,20058ac <__sflush_r+0xcc>
 20058a4:	9809883a 	mov	r4,r19
 20058a8:	2005f5c0 	call	2005f5c <_free_r>
 20058ac:	88000c15 	stw	zero,48(r17)
 20058b0:	0005883a 	mov	r2,zero
 20058b4:	dfc00417 	ldw	ra,16(sp)
 20058b8:	dcc00317 	ldw	r19,12(sp)
 20058bc:	dc800217 	ldw	r18,8(sp)
 20058c0:	dc400117 	ldw	r17,4(sp)
 20058c4:	dc000017 	ldw	r16,0(sp)
 20058c8:	dec00504 	addi	sp,sp,20
 20058cc:	f800283a 	ret
 20058d0:	2c800417 	ldw	r18,16(r5)
 20058d4:	903ff626 	beq	r18,zero,20058b0 <__alt_data_end+0xff0058b0>
 20058d8:	2c000017 	ldw	r16,0(r5)
 20058dc:	108000cc 	andi	r2,r2,3
 20058e0:	2c800015 	stw	r18,0(r5)
 20058e4:	84a1c83a 	sub	r16,r16,r18
 20058e8:	1000131e 	bne	r2,zero,2005938 <__sflush_r+0x158>
 20058ec:	28800517 	ldw	r2,20(r5)
 20058f0:	88800215 	stw	r2,8(r17)
 20058f4:	04000316 	blt	zero,r16,2005904 <__sflush_r+0x124>
 20058f8:	003fed06 	br	20058b0 <__alt_data_end+0xff0058b0>
 20058fc:	90a5883a 	add	r18,r18,r2
 2005900:	043feb0e 	bge	zero,r16,20058b0 <__alt_data_end+0xff0058b0>
 2005904:	88800917 	ldw	r2,36(r17)
 2005908:	89400717 	ldw	r5,28(r17)
 200590c:	800f883a 	mov	r7,r16
 2005910:	900d883a 	mov	r6,r18
 2005914:	9809883a 	mov	r4,r19
 2005918:	103ee83a 	callr	r2
 200591c:	80a1c83a 	sub	r16,r16,r2
 2005920:	00bff616 	blt	zero,r2,20058fc <__alt_data_end+0xff0058fc>
 2005924:	88c0030b 	ldhu	r3,12(r17)
 2005928:	00bfffc4 	movi	r2,-1
 200592c:	18c01014 	ori	r3,r3,64
 2005930:	88c0030d 	sth	r3,12(r17)
 2005934:	003fdf06 	br	20058b4 <__alt_data_end+0xff0058b4>
 2005938:	0005883a 	mov	r2,zero
 200593c:	003fec06 	br	20058f0 <__alt_data_end+0xff0058f0>
 2005940:	88801415 	stw	r2,80(r17)
 2005944:	003fd206 	br	2005890 <__alt_data_end+0xff005890>
 2005948:	28c00f17 	ldw	r3,60(r5)
 200594c:	00ffb316 	blt	zero,r3,200581c <__alt_data_end+0xff00581c>
 2005950:	003fd706 	br	20058b0 <__alt_data_end+0xff0058b0>
 2005954:	89400717 	ldw	r5,28(r17)
 2005958:	000d883a 	mov	r6,zero
 200595c:	01c00044 	movi	r7,1
 2005960:	9809883a 	mov	r4,r19
 2005964:	403ee83a 	callr	r8
 2005968:	100d883a 	mov	r6,r2
 200596c:	00bfffc4 	movi	r2,-1
 2005970:	30801426 	beq	r6,r2,20059c4 <__sflush_r+0x1e4>
 2005974:	8880030b 	ldhu	r2,12(r17)
 2005978:	8a000a17 	ldw	r8,40(r17)
 200597c:	003fae06 	br	2005838 <__alt_data_end+0xff005838>
 2005980:	98c00017 	ldw	r3,0(r19)
 2005984:	183fba26 	beq	r3,zero,2005870 <__alt_data_end+0xff005870>
 2005988:	01000744 	movi	r4,29
 200598c:	19000626 	beq	r3,r4,20059a8 <__sflush_r+0x1c8>
 2005990:	01000584 	movi	r4,22
 2005994:	19000426 	beq	r3,r4,20059a8 <__sflush_r+0x1c8>
 2005998:	88c0030b 	ldhu	r3,12(r17)
 200599c:	18c01014 	ori	r3,r3,64
 20059a0:	88c0030d 	sth	r3,12(r17)
 20059a4:	003fc306 	br	20058b4 <__alt_data_end+0xff0058b4>
 20059a8:	8880030b 	ldhu	r2,12(r17)
 20059ac:	88c00417 	ldw	r3,16(r17)
 20059b0:	88000115 	stw	zero,4(r17)
 20059b4:	10bdffcc 	andi	r2,r2,63487
 20059b8:	8880030d 	sth	r2,12(r17)
 20059bc:	88c00015 	stw	r3,0(r17)
 20059c0:	003fb306 	br	2005890 <__alt_data_end+0xff005890>
 20059c4:	98800017 	ldw	r2,0(r19)
 20059c8:	103fea26 	beq	r2,zero,2005974 <__alt_data_end+0xff005974>
 20059cc:	00c00744 	movi	r3,29
 20059d0:	10c00226 	beq	r2,r3,20059dc <__sflush_r+0x1fc>
 20059d4:	00c00584 	movi	r3,22
 20059d8:	10c0031e 	bne	r2,r3,20059e8 <__sflush_r+0x208>
 20059dc:	9c000015 	stw	r16,0(r19)
 20059e0:	0005883a 	mov	r2,zero
 20059e4:	003fb306 	br	20058b4 <__alt_data_end+0xff0058b4>
 20059e8:	88c0030b 	ldhu	r3,12(r17)
 20059ec:	3005883a 	mov	r2,r6
 20059f0:	18c01014 	ori	r3,r3,64
 20059f4:	88c0030d 	sth	r3,12(r17)
 20059f8:	003fae06 	br	20058b4 <__alt_data_end+0xff0058b4>

020059fc <_fflush_r>:
 20059fc:	defffd04 	addi	sp,sp,-12
 2005a00:	dc000115 	stw	r16,4(sp)
 2005a04:	dfc00215 	stw	ra,8(sp)
 2005a08:	2021883a 	mov	r16,r4
 2005a0c:	20000226 	beq	r4,zero,2005a18 <_fflush_r+0x1c>
 2005a10:	20800e17 	ldw	r2,56(r4)
 2005a14:	10000c26 	beq	r2,zero,2005a48 <_fflush_r+0x4c>
 2005a18:	2880030f 	ldh	r2,12(r5)
 2005a1c:	1000051e 	bne	r2,zero,2005a34 <_fflush_r+0x38>
 2005a20:	0005883a 	mov	r2,zero
 2005a24:	dfc00217 	ldw	ra,8(sp)
 2005a28:	dc000117 	ldw	r16,4(sp)
 2005a2c:	dec00304 	addi	sp,sp,12
 2005a30:	f800283a 	ret
 2005a34:	8009883a 	mov	r4,r16
 2005a38:	dfc00217 	ldw	ra,8(sp)
 2005a3c:	dc000117 	ldw	r16,4(sp)
 2005a40:	dec00304 	addi	sp,sp,12
 2005a44:	20057e01 	jmpi	20057e0 <__sflush_r>
 2005a48:	d9400015 	stw	r5,0(sp)
 2005a4c:	2005de80 	call	2005de8 <__sinit>
 2005a50:	d9400017 	ldw	r5,0(sp)
 2005a54:	003ff006 	br	2005a18 <__alt_data_end+0xff005a18>

02005a58 <fflush>:
 2005a58:	20000526 	beq	r4,zero,2005a70 <fflush+0x18>
 2005a5c:	00808074 	movhi	r2,513
 2005a60:	108b6c04 	addi	r2,r2,11696
 2005a64:	200b883a 	mov	r5,r4
 2005a68:	11000017 	ldw	r4,0(r2)
 2005a6c:	20059fc1 	jmpi	20059fc <_fflush_r>
 2005a70:	00808074 	movhi	r2,513
 2005a74:	108b6b04 	addi	r2,r2,11692
 2005a78:	11000017 	ldw	r4,0(r2)
 2005a7c:	01408034 	movhi	r5,512
 2005a80:	29567f04 	addi	r5,r5,23036
 2005a84:	20067f81 	jmpi	20067f8 <_fwalk_reent>

02005a88 <__fp_unlock>:
 2005a88:	0005883a 	mov	r2,zero
 2005a8c:	f800283a 	ret

02005a90 <_cleanup_r>:
 2005a90:	01408074 	movhi	r5,513
 2005a94:	296a6504 	addi	r5,r5,-22124
 2005a98:	20067f81 	jmpi	20067f8 <_fwalk_reent>

02005a9c <__sinit.part.1>:
 2005a9c:	defff704 	addi	sp,sp,-36
 2005aa0:	00c08034 	movhi	r3,512
 2005aa4:	dfc00815 	stw	ra,32(sp)
 2005aa8:	ddc00715 	stw	r23,28(sp)
 2005aac:	dd800615 	stw	r22,24(sp)
 2005ab0:	dd400515 	stw	r21,20(sp)
 2005ab4:	dd000415 	stw	r20,16(sp)
 2005ab8:	dcc00315 	stw	r19,12(sp)
 2005abc:	dc800215 	stw	r18,8(sp)
 2005ac0:	dc400115 	stw	r17,4(sp)
 2005ac4:	dc000015 	stw	r16,0(sp)
 2005ac8:	18d6a404 	addi	r3,r3,23184
 2005acc:	24000117 	ldw	r16,4(r4)
 2005ad0:	20c00f15 	stw	r3,60(r4)
 2005ad4:	2080bb04 	addi	r2,r4,748
 2005ad8:	00c000c4 	movi	r3,3
 2005adc:	20c0b915 	stw	r3,740(r4)
 2005ae0:	2080ba15 	stw	r2,744(r4)
 2005ae4:	2000b815 	stw	zero,736(r4)
 2005ae8:	05c00204 	movi	r23,8
 2005aec:	00800104 	movi	r2,4
 2005af0:	2025883a 	mov	r18,r4
 2005af4:	b80d883a 	mov	r6,r23
 2005af8:	81001704 	addi	r4,r16,92
 2005afc:	000b883a 	mov	r5,zero
 2005b00:	80000015 	stw	zero,0(r16)
 2005b04:	80000115 	stw	zero,4(r16)
 2005b08:	80000215 	stw	zero,8(r16)
 2005b0c:	8080030d 	sth	r2,12(r16)
 2005b10:	80001915 	stw	zero,100(r16)
 2005b14:	8000038d 	sth	zero,14(r16)
 2005b18:	80000415 	stw	zero,16(r16)
 2005b1c:	80000515 	stw	zero,20(r16)
 2005b20:	80000615 	stw	zero,24(r16)
 2005b24:	20076e80 	call	20076e8 <memset>
 2005b28:	05808074 	movhi	r22,513
 2005b2c:	94400217 	ldw	r17,8(r18)
 2005b30:	05408074 	movhi	r21,513
 2005b34:	05008074 	movhi	r20,513
 2005b38:	04c08074 	movhi	r19,513
 2005b3c:	b5a3bd04 	addi	r22,r22,-28940
 2005b40:	ad63d404 	addi	r21,r21,-28848
 2005b44:	a523f304 	addi	r20,r20,-28724
 2005b48:	9ce40a04 	addi	r19,r19,-28632
 2005b4c:	85800815 	stw	r22,32(r16)
 2005b50:	85400915 	stw	r21,36(r16)
 2005b54:	85000a15 	stw	r20,40(r16)
 2005b58:	84c00b15 	stw	r19,44(r16)
 2005b5c:	84000715 	stw	r16,28(r16)
 2005b60:	00800284 	movi	r2,10
 2005b64:	8880030d 	sth	r2,12(r17)
 2005b68:	00800044 	movi	r2,1
 2005b6c:	b80d883a 	mov	r6,r23
 2005b70:	89001704 	addi	r4,r17,92
 2005b74:	000b883a 	mov	r5,zero
 2005b78:	88000015 	stw	zero,0(r17)
 2005b7c:	88000115 	stw	zero,4(r17)
 2005b80:	88000215 	stw	zero,8(r17)
 2005b84:	88001915 	stw	zero,100(r17)
 2005b88:	8880038d 	sth	r2,14(r17)
 2005b8c:	88000415 	stw	zero,16(r17)
 2005b90:	88000515 	stw	zero,20(r17)
 2005b94:	88000615 	stw	zero,24(r17)
 2005b98:	20076e80 	call	20076e8 <memset>
 2005b9c:	94000317 	ldw	r16,12(r18)
 2005ba0:	00800484 	movi	r2,18
 2005ba4:	8c400715 	stw	r17,28(r17)
 2005ba8:	8d800815 	stw	r22,32(r17)
 2005bac:	8d400915 	stw	r21,36(r17)
 2005bb0:	8d000a15 	stw	r20,40(r17)
 2005bb4:	8cc00b15 	stw	r19,44(r17)
 2005bb8:	8080030d 	sth	r2,12(r16)
 2005bbc:	00800084 	movi	r2,2
 2005bc0:	80000015 	stw	zero,0(r16)
 2005bc4:	80000115 	stw	zero,4(r16)
 2005bc8:	80000215 	stw	zero,8(r16)
 2005bcc:	80001915 	stw	zero,100(r16)
 2005bd0:	8080038d 	sth	r2,14(r16)
 2005bd4:	80000415 	stw	zero,16(r16)
 2005bd8:	80000515 	stw	zero,20(r16)
 2005bdc:	80000615 	stw	zero,24(r16)
 2005be0:	b80d883a 	mov	r6,r23
 2005be4:	000b883a 	mov	r5,zero
 2005be8:	81001704 	addi	r4,r16,92
 2005bec:	20076e80 	call	20076e8 <memset>
 2005bf0:	00800044 	movi	r2,1
 2005bf4:	84000715 	stw	r16,28(r16)
 2005bf8:	85800815 	stw	r22,32(r16)
 2005bfc:	85400915 	stw	r21,36(r16)
 2005c00:	85000a15 	stw	r20,40(r16)
 2005c04:	84c00b15 	stw	r19,44(r16)
 2005c08:	90800e15 	stw	r2,56(r18)
 2005c0c:	dfc00817 	ldw	ra,32(sp)
 2005c10:	ddc00717 	ldw	r23,28(sp)
 2005c14:	dd800617 	ldw	r22,24(sp)
 2005c18:	dd400517 	ldw	r21,20(sp)
 2005c1c:	dd000417 	ldw	r20,16(sp)
 2005c20:	dcc00317 	ldw	r19,12(sp)
 2005c24:	dc800217 	ldw	r18,8(sp)
 2005c28:	dc400117 	ldw	r17,4(sp)
 2005c2c:	dc000017 	ldw	r16,0(sp)
 2005c30:	dec00904 	addi	sp,sp,36
 2005c34:	f800283a 	ret

02005c38 <__fp_lock>:
 2005c38:	0005883a 	mov	r2,zero
 2005c3c:	f800283a 	ret

02005c40 <__sfmoreglue>:
 2005c40:	defffc04 	addi	sp,sp,-16
 2005c44:	dc800215 	stw	r18,8(sp)
 2005c48:	2825883a 	mov	r18,r5
 2005c4c:	dc000015 	stw	r16,0(sp)
 2005c50:	01401a04 	movi	r5,104
 2005c54:	2021883a 	mov	r16,r4
 2005c58:	913fffc4 	addi	r4,r18,-1
 2005c5c:	dfc00315 	stw	ra,12(sp)
 2005c60:	dc400115 	stw	r17,4(sp)
 2005c64:	20018280 	call	2001828 <__mulsi3>
 2005c68:	8009883a 	mov	r4,r16
 2005c6c:	11401d04 	addi	r5,r2,116
 2005c70:	1023883a 	mov	r17,r2
 2005c74:	2006b540 	call	2006b54 <_malloc_r>
 2005c78:	1021883a 	mov	r16,r2
 2005c7c:	10000726 	beq	r2,zero,2005c9c <__sfmoreglue+0x5c>
 2005c80:	11000304 	addi	r4,r2,12
 2005c84:	10000015 	stw	zero,0(r2)
 2005c88:	14800115 	stw	r18,4(r2)
 2005c8c:	11000215 	stw	r4,8(r2)
 2005c90:	89801a04 	addi	r6,r17,104
 2005c94:	000b883a 	mov	r5,zero
 2005c98:	20076e80 	call	20076e8 <memset>
 2005c9c:	8005883a 	mov	r2,r16
 2005ca0:	dfc00317 	ldw	ra,12(sp)
 2005ca4:	dc800217 	ldw	r18,8(sp)
 2005ca8:	dc400117 	ldw	r17,4(sp)
 2005cac:	dc000017 	ldw	r16,0(sp)
 2005cb0:	dec00404 	addi	sp,sp,16
 2005cb4:	f800283a 	ret

02005cb8 <__sfp>:
 2005cb8:	defffb04 	addi	sp,sp,-20
 2005cbc:	dc000015 	stw	r16,0(sp)
 2005cc0:	04008074 	movhi	r16,513
 2005cc4:	840b6b04 	addi	r16,r16,11692
 2005cc8:	dcc00315 	stw	r19,12(sp)
 2005ccc:	2027883a 	mov	r19,r4
 2005cd0:	81000017 	ldw	r4,0(r16)
 2005cd4:	dfc00415 	stw	ra,16(sp)
 2005cd8:	dc800215 	stw	r18,8(sp)
 2005cdc:	20800e17 	ldw	r2,56(r4)
 2005ce0:	dc400115 	stw	r17,4(sp)
 2005ce4:	1000021e 	bne	r2,zero,2005cf0 <__sfp+0x38>
 2005ce8:	2005a9c0 	call	2005a9c <__sinit.part.1>
 2005cec:	81000017 	ldw	r4,0(r16)
 2005cf0:	2480b804 	addi	r18,r4,736
 2005cf4:	047fffc4 	movi	r17,-1
 2005cf8:	91000117 	ldw	r4,4(r18)
 2005cfc:	94000217 	ldw	r16,8(r18)
 2005d00:	213fffc4 	addi	r4,r4,-1
 2005d04:	20000a16 	blt	r4,zero,2005d30 <__sfp+0x78>
 2005d08:	8080030f 	ldh	r2,12(r16)
 2005d0c:	10000c26 	beq	r2,zero,2005d40 <__sfp+0x88>
 2005d10:	80c01d04 	addi	r3,r16,116
 2005d14:	00000206 	br	2005d20 <__sfp+0x68>
 2005d18:	18bfe60f 	ldh	r2,-104(r3)
 2005d1c:	10000826 	beq	r2,zero,2005d40 <__sfp+0x88>
 2005d20:	213fffc4 	addi	r4,r4,-1
 2005d24:	1c3ffd04 	addi	r16,r3,-12
 2005d28:	18c01a04 	addi	r3,r3,104
 2005d2c:	247ffa1e 	bne	r4,r17,2005d18 <__alt_data_end+0xff005d18>
 2005d30:	90800017 	ldw	r2,0(r18)
 2005d34:	10001d26 	beq	r2,zero,2005dac <__sfp+0xf4>
 2005d38:	1025883a 	mov	r18,r2
 2005d3c:	003fee06 	br	2005cf8 <__alt_data_end+0xff005cf8>
 2005d40:	00bfffc4 	movi	r2,-1
 2005d44:	8080038d 	sth	r2,14(r16)
 2005d48:	00800044 	movi	r2,1
 2005d4c:	8080030d 	sth	r2,12(r16)
 2005d50:	80001915 	stw	zero,100(r16)
 2005d54:	80000015 	stw	zero,0(r16)
 2005d58:	80000215 	stw	zero,8(r16)
 2005d5c:	80000115 	stw	zero,4(r16)
 2005d60:	80000415 	stw	zero,16(r16)
 2005d64:	80000515 	stw	zero,20(r16)
 2005d68:	80000615 	stw	zero,24(r16)
 2005d6c:	01800204 	movi	r6,8
 2005d70:	000b883a 	mov	r5,zero
 2005d74:	81001704 	addi	r4,r16,92
 2005d78:	20076e80 	call	20076e8 <memset>
 2005d7c:	8005883a 	mov	r2,r16
 2005d80:	80000c15 	stw	zero,48(r16)
 2005d84:	80000d15 	stw	zero,52(r16)
 2005d88:	80001115 	stw	zero,68(r16)
 2005d8c:	80001215 	stw	zero,72(r16)
 2005d90:	dfc00417 	ldw	ra,16(sp)
 2005d94:	dcc00317 	ldw	r19,12(sp)
 2005d98:	dc800217 	ldw	r18,8(sp)
 2005d9c:	dc400117 	ldw	r17,4(sp)
 2005da0:	dc000017 	ldw	r16,0(sp)
 2005da4:	dec00504 	addi	sp,sp,20
 2005da8:	f800283a 	ret
 2005dac:	01400104 	movi	r5,4
 2005db0:	9809883a 	mov	r4,r19
 2005db4:	2005c400 	call	2005c40 <__sfmoreglue>
 2005db8:	90800015 	stw	r2,0(r18)
 2005dbc:	103fde1e 	bne	r2,zero,2005d38 <__alt_data_end+0xff005d38>
 2005dc0:	00800304 	movi	r2,12
 2005dc4:	98800015 	stw	r2,0(r19)
 2005dc8:	0005883a 	mov	r2,zero
 2005dcc:	003ff006 	br	2005d90 <__alt_data_end+0xff005d90>

02005dd0 <_cleanup>:
 2005dd0:	00808074 	movhi	r2,513
 2005dd4:	108b6b04 	addi	r2,r2,11692
 2005dd8:	11000017 	ldw	r4,0(r2)
 2005ddc:	01408074 	movhi	r5,513
 2005de0:	296a6504 	addi	r5,r5,-22124
 2005de4:	20067f81 	jmpi	20067f8 <_fwalk_reent>

02005de8 <__sinit>:
 2005de8:	20800e17 	ldw	r2,56(r4)
 2005dec:	10000126 	beq	r2,zero,2005df4 <__sinit+0xc>
 2005df0:	f800283a 	ret
 2005df4:	2005a9c1 	jmpi	2005a9c <__sinit.part.1>

02005df8 <__sfp_lock_acquire>:
 2005df8:	f800283a 	ret

02005dfc <__sfp_lock_release>:
 2005dfc:	f800283a 	ret

02005e00 <__sinit_lock_acquire>:
 2005e00:	f800283a 	ret

02005e04 <__sinit_lock_release>:
 2005e04:	f800283a 	ret

02005e08 <__fp_lock_all>:
 2005e08:	00808074 	movhi	r2,513
 2005e0c:	108b6c04 	addi	r2,r2,11696
 2005e10:	11000017 	ldw	r4,0(r2)
 2005e14:	01408034 	movhi	r5,512
 2005e18:	29570e04 	addi	r5,r5,23608
 2005e1c:	20067341 	jmpi	2006734 <_fwalk>

02005e20 <__fp_unlock_all>:
 2005e20:	00808074 	movhi	r2,513
 2005e24:	108b6c04 	addi	r2,r2,11696
 2005e28:	11000017 	ldw	r4,0(r2)
 2005e2c:	01408034 	movhi	r5,512
 2005e30:	2956a204 	addi	r5,r5,23176
 2005e34:	20067341 	jmpi	2006734 <_fwalk>

02005e38 <_malloc_trim_r>:
 2005e38:	defffb04 	addi	sp,sp,-20
 2005e3c:	dcc00315 	stw	r19,12(sp)
 2005e40:	04c08074 	movhi	r19,513
 2005e44:	dc800215 	stw	r18,8(sp)
 2005e48:	dc400115 	stw	r17,4(sp)
 2005e4c:	dc000015 	stw	r16,0(sp)
 2005e50:	dfc00415 	stw	ra,16(sp)
 2005e54:	2821883a 	mov	r16,r5
 2005e58:	9cc5e704 	addi	r19,r19,6044
 2005e5c:	2025883a 	mov	r18,r4
 2005e60:	200ed040 	call	200ed04 <__malloc_lock>
 2005e64:	98800217 	ldw	r2,8(r19)
 2005e68:	14400117 	ldw	r17,4(r2)
 2005e6c:	00bfff04 	movi	r2,-4
 2005e70:	88a2703a 	and	r17,r17,r2
 2005e74:	8c21c83a 	sub	r16,r17,r16
 2005e78:	8403fbc4 	addi	r16,r16,4079
 2005e7c:	8020d33a 	srli	r16,r16,12
 2005e80:	0083ffc4 	movi	r2,4095
 2005e84:	843fffc4 	addi	r16,r16,-1
 2005e88:	8020933a 	slli	r16,r16,12
 2005e8c:	1400060e 	bge	r2,r16,2005ea8 <_malloc_trim_r+0x70>
 2005e90:	000b883a 	mov	r5,zero
 2005e94:	9009883a 	mov	r4,r18
 2005e98:	2008ea00 	call	2008ea0 <_sbrk_r>
 2005e9c:	98c00217 	ldw	r3,8(r19)
 2005ea0:	1c47883a 	add	r3,r3,r17
 2005ea4:	10c00a26 	beq	r2,r3,2005ed0 <_malloc_trim_r+0x98>
 2005ea8:	9009883a 	mov	r4,r18
 2005eac:	200ed280 	call	200ed28 <__malloc_unlock>
 2005eb0:	0005883a 	mov	r2,zero
 2005eb4:	dfc00417 	ldw	ra,16(sp)
 2005eb8:	dcc00317 	ldw	r19,12(sp)
 2005ebc:	dc800217 	ldw	r18,8(sp)
 2005ec0:	dc400117 	ldw	r17,4(sp)
 2005ec4:	dc000017 	ldw	r16,0(sp)
 2005ec8:	dec00504 	addi	sp,sp,20
 2005ecc:	f800283a 	ret
 2005ed0:	040bc83a 	sub	r5,zero,r16
 2005ed4:	9009883a 	mov	r4,r18
 2005ed8:	2008ea00 	call	2008ea0 <_sbrk_r>
 2005edc:	00ffffc4 	movi	r3,-1
 2005ee0:	10c00d26 	beq	r2,r3,2005f18 <_malloc_trim_r+0xe0>
 2005ee4:	00c08074 	movhi	r3,513
 2005ee8:	18d24504 	addi	r3,r3,18708
 2005eec:	18800017 	ldw	r2,0(r3)
 2005ef0:	99000217 	ldw	r4,8(r19)
 2005ef4:	8c23c83a 	sub	r17,r17,r16
 2005ef8:	8c400054 	ori	r17,r17,1
 2005efc:	1421c83a 	sub	r16,r2,r16
 2005f00:	24400115 	stw	r17,4(r4)
 2005f04:	9009883a 	mov	r4,r18
 2005f08:	1c000015 	stw	r16,0(r3)
 2005f0c:	200ed280 	call	200ed28 <__malloc_unlock>
 2005f10:	00800044 	movi	r2,1
 2005f14:	003fe706 	br	2005eb4 <__alt_data_end+0xff005eb4>
 2005f18:	000b883a 	mov	r5,zero
 2005f1c:	9009883a 	mov	r4,r18
 2005f20:	2008ea00 	call	2008ea0 <_sbrk_r>
 2005f24:	99000217 	ldw	r4,8(r19)
 2005f28:	014003c4 	movi	r5,15
 2005f2c:	1107c83a 	sub	r3,r2,r4
 2005f30:	28ffdd0e 	bge	r5,r3,2005ea8 <__alt_data_end+0xff005ea8>
 2005f34:	01408074 	movhi	r5,513
 2005f38:	294b6e04 	addi	r5,r5,11704
 2005f3c:	29400017 	ldw	r5,0(r5)
 2005f40:	18c00054 	ori	r3,r3,1
 2005f44:	20c00115 	stw	r3,4(r4)
 2005f48:	00c08074 	movhi	r3,513
 2005f4c:	1145c83a 	sub	r2,r2,r5
 2005f50:	18d24504 	addi	r3,r3,18708
 2005f54:	18800015 	stw	r2,0(r3)
 2005f58:	003fd306 	br	2005ea8 <__alt_data_end+0xff005ea8>

02005f5c <_free_r>:
 2005f5c:	28004126 	beq	r5,zero,2006064 <_free_r+0x108>
 2005f60:	defffd04 	addi	sp,sp,-12
 2005f64:	dc400115 	stw	r17,4(sp)
 2005f68:	dc000015 	stw	r16,0(sp)
 2005f6c:	2023883a 	mov	r17,r4
 2005f70:	2821883a 	mov	r16,r5
 2005f74:	dfc00215 	stw	ra,8(sp)
 2005f78:	200ed040 	call	200ed04 <__malloc_lock>
 2005f7c:	81ffff17 	ldw	r7,-4(r16)
 2005f80:	00bfff84 	movi	r2,-2
 2005f84:	01008074 	movhi	r4,513
 2005f88:	81bffe04 	addi	r6,r16,-8
 2005f8c:	3884703a 	and	r2,r7,r2
 2005f90:	2105e704 	addi	r4,r4,6044
 2005f94:	308b883a 	add	r5,r6,r2
 2005f98:	2a400117 	ldw	r9,4(r5)
 2005f9c:	22000217 	ldw	r8,8(r4)
 2005fa0:	00ffff04 	movi	r3,-4
 2005fa4:	48c6703a 	and	r3,r9,r3
 2005fa8:	2a005726 	beq	r5,r8,2006108 <_free_r+0x1ac>
 2005fac:	28c00115 	stw	r3,4(r5)
 2005fb0:	39c0004c 	andi	r7,r7,1
 2005fb4:	3800091e 	bne	r7,zero,2005fdc <_free_r+0x80>
 2005fb8:	823ffe17 	ldw	r8,-8(r16)
 2005fbc:	22400204 	addi	r9,r4,8
 2005fc0:	320dc83a 	sub	r6,r6,r8
 2005fc4:	31c00217 	ldw	r7,8(r6)
 2005fc8:	1205883a 	add	r2,r2,r8
 2005fcc:	3a406526 	beq	r7,r9,2006164 <_free_r+0x208>
 2005fd0:	32000317 	ldw	r8,12(r6)
 2005fd4:	3a000315 	stw	r8,12(r7)
 2005fd8:	41c00215 	stw	r7,8(r8)
 2005fdc:	28cf883a 	add	r7,r5,r3
 2005fe0:	39c00117 	ldw	r7,4(r7)
 2005fe4:	39c0004c 	andi	r7,r7,1
 2005fe8:	38003a26 	beq	r7,zero,20060d4 <_free_r+0x178>
 2005fec:	10c00054 	ori	r3,r2,1
 2005ff0:	30c00115 	stw	r3,4(r6)
 2005ff4:	3087883a 	add	r3,r6,r2
 2005ff8:	18800015 	stw	r2,0(r3)
 2005ffc:	00c07fc4 	movi	r3,511
 2006000:	18801936 	bltu	r3,r2,2006068 <_free_r+0x10c>
 2006004:	1004d0fa 	srli	r2,r2,3
 2006008:	01c00044 	movi	r7,1
 200600c:	21400117 	ldw	r5,4(r4)
 2006010:	10c00044 	addi	r3,r2,1
 2006014:	18c7883a 	add	r3,r3,r3
 2006018:	1005d0ba 	srai	r2,r2,2
 200601c:	18c7883a 	add	r3,r3,r3
 2006020:	18c7883a 	add	r3,r3,r3
 2006024:	1907883a 	add	r3,r3,r4
 2006028:	3884983a 	sll	r2,r7,r2
 200602c:	19c00017 	ldw	r7,0(r3)
 2006030:	1a3ffe04 	addi	r8,r3,-8
 2006034:	1144b03a 	or	r2,r2,r5
 2006038:	32000315 	stw	r8,12(r6)
 200603c:	31c00215 	stw	r7,8(r6)
 2006040:	20800115 	stw	r2,4(r4)
 2006044:	19800015 	stw	r6,0(r3)
 2006048:	39800315 	stw	r6,12(r7)
 200604c:	8809883a 	mov	r4,r17
 2006050:	dfc00217 	ldw	ra,8(sp)
 2006054:	dc400117 	ldw	r17,4(sp)
 2006058:	dc000017 	ldw	r16,0(sp)
 200605c:	dec00304 	addi	sp,sp,12
 2006060:	200ed281 	jmpi	200ed28 <__malloc_unlock>
 2006064:	f800283a 	ret
 2006068:	100ad27a 	srli	r5,r2,9
 200606c:	00c00104 	movi	r3,4
 2006070:	19404a36 	bltu	r3,r5,200619c <_free_r+0x240>
 2006074:	100ad1ba 	srli	r5,r2,6
 2006078:	28c00e44 	addi	r3,r5,57
 200607c:	18c7883a 	add	r3,r3,r3
 2006080:	29400e04 	addi	r5,r5,56
 2006084:	18c7883a 	add	r3,r3,r3
 2006088:	18c7883a 	add	r3,r3,r3
 200608c:	1909883a 	add	r4,r3,r4
 2006090:	20c00017 	ldw	r3,0(r4)
 2006094:	01c08074 	movhi	r7,513
 2006098:	213ffe04 	addi	r4,r4,-8
 200609c:	39c5e704 	addi	r7,r7,6044
 20060a0:	20c04426 	beq	r4,r3,20061b4 <_free_r+0x258>
 20060a4:	01ffff04 	movi	r7,-4
 20060a8:	19400117 	ldw	r5,4(r3)
 20060ac:	29ca703a 	and	r5,r5,r7
 20060b0:	1140022e 	bgeu	r2,r5,20060bc <_free_r+0x160>
 20060b4:	18c00217 	ldw	r3,8(r3)
 20060b8:	20fffb1e 	bne	r4,r3,20060a8 <__alt_data_end+0xff0060a8>
 20060bc:	19000317 	ldw	r4,12(r3)
 20060c0:	31000315 	stw	r4,12(r6)
 20060c4:	30c00215 	stw	r3,8(r6)
 20060c8:	21800215 	stw	r6,8(r4)
 20060cc:	19800315 	stw	r6,12(r3)
 20060d0:	003fde06 	br	200604c <__alt_data_end+0xff00604c>
 20060d4:	29c00217 	ldw	r7,8(r5)
 20060d8:	10c5883a 	add	r2,r2,r3
 20060dc:	00c08074 	movhi	r3,513
 20060e0:	18c5e904 	addi	r3,r3,6052
 20060e4:	38c03b26 	beq	r7,r3,20061d4 <_free_r+0x278>
 20060e8:	2a000317 	ldw	r8,12(r5)
 20060ec:	11400054 	ori	r5,r2,1
 20060f0:	3087883a 	add	r3,r6,r2
 20060f4:	3a000315 	stw	r8,12(r7)
 20060f8:	41c00215 	stw	r7,8(r8)
 20060fc:	31400115 	stw	r5,4(r6)
 2006100:	18800015 	stw	r2,0(r3)
 2006104:	003fbd06 	br	2005ffc <__alt_data_end+0xff005ffc>
 2006108:	39c0004c 	andi	r7,r7,1
 200610c:	10c5883a 	add	r2,r2,r3
 2006110:	3800071e 	bne	r7,zero,2006130 <_free_r+0x1d4>
 2006114:	81fffe17 	ldw	r7,-8(r16)
 2006118:	31cdc83a 	sub	r6,r6,r7
 200611c:	30c00317 	ldw	r3,12(r6)
 2006120:	31400217 	ldw	r5,8(r6)
 2006124:	11c5883a 	add	r2,r2,r7
 2006128:	28c00315 	stw	r3,12(r5)
 200612c:	19400215 	stw	r5,8(r3)
 2006130:	10c00054 	ori	r3,r2,1
 2006134:	30c00115 	stw	r3,4(r6)
 2006138:	00c08074 	movhi	r3,513
 200613c:	18cb6f04 	addi	r3,r3,11708
 2006140:	18c00017 	ldw	r3,0(r3)
 2006144:	21800215 	stw	r6,8(r4)
 2006148:	10ffc036 	bltu	r2,r3,200604c <__alt_data_end+0xff00604c>
 200614c:	00808074 	movhi	r2,513
 2006150:	10923c04 	addi	r2,r2,18672
 2006154:	11400017 	ldw	r5,0(r2)
 2006158:	8809883a 	mov	r4,r17
 200615c:	2005e380 	call	2005e38 <_malloc_trim_r>
 2006160:	003fba06 	br	200604c <__alt_data_end+0xff00604c>
 2006164:	28c9883a 	add	r4,r5,r3
 2006168:	21000117 	ldw	r4,4(r4)
 200616c:	2100004c 	andi	r4,r4,1
 2006170:	2000391e 	bne	r4,zero,2006258 <_free_r+0x2fc>
 2006174:	29c00217 	ldw	r7,8(r5)
 2006178:	29000317 	ldw	r4,12(r5)
 200617c:	1885883a 	add	r2,r3,r2
 2006180:	10c00054 	ori	r3,r2,1
 2006184:	39000315 	stw	r4,12(r7)
 2006188:	21c00215 	stw	r7,8(r4)
 200618c:	30c00115 	stw	r3,4(r6)
 2006190:	308d883a 	add	r6,r6,r2
 2006194:	30800015 	stw	r2,0(r6)
 2006198:	003fac06 	br	200604c <__alt_data_end+0xff00604c>
 200619c:	00c00504 	movi	r3,20
 20061a0:	19401536 	bltu	r3,r5,20061f8 <_free_r+0x29c>
 20061a4:	28c01704 	addi	r3,r5,92
 20061a8:	18c7883a 	add	r3,r3,r3
 20061ac:	294016c4 	addi	r5,r5,91
 20061b0:	003fb406 	br	2006084 <__alt_data_end+0xff006084>
 20061b4:	280bd0ba 	srai	r5,r5,2
 20061b8:	00c00044 	movi	r3,1
 20061bc:	38800117 	ldw	r2,4(r7)
 20061c0:	194a983a 	sll	r5,r3,r5
 20061c4:	2007883a 	mov	r3,r4
 20061c8:	2884b03a 	or	r2,r5,r2
 20061cc:	38800115 	stw	r2,4(r7)
 20061d0:	003fbb06 	br	20060c0 <__alt_data_end+0xff0060c0>
 20061d4:	21800515 	stw	r6,20(r4)
 20061d8:	21800415 	stw	r6,16(r4)
 20061dc:	10c00054 	ori	r3,r2,1
 20061e0:	31c00315 	stw	r7,12(r6)
 20061e4:	31c00215 	stw	r7,8(r6)
 20061e8:	30c00115 	stw	r3,4(r6)
 20061ec:	308d883a 	add	r6,r6,r2
 20061f0:	30800015 	stw	r2,0(r6)
 20061f4:	003f9506 	br	200604c <__alt_data_end+0xff00604c>
 20061f8:	00c01504 	movi	r3,84
 20061fc:	19400536 	bltu	r3,r5,2006214 <_free_r+0x2b8>
 2006200:	100ad33a 	srli	r5,r2,12
 2006204:	28c01bc4 	addi	r3,r5,111
 2006208:	18c7883a 	add	r3,r3,r3
 200620c:	29401b84 	addi	r5,r5,110
 2006210:	003f9c06 	br	2006084 <__alt_data_end+0xff006084>
 2006214:	00c05504 	movi	r3,340
 2006218:	19400536 	bltu	r3,r5,2006230 <_free_r+0x2d4>
 200621c:	100ad3fa 	srli	r5,r2,15
 2006220:	28c01e04 	addi	r3,r5,120
 2006224:	18c7883a 	add	r3,r3,r3
 2006228:	29401dc4 	addi	r5,r5,119
 200622c:	003f9506 	br	2006084 <__alt_data_end+0xff006084>
 2006230:	00c15504 	movi	r3,1364
 2006234:	19400536 	bltu	r3,r5,200624c <_free_r+0x2f0>
 2006238:	100ad4ba 	srli	r5,r2,18
 200623c:	28c01f44 	addi	r3,r5,125
 2006240:	18c7883a 	add	r3,r3,r3
 2006244:	29401f04 	addi	r5,r5,124
 2006248:	003f8e06 	br	2006084 <__alt_data_end+0xff006084>
 200624c:	00c03f84 	movi	r3,254
 2006250:	01401f84 	movi	r5,126
 2006254:	003f8b06 	br	2006084 <__alt_data_end+0xff006084>
 2006258:	10c00054 	ori	r3,r2,1
 200625c:	30c00115 	stw	r3,4(r6)
 2006260:	308d883a 	add	r6,r6,r2
 2006264:	30800015 	stw	r2,0(r6)
 2006268:	003f7806 	br	200604c <__alt_data_end+0xff00604c>

0200626c <__sfvwrite_r>:
 200626c:	30800217 	ldw	r2,8(r6)
 2006270:	10006726 	beq	r2,zero,2006410 <__sfvwrite_r+0x1a4>
 2006274:	28c0030b 	ldhu	r3,12(r5)
 2006278:	defff404 	addi	sp,sp,-48
 200627c:	dd400715 	stw	r21,28(sp)
 2006280:	dd000615 	stw	r20,24(sp)
 2006284:	dc000215 	stw	r16,8(sp)
 2006288:	dfc00b15 	stw	ra,44(sp)
 200628c:	df000a15 	stw	fp,40(sp)
 2006290:	ddc00915 	stw	r23,36(sp)
 2006294:	dd800815 	stw	r22,32(sp)
 2006298:	dcc00515 	stw	r19,20(sp)
 200629c:	dc800415 	stw	r18,16(sp)
 20062a0:	dc400315 	stw	r17,12(sp)
 20062a4:	1880020c 	andi	r2,r3,8
 20062a8:	2821883a 	mov	r16,r5
 20062ac:	202b883a 	mov	r21,r4
 20062b0:	3029883a 	mov	r20,r6
 20062b4:	10002726 	beq	r2,zero,2006354 <__sfvwrite_r+0xe8>
 20062b8:	28800417 	ldw	r2,16(r5)
 20062bc:	10002526 	beq	r2,zero,2006354 <__sfvwrite_r+0xe8>
 20062c0:	1880008c 	andi	r2,r3,2
 20062c4:	a4400017 	ldw	r17,0(r20)
 20062c8:	10002a26 	beq	r2,zero,2006374 <__sfvwrite_r+0x108>
 20062cc:	05a00034 	movhi	r22,32768
 20062d0:	0027883a 	mov	r19,zero
 20062d4:	0025883a 	mov	r18,zero
 20062d8:	b5bf0004 	addi	r22,r22,-1024
 20062dc:	980d883a 	mov	r6,r19
 20062e0:	a809883a 	mov	r4,r21
 20062e4:	90004626 	beq	r18,zero,2006400 <__sfvwrite_r+0x194>
 20062e8:	900f883a 	mov	r7,r18
 20062ec:	b480022e 	bgeu	r22,r18,20062f8 <__sfvwrite_r+0x8c>
 20062f0:	01e00034 	movhi	r7,32768
 20062f4:	39ff0004 	addi	r7,r7,-1024
 20062f8:	80800917 	ldw	r2,36(r16)
 20062fc:	81400717 	ldw	r5,28(r16)
 2006300:	103ee83a 	callr	r2
 2006304:	00805a0e 	bge	zero,r2,2006470 <__sfvwrite_r+0x204>
 2006308:	a0c00217 	ldw	r3,8(r20)
 200630c:	98a7883a 	add	r19,r19,r2
 2006310:	90a5c83a 	sub	r18,r18,r2
 2006314:	1885c83a 	sub	r2,r3,r2
 2006318:	a0800215 	stw	r2,8(r20)
 200631c:	103fef1e 	bne	r2,zero,20062dc <__alt_data_end+0xff0062dc>
 2006320:	0005883a 	mov	r2,zero
 2006324:	dfc00b17 	ldw	ra,44(sp)
 2006328:	df000a17 	ldw	fp,40(sp)
 200632c:	ddc00917 	ldw	r23,36(sp)
 2006330:	dd800817 	ldw	r22,32(sp)
 2006334:	dd400717 	ldw	r21,28(sp)
 2006338:	dd000617 	ldw	r20,24(sp)
 200633c:	dcc00517 	ldw	r19,20(sp)
 2006340:	dc800417 	ldw	r18,16(sp)
 2006344:	dc400317 	ldw	r17,12(sp)
 2006348:	dc000217 	ldw	r16,8(sp)
 200634c:	dec00c04 	addi	sp,sp,48
 2006350:	f800283a 	ret
 2006354:	800b883a 	mov	r5,r16
 2006358:	a809883a 	mov	r4,r21
 200635c:	2003ddc0 	call	2003ddc <__swsetup_r>
 2006360:	1000ee1e 	bne	r2,zero,200671c <__sfvwrite_r+0x4b0>
 2006364:	80c0030b 	ldhu	r3,12(r16)
 2006368:	a4400017 	ldw	r17,0(r20)
 200636c:	1880008c 	andi	r2,r3,2
 2006370:	103fd61e 	bne	r2,zero,20062cc <__alt_data_end+0xff0062cc>
 2006374:	1880004c 	andi	r2,r3,1
 2006378:	1000421e 	bne	r2,zero,2006484 <__sfvwrite_r+0x218>
 200637c:	0039883a 	mov	fp,zero
 2006380:	0025883a 	mov	r18,zero
 2006384:	90001a26 	beq	r18,zero,20063f0 <__sfvwrite_r+0x184>
 2006388:	1880800c 	andi	r2,r3,512
 200638c:	84c00217 	ldw	r19,8(r16)
 2006390:	10002126 	beq	r2,zero,2006418 <__sfvwrite_r+0x1ac>
 2006394:	982f883a 	mov	r23,r19
 2006398:	94c09636 	bltu	r18,r19,20065f4 <__sfvwrite_r+0x388>
 200639c:	1881200c 	andi	r2,r3,1152
 20063a0:	1000a11e 	bne	r2,zero,2006628 <__sfvwrite_r+0x3bc>
 20063a4:	81000017 	ldw	r4,0(r16)
 20063a8:	b80d883a 	mov	r6,r23
 20063ac:	e00b883a 	mov	r5,fp
 20063b0:	200758c0 	call	200758c <memmove>
 20063b4:	80c00217 	ldw	r3,8(r16)
 20063b8:	81000017 	ldw	r4,0(r16)
 20063bc:	9005883a 	mov	r2,r18
 20063c0:	1ce7c83a 	sub	r19,r3,r19
 20063c4:	25cf883a 	add	r7,r4,r23
 20063c8:	84c00215 	stw	r19,8(r16)
 20063cc:	81c00015 	stw	r7,0(r16)
 20063d0:	a0c00217 	ldw	r3,8(r20)
 20063d4:	e0b9883a 	add	fp,fp,r2
 20063d8:	90a5c83a 	sub	r18,r18,r2
 20063dc:	18a7c83a 	sub	r19,r3,r2
 20063e0:	a4c00215 	stw	r19,8(r20)
 20063e4:	983fce26 	beq	r19,zero,2006320 <__alt_data_end+0xff006320>
 20063e8:	80c0030b 	ldhu	r3,12(r16)
 20063ec:	903fe61e 	bne	r18,zero,2006388 <__alt_data_end+0xff006388>
 20063f0:	8f000017 	ldw	fp,0(r17)
 20063f4:	8c800117 	ldw	r18,4(r17)
 20063f8:	8c400204 	addi	r17,r17,8
 20063fc:	003fe106 	br	2006384 <__alt_data_end+0xff006384>
 2006400:	8cc00017 	ldw	r19,0(r17)
 2006404:	8c800117 	ldw	r18,4(r17)
 2006408:	8c400204 	addi	r17,r17,8
 200640c:	003fb306 	br	20062dc <__alt_data_end+0xff0062dc>
 2006410:	0005883a 	mov	r2,zero
 2006414:	f800283a 	ret
 2006418:	81000017 	ldw	r4,0(r16)
 200641c:	80800417 	ldw	r2,16(r16)
 2006420:	11005a36 	bltu	r2,r4,200658c <__sfvwrite_r+0x320>
 2006424:	85c00517 	ldw	r23,20(r16)
 2006428:	95c05836 	bltu	r18,r23,200658c <__sfvwrite_r+0x320>
 200642c:	00a00034 	movhi	r2,32768
 2006430:	10bfffc4 	addi	r2,r2,-1
 2006434:	9009883a 	mov	r4,r18
 2006438:	1480012e 	bgeu	r2,r18,2006440 <__sfvwrite_r+0x1d4>
 200643c:	1009883a 	mov	r4,r2
 2006440:	b80b883a 	mov	r5,r23
 2006444:	200bd100 	call	200bd10 <__divsi3>
 2006448:	b80b883a 	mov	r5,r23
 200644c:	1009883a 	mov	r4,r2
 2006450:	20018280 	call	2001828 <__mulsi3>
 2006454:	81400717 	ldw	r5,28(r16)
 2006458:	80c00917 	ldw	r3,36(r16)
 200645c:	100f883a 	mov	r7,r2
 2006460:	e00d883a 	mov	r6,fp
 2006464:	a809883a 	mov	r4,r21
 2006468:	183ee83a 	callr	r3
 200646c:	00bfd816 	blt	zero,r2,20063d0 <__alt_data_end+0xff0063d0>
 2006470:	8080030b 	ldhu	r2,12(r16)
 2006474:	10801014 	ori	r2,r2,64
 2006478:	8080030d 	sth	r2,12(r16)
 200647c:	00bfffc4 	movi	r2,-1
 2006480:	003fa806 	br	2006324 <__alt_data_end+0xff006324>
 2006484:	0027883a 	mov	r19,zero
 2006488:	0011883a 	mov	r8,zero
 200648c:	0039883a 	mov	fp,zero
 2006490:	0025883a 	mov	r18,zero
 2006494:	90001f26 	beq	r18,zero,2006514 <__sfvwrite_r+0x2a8>
 2006498:	40005a26 	beq	r8,zero,2006604 <__sfvwrite_r+0x398>
 200649c:	982d883a 	mov	r22,r19
 20064a0:	94c0012e 	bgeu	r18,r19,20064a8 <__sfvwrite_r+0x23c>
 20064a4:	902d883a 	mov	r22,r18
 20064a8:	81000017 	ldw	r4,0(r16)
 20064ac:	80800417 	ldw	r2,16(r16)
 20064b0:	b02f883a 	mov	r23,r22
 20064b4:	81c00517 	ldw	r7,20(r16)
 20064b8:	1100032e 	bgeu	r2,r4,20064c8 <__sfvwrite_r+0x25c>
 20064bc:	80c00217 	ldw	r3,8(r16)
 20064c0:	38c7883a 	add	r3,r7,r3
 20064c4:	1d801816 	blt	r3,r22,2006528 <__sfvwrite_r+0x2bc>
 20064c8:	b1c03e16 	blt	r22,r7,20065c4 <__sfvwrite_r+0x358>
 20064cc:	80800917 	ldw	r2,36(r16)
 20064d0:	81400717 	ldw	r5,28(r16)
 20064d4:	e00d883a 	mov	r6,fp
 20064d8:	da000115 	stw	r8,4(sp)
 20064dc:	a809883a 	mov	r4,r21
 20064e0:	103ee83a 	callr	r2
 20064e4:	102f883a 	mov	r23,r2
 20064e8:	da000117 	ldw	r8,4(sp)
 20064ec:	00bfe00e 	bge	zero,r2,2006470 <__alt_data_end+0xff006470>
 20064f0:	9de7c83a 	sub	r19,r19,r23
 20064f4:	98001f26 	beq	r19,zero,2006574 <__sfvwrite_r+0x308>
 20064f8:	a0800217 	ldw	r2,8(r20)
 20064fc:	e5f9883a 	add	fp,fp,r23
 2006500:	95e5c83a 	sub	r18,r18,r23
 2006504:	15efc83a 	sub	r23,r2,r23
 2006508:	a5c00215 	stw	r23,8(r20)
 200650c:	b83f8426 	beq	r23,zero,2006320 <__alt_data_end+0xff006320>
 2006510:	903fe11e 	bne	r18,zero,2006498 <__alt_data_end+0xff006498>
 2006514:	8f000017 	ldw	fp,0(r17)
 2006518:	8c800117 	ldw	r18,4(r17)
 200651c:	0011883a 	mov	r8,zero
 2006520:	8c400204 	addi	r17,r17,8
 2006524:	003fdb06 	br	2006494 <__alt_data_end+0xff006494>
 2006528:	180d883a 	mov	r6,r3
 200652c:	e00b883a 	mov	r5,fp
 2006530:	da000115 	stw	r8,4(sp)
 2006534:	d8c00015 	stw	r3,0(sp)
 2006538:	200758c0 	call	200758c <memmove>
 200653c:	d8c00017 	ldw	r3,0(sp)
 2006540:	80800017 	ldw	r2,0(r16)
 2006544:	800b883a 	mov	r5,r16
 2006548:	a809883a 	mov	r4,r21
 200654c:	10c5883a 	add	r2,r2,r3
 2006550:	80800015 	stw	r2,0(r16)
 2006554:	d8c00015 	stw	r3,0(sp)
 2006558:	20059fc0 	call	20059fc <_fflush_r>
 200655c:	d8c00017 	ldw	r3,0(sp)
 2006560:	da000117 	ldw	r8,4(sp)
 2006564:	103fc21e 	bne	r2,zero,2006470 <__alt_data_end+0xff006470>
 2006568:	182f883a 	mov	r23,r3
 200656c:	9de7c83a 	sub	r19,r19,r23
 2006570:	983fe11e 	bne	r19,zero,20064f8 <__alt_data_end+0xff0064f8>
 2006574:	800b883a 	mov	r5,r16
 2006578:	a809883a 	mov	r4,r21
 200657c:	20059fc0 	call	20059fc <_fflush_r>
 2006580:	103fbb1e 	bne	r2,zero,2006470 <__alt_data_end+0xff006470>
 2006584:	0011883a 	mov	r8,zero
 2006588:	003fdb06 	br	20064f8 <__alt_data_end+0xff0064f8>
 200658c:	94c0012e 	bgeu	r18,r19,2006594 <__sfvwrite_r+0x328>
 2006590:	9027883a 	mov	r19,r18
 2006594:	980d883a 	mov	r6,r19
 2006598:	e00b883a 	mov	r5,fp
 200659c:	200758c0 	call	200758c <memmove>
 20065a0:	80800217 	ldw	r2,8(r16)
 20065a4:	80c00017 	ldw	r3,0(r16)
 20065a8:	14c5c83a 	sub	r2,r2,r19
 20065ac:	1cc7883a 	add	r3,r3,r19
 20065b0:	80800215 	stw	r2,8(r16)
 20065b4:	80c00015 	stw	r3,0(r16)
 20065b8:	10004326 	beq	r2,zero,20066c8 <__sfvwrite_r+0x45c>
 20065bc:	9805883a 	mov	r2,r19
 20065c0:	003f8306 	br	20063d0 <__alt_data_end+0xff0063d0>
 20065c4:	b00d883a 	mov	r6,r22
 20065c8:	e00b883a 	mov	r5,fp
 20065cc:	da000115 	stw	r8,4(sp)
 20065d0:	200758c0 	call	200758c <memmove>
 20065d4:	80800217 	ldw	r2,8(r16)
 20065d8:	80c00017 	ldw	r3,0(r16)
 20065dc:	da000117 	ldw	r8,4(sp)
 20065e0:	1585c83a 	sub	r2,r2,r22
 20065e4:	1dad883a 	add	r22,r3,r22
 20065e8:	80800215 	stw	r2,8(r16)
 20065ec:	85800015 	stw	r22,0(r16)
 20065f0:	003fbf06 	br	20064f0 <__alt_data_end+0xff0064f0>
 20065f4:	81000017 	ldw	r4,0(r16)
 20065f8:	9027883a 	mov	r19,r18
 20065fc:	902f883a 	mov	r23,r18
 2006600:	003f6906 	br	20063a8 <__alt_data_end+0xff0063a8>
 2006604:	900d883a 	mov	r6,r18
 2006608:	01400284 	movi	r5,10
 200660c:	e009883a 	mov	r4,fp
 2006610:	20073600 	call	2007360 <memchr>
 2006614:	10003e26 	beq	r2,zero,2006710 <__sfvwrite_r+0x4a4>
 2006618:	10800044 	addi	r2,r2,1
 200661c:	1727c83a 	sub	r19,r2,fp
 2006620:	02000044 	movi	r8,1
 2006624:	003f9d06 	br	200649c <__alt_data_end+0xff00649c>
 2006628:	80800517 	ldw	r2,20(r16)
 200662c:	81400417 	ldw	r5,16(r16)
 2006630:	81c00017 	ldw	r7,0(r16)
 2006634:	10a7883a 	add	r19,r2,r2
 2006638:	9885883a 	add	r2,r19,r2
 200663c:	1026d7fa 	srli	r19,r2,31
 2006640:	396dc83a 	sub	r22,r7,r5
 2006644:	b1000044 	addi	r4,r22,1
 2006648:	9885883a 	add	r2,r19,r2
 200664c:	1027d07a 	srai	r19,r2,1
 2006650:	2485883a 	add	r2,r4,r18
 2006654:	980d883a 	mov	r6,r19
 2006658:	9880022e 	bgeu	r19,r2,2006664 <__sfvwrite_r+0x3f8>
 200665c:	1027883a 	mov	r19,r2
 2006660:	100d883a 	mov	r6,r2
 2006664:	18c1000c 	andi	r3,r3,1024
 2006668:	18001c26 	beq	r3,zero,20066dc <__sfvwrite_r+0x470>
 200666c:	300b883a 	mov	r5,r6
 2006670:	a809883a 	mov	r4,r21
 2006674:	2006b540 	call	2006b54 <_malloc_r>
 2006678:	102f883a 	mov	r23,r2
 200667c:	10002926 	beq	r2,zero,2006724 <__sfvwrite_r+0x4b8>
 2006680:	81400417 	ldw	r5,16(r16)
 2006684:	b00d883a 	mov	r6,r22
 2006688:	1009883a 	mov	r4,r2
 200668c:	20074440 	call	2007444 <memcpy>
 2006690:	8080030b 	ldhu	r2,12(r16)
 2006694:	00fedfc4 	movi	r3,-1153
 2006698:	10c4703a 	and	r2,r2,r3
 200669c:	10802014 	ori	r2,r2,128
 20066a0:	8080030d 	sth	r2,12(r16)
 20066a4:	bd89883a 	add	r4,r23,r22
 20066a8:	9d8fc83a 	sub	r7,r19,r22
 20066ac:	85c00415 	stw	r23,16(r16)
 20066b0:	84c00515 	stw	r19,20(r16)
 20066b4:	81000015 	stw	r4,0(r16)
 20066b8:	9027883a 	mov	r19,r18
 20066bc:	81c00215 	stw	r7,8(r16)
 20066c0:	902f883a 	mov	r23,r18
 20066c4:	003f3806 	br	20063a8 <__alt_data_end+0xff0063a8>
 20066c8:	800b883a 	mov	r5,r16
 20066cc:	a809883a 	mov	r4,r21
 20066d0:	20059fc0 	call	20059fc <_fflush_r>
 20066d4:	103fb926 	beq	r2,zero,20065bc <__alt_data_end+0xff0065bc>
 20066d8:	003f6506 	br	2006470 <__alt_data_end+0xff006470>
 20066dc:	a809883a 	mov	r4,r21
 20066e0:	20088c80 	call	20088c8 <_realloc_r>
 20066e4:	102f883a 	mov	r23,r2
 20066e8:	103fee1e 	bne	r2,zero,20066a4 <__alt_data_end+0xff0066a4>
 20066ec:	81400417 	ldw	r5,16(r16)
 20066f0:	a809883a 	mov	r4,r21
 20066f4:	2005f5c0 	call	2005f5c <_free_r>
 20066f8:	8080030b 	ldhu	r2,12(r16)
 20066fc:	00ffdfc4 	movi	r3,-129
 2006700:	1884703a 	and	r2,r3,r2
 2006704:	00c00304 	movi	r3,12
 2006708:	a8c00015 	stw	r3,0(r21)
 200670c:	003f5906 	br	2006474 <__alt_data_end+0xff006474>
 2006710:	94c00044 	addi	r19,r18,1
 2006714:	02000044 	movi	r8,1
 2006718:	003f6006 	br	200649c <__alt_data_end+0xff00649c>
 200671c:	00bfffc4 	movi	r2,-1
 2006720:	003f0006 	br	2006324 <__alt_data_end+0xff006324>
 2006724:	00800304 	movi	r2,12
 2006728:	a8800015 	stw	r2,0(r21)
 200672c:	8080030b 	ldhu	r2,12(r16)
 2006730:	003f5006 	br	2006474 <__alt_data_end+0xff006474>

02006734 <_fwalk>:
 2006734:	defff704 	addi	sp,sp,-36
 2006738:	dd000415 	stw	r20,16(sp)
 200673c:	dfc00815 	stw	ra,32(sp)
 2006740:	ddc00715 	stw	r23,28(sp)
 2006744:	dd800615 	stw	r22,24(sp)
 2006748:	dd400515 	stw	r21,20(sp)
 200674c:	dcc00315 	stw	r19,12(sp)
 2006750:	dc800215 	stw	r18,8(sp)
 2006754:	dc400115 	stw	r17,4(sp)
 2006758:	dc000015 	stw	r16,0(sp)
 200675c:	2500b804 	addi	r20,r4,736
 2006760:	a0002326 	beq	r20,zero,20067f0 <_fwalk+0xbc>
 2006764:	282b883a 	mov	r21,r5
 2006768:	002f883a 	mov	r23,zero
 200676c:	05800044 	movi	r22,1
 2006770:	04ffffc4 	movi	r19,-1
 2006774:	a4400117 	ldw	r17,4(r20)
 2006778:	a4800217 	ldw	r18,8(r20)
 200677c:	8c7fffc4 	addi	r17,r17,-1
 2006780:	88000d16 	blt	r17,zero,20067b8 <_fwalk+0x84>
 2006784:	94000304 	addi	r16,r18,12
 2006788:	94800384 	addi	r18,r18,14
 200678c:	8080000b 	ldhu	r2,0(r16)
 2006790:	8c7fffc4 	addi	r17,r17,-1
 2006794:	813ffd04 	addi	r4,r16,-12
 2006798:	b080042e 	bgeu	r22,r2,20067ac <_fwalk+0x78>
 200679c:	9080000f 	ldh	r2,0(r18)
 20067a0:	14c00226 	beq	r2,r19,20067ac <_fwalk+0x78>
 20067a4:	a83ee83a 	callr	r21
 20067a8:	b8aeb03a 	or	r23,r23,r2
 20067ac:	84001a04 	addi	r16,r16,104
 20067b0:	94801a04 	addi	r18,r18,104
 20067b4:	8cfff51e 	bne	r17,r19,200678c <__alt_data_end+0xff00678c>
 20067b8:	a5000017 	ldw	r20,0(r20)
 20067bc:	a03fed1e 	bne	r20,zero,2006774 <__alt_data_end+0xff006774>
 20067c0:	b805883a 	mov	r2,r23
 20067c4:	dfc00817 	ldw	ra,32(sp)
 20067c8:	ddc00717 	ldw	r23,28(sp)
 20067cc:	dd800617 	ldw	r22,24(sp)
 20067d0:	dd400517 	ldw	r21,20(sp)
 20067d4:	dd000417 	ldw	r20,16(sp)
 20067d8:	dcc00317 	ldw	r19,12(sp)
 20067dc:	dc800217 	ldw	r18,8(sp)
 20067e0:	dc400117 	ldw	r17,4(sp)
 20067e4:	dc000017 	ldw	r16,0(sp)
 20067e8:	dec00904 	addi	sp,sp,36
 20067ec:	f800283a 	ret
 20067f0:	002f883a 	mov	r23,zero
 20067f4:	003ff206 	br	20067c0 <__alt_data_end+0xff0067c0>

020067f8 <_fwalk_reent>:
 20067f8:	defff704 	addi	sp,sp,-36
 20067fc:	dd000415 	stw	r20,16(sp)
 2006800:	dfc00815 	stw	ra,32(sp)
 2006804:	ddc00715 	stw	r23,28(sp)
 2006808:	dd800615 	stw	r22,24(sp)
 200680c:	dd400515 	stw	r21,20(sp)
 2006810:	dcc00315 	stw	r19,12(sp)
 2006814:	dc800215 	stw	r18,8(sp)
 2006818:	dc400115 	stw	r17,4(sp)
 200681c:	dc000015 	stw	r16,0(sp)
 2006820:	2500b804 	addi	r20,r4,736
 2006824:	a0002326 	beq	r20,zero,20068b4 <_fwalk_reent+0xbc>
 2006828:	282b883a 	mov	r21,r5
 200682c:	2027883a 	mov	r19,r4
 2006830:	002f883a 	mov	r23,zero
 2006834:	05800044 	movi	r22,1
 2006838:	04bfffc4 	movi	r18,-1
 200683c:	a4400117 	ldw	r17,4(r20)
 2006840:	a4000217 	ldw	r16,8(r20)
 2006844:	8c7fffc4 	addi	r17,r17,-1
 2006848:	88000c16 	blt	r17,zero,200687c <_fwalk_reent+0x84>
 200684c:	84000304 	addi	r16,r16,12
 2006850:	8080000b 	ldhu	r2,0(r16)
 2006854:	8c7fffc4 	addi	r17,r17,-1
 2006858:	817ffd04 	addi	r5,r16,-12
 200685c:	b080052e 	bgeu	r22,r2,2006874 <_fwalk_reent+0x7c>
 2006860:	8080008f 	ldh	r2,2(r16)
 2006864:	9809883a 	mov	r4,r19
 2006868:	14800226 	beq	r2,r18,2006874 <_fwalk_reent+0x7c>
 200686c:	a83ee83a 	callr	r21
 2006870:	b8aeb03a 	or	r23,r23,r2
 2006874:	84001a04 	addi	r16,r16,104
 2006878:	8cbff51e 	bne	r17,r18,2006850 <__alt_data_end+0xff006850>
 200687c:	a5000017 	ldw	r20,0(r20)
 2006880:	a03fee1e 	bne	r20,zero,200683c <__alt_data_end+0xff00683c>
 2006884:	b805883a 	mov	r2,r23
 2006888:	dfc00817 	ldw	ra,32(sp)
 200688c:	ddc00717 	ldw	r23,28(sp)
 2006890:	dd800617 	ldw	r22,24(sp)
 2006894:	dd400517 	ldw	r21,20(sp)
 2006898:	dd000417 	ldw	r20,16(sp)
 200689c:	dcc00317 	ldw	r19,12(sp)
 20068a0:	dc800217 	ldw	r18,8(sp)
 20068a4:	dc400117 	ldw	r17,4(sp)
 20068a8:	dc000017 	ldw	r16,0(sp)
 20068ac:	dec00904 	addi	sp,sp,36
 20068b0:	f800283a 	ret
 20068b4:	002f883a 	mov	r23,zero
 20068b8:	003ff206 	br	2006884 <__alt_data_end+0xff006884>

020068bc <_setlocale_r>:
 20068bc:	30001b26 	beq	r6,zero,200692c <_setlocale_r+0x70>
 20068c0:	01408074 	movhi	r5,513
 20068c4:	defffe04 	addi	sp,sp,-8
 20068c8:	29441f04 	addi	r5,r5,4220
 20068cc:	3009883a 	mov	r4,r6
 20068d0:	dc000015 	stw	r16,0(sp)
 20068d4:	dfc00115 	stw	ra,4(sp)
 20068d8:	3021883a 	mov	r16,r6
 20068dc:	20090300 	call	2009030 <strcmp>
 20068e0:	1000061e 	bne	r2,zero,20068fc <_setlocale_r+0x40>
 20068e4:	00808074 	movhi	r2,513
 20068e8:	10841e04 	addi	r2,r2,4216
 20068ec:	dfc00117 	ldw	ra,4(sp)
 20068f0:	dc000017 	ldw	r16,0(sp)
 20068f4:	dec00204 	addi	sp,sp,8
 20068f8:	f800283a 	ret
 20068fc:	01408074 	movhi	r5,513
 2006900:	29441e04 	addi	r5,r5,4216
 2006904:	8009883a 	mov	r4,r16
 2006908:	20090300 	call	2009030 <strcmp>
 200690c:	103ff526 	beq	r2,zero,20068e4 <__alt_data_end+0xff0068e4>
 2006910:	01408074 	movhi	r5,513
 2006914:	29440904 	addi	r5,r5,4132
 2006918:	8009883a 	mov	r4,r16
 200691c:	20090300 	call	2009030 <strcmp>
 2006920:	103ff026 	beq	r2,zero,20068e4 <__alt_data_end+0xff0068e4>
 2006924:	0005883a 	mov	r2,zero
 2006928:	003ff006 	br	20068ec <__alt_data_end+0xff0068ec>
 200692c:	00808074 	movhi	r2,513
 2006930:	10841e04 	addi	r2,r2,4216
 2006934:	f800283a 	ret

02006938 <__locale_charset>:
 2006938:	00808074 	movhi	r2,513
 200693c:	1085d104 	addi	r2,r2,5956
 2006940:	f800283a 	ret

02006944 <__locale_mb_cur_max>:
 2006944:	00808074 	movhi	r2,513
 2006948:	108b6d04 	addi	r2,r2,11700
 200694c:	10800017 	ldw	r2,0(r2)
 2006950:	f800283a 	ret

02006954 <__locale_msgcharset>:
 2006954:	00808074 	movhi	r2,513
 2006958:	1085c904 	addi	r2,r2,5924
 200695c:	f800283a 	ret

02006960 <__locale_cjk_lang>:
 2006960:	0005883a 	mov	r2,zero
 2006964:	f800283a 	ret

02006968 <_localeconv_r>:
 2006968:	00808074 	movhi	r2,513
 200696c:	1085d904 	addi	r2,r2,5988
 2006970:	f800283a 	ret

02006974 <setlocale>:
 2006974:	00808074 	movhi	r2,513
 2006978:	108b6c04 	addi	r2,r2,11696
 200697c:	280d883a 	mov	r6,r5
 2006980:	200b883a 	mov	r5,r4
 2006984:	11000017 	ldw	r4,0(r2)
 2006988:	20068bc1 	jmpi	20068bc <_setlocale_r>

0200698c <localeconv>:
 200698c:	00808074 	movhi	r2,513
 2006990:	1085d904 	addi	r2,r2,5988
 2006994:	f800283a 	ret

02006998 <__smakebuf_r>:
 2006998:	2880030b 	ldhu	r2,12(r5)
 200699c:	10c0008c 	andi	r3,r2,2
 20069a0:	1800411e 	bne	r3,zero,2006aa8 <__smakebuf_r+0x110>
 20069a4:	deffec04 	addi	sp,sp,-80
 20069a8:	dc000f15 	stw	r16,60(sp)
 20069ac:	2821883a 	mov	r16,r5
 20069b0:	2940038f 	ldh	r5,14(r5)
 20069b4:	dc401015 	stw	r17,64(sp)
 20069b8:	dfc01315 	stw	ra,76(sp)
 20069bc:	dcc01215 	stw	r19,72(sp)
 20069c0:	dc801115 	stw	r18,68(sp)
 20069c4:	2023883a 	mov	r17,r4
 20069c8:	28001c16 	blt	r5,zero,2006a3c <__smakebuf_r+0xa4>
 20069cc:	d80d883a 	mov	r6,sp
 20069d0:	200aca00 	call	200aca0 <_fstat_r>
 20069d4:	10001816 	blt	r2,zero,2006a38 <__smakebuf_r+0xa0>
 20069d8:	d8800117 	ldw	r2,4(sp)
 20069dc:	00e00014 	movui	r3,32768
 20069e0:	10bc000c 	andi	r2,r2,61440
 20069e4:	14c80020 	cmpeqi	r19,r2,8192
 20069e8:	10c03726 	beq	r2,r3,2006ac8 <__smakebuf_r+0x130>
 20069ec:	80c0030b 	ldhu	r3,12(r16)
 20069f0:	18c20014 	ori	r3,r3,2048
 20069f4:	80c0030d 	sth	r3,12(r16)
 20069f8:	00c80004 	movi	r3,8192
 20069fc:	10c0521e 	bne	r2,r3,2006b48 <__smakebuf_r+0x1b0>
 2006a00:	8140038f 	ldh	r5,14(r16)
 2006a04:	8809883a 	mov	r4,r17
 2006a08:	200acfc0 	call	200acfc <_isatty_r>
 2006a0c:	10004c26 	beq	r2,zero,2006b40 <__smakebuf_r+0x1a8>
 2006a10:	8080030b 	ldhu	r2,12(r16)
 2006a14:	80c010c4 	addi	r3,r16,67
 2006a18:	80c00015 	stw	r3,0(r16)
 2006a1c:	10800054 	ori	r2,r2,1
 2006a20:	8080030d 	sth	r2,12(r16)
 2006a24:	00800044 	movi	r2,1
 2006a28:	80c00415 	stw	r3,16(r16)
 2006a2c:	80800515 	stw	r2,20(r16)
 2006a30:	04810004 	movi	r18,1024
 2006a34:	00000706 	br	2006a54 <__smakebuf_r+0xbc>
 2006a38:	8080030b 	ldhu	r2,12(r16)
 2006a3c:	10c0200c 	andi	r3,r2,128
 2006a40:	18001f1e 	bne	r3,zero,2006ac0 <__smakebuf_r+0x128>
 2006a44:	04810004 	movi	r18,1024
 2006a48:	10820014 	ori	r2,r2,2048
 2006a4c:	8080030d 	sth	r2,12(r16)
 2006a50:	0027883a 	mov	r19,zero
 2006a54:	900b883a 	mov	r5,r18
 2006a58:	8809883a 	mov	r4,r17
 2006a5c:	2006b540 	call	2006b54 <_malloc_r>
 2006a60:	10002c26 	beq	r2,zero,2006b14 <__smakebuf_r+0x17c>
 2006a64:	80c0030b 	ldhu	r3,12(r16)
 2006a68:	01008034 	movhi	r4,512
 2006a6c:	2116a404 	addi	r4,r4,23184
 2006a70:	89000f15 	stw	r4,60(r17)
 2006a74:	18c02014 	ori	r3,r3,128
 2006a78:	80c0030d 	sth	r3,12(r16)
 2006a7c:	80800015 	stw	r2,0(r16)
 2006a80:	80800415 	stw	r2,16(r16)
 2006a84:	84800515 	stw	r18,20(r16)
 2006a88:	98001a1e 	bne	r19,zero,2006af4 <__smakebuf_r+0x15c>
 2006a8c:	dfc01317 	ldw	ra,76(sp)
 2006a90:	dcc01217 	ldw	r19,72(sp)
 2006a94:	dc801117 	ldw	r18,68(sp)
 2006a98:	dc401017 	ldw	r17,64(sp)
 2006a9c:	dc000f17 	ldw	r16,60(sp)
 2006aa0:	dec01404 	addi	sp,sp,80
 2006aa4:	f800283a 	ret
 2006aa8:	288010c4 	addi	r2,r5,67
 2006aac:	28800015 	stw	r2,0(r5)
 2006ab0:	28800415 	stw	r2,16(r5)
 2006ab4:	00800044 	movi	r2,1
 2006ab8:	28800515 	stw	r2,20(r5)
 2006abc:	f800283a 	ret
 2006ac0:	04801004 	movi	r18,64
 2006ac4:	003fe006 	br	2006a48 <__alt_data_end+0xff006a48>
 2006ac8:	81000a17 	ldw	r4,40(r16)
 2006acc:	00c08074 	movhi	r3,513
 2006ad0:	18e3f304 	addi	r3,r3,-28724
 2006ad4:	20ffc51e 	bne	r4,r3,20069ec <__alt_data_end+0xff0069ec>
 2006ad8:	8080030b 	ldhu	r2,12(r16)
 2006adc:	04810004 	movi	r18,1024
 2006ae0:	84801315 	stw	r18,76(r16)
 2006ae4:	1484b03a 	or	r2,r2,r18
 2006ae8:	8080030d 	sth	r2,12(r16)
 2006aec:	0027883a 	mov	r19,zero
 2006af0:	003fd806 	br	2006a54 <__alt_data_end+0xff006a54>
 2006af4:	8140038f 	ldh	r5,14(r16)
 2006af8:	8809883a 	mov	r4,r17
 2006afc:	200acfc0 	call	200acfc <_isatty_r>
 2006b00:	103fe226 	beq	r2,zero,2006a8c <__alt_data_end+0xff006a8c>
 2006b04:	8080030b 	ldhu	r2,12(r16)
 2006b08:	10800054 	ori	r2,r2,1
 2006b0c:	8080030d 	sth	r2,12(r16)
 2006b10:	003fde06 	br	2006a8c <__alt_data_end+0xff006a8c>
 2006b14:	8080030b 	ldhu	r2,12(r16)
 2006b18:	10c0800c 	andi	r3,r2,512
 2006b1c:	183fdb1e 	bne	r3,zero,2006a8c <__alt_data_end+0xff006a8c>
 2006b20:	10800094 	ori	r2,r2,2
 2006b24:	80c010c4 	addi	r3,r16,67
 2006b28:	8080030d 	sth	r2,12(r16)
 2006b2c:	00800044 	movi	r2,1
 2006b30:	80c00015 	stw	r3,0(r16)
 2006b34:	80c00415 	stw	r3,16(r16)
 2006b38:	80800515 	stw	r2,20(r16)
 2006b3c:	003fd306 	br	2006a8c <__alt_data_end+0xff006a8c>
 2006b40:	04810004 	movi	r18,1024
 2006b44:	003fc306 	br	2006a54 <__alt_data_end+0xff006a54>
 2006b48:	0027883a 	mov	r19,zero
 2006b4c:	04810004 	movi	r18,1024
 2006b50:	003fc006 	br	2006a54 <__alt_data_end+0xff006a54>

02006b54 <_malloc_r>:
 2006b54:	defff504 	addi	sp,sp,-44
 2006b58:	dc800315 	stw	r18,12(sp)
 2006b5c:	dfc00a15 	stw	ra,40(sp)
 2006b60:	df000915 	stw	fp,36(sp)
 2006b64:	ddc00815 	stw	r23,32(sp)
 2006b68:	dd800715 	stw	r22,28(sp)
 2006b6c:	dd400615 	stw	r21,24(sp)
 2006b70:	dd000515 	stw	r20,20(sp)
 2006b74:	dcc00415 	stw	r19,16(sp)
 2006b78:	dc400215 	stw	r17,8(sp)
 2006b7c:	dc000115 	stw	r16,4(sp)
 2006b80:	288002c4 	addi	r2,r5,11
 2006b84:	00c00584 	movi	r3,22
 2006b88:	2025883a 	mov	r18,r4
 2006b8c:	18807f2e 	bgeu	r3,r2,2006d8c <_malloc_r+0x238>
 2006b90:	047ffe04 	movi	r17,-8
 2006b94:	1462703a 	and	r17,r2,r17
 2006b98:	8800a316 	blt	r17,zero,2006e28 <_malloc_r+0x2d4>
 2006b9c:	8940a236 	bltu	r17,r5,2006e28 <_malloc_r+0x2d4>
 2006ba0:	200ed040 	call	200ed04 <__malloc_lock>
 2006ba4:	00807dc4 	movi	r2,503
 2006ba8:	1441e92e 	bgeu	r2,r17,2007350 <_malloc_r+0x7fc>
 2006bac:	8804d27a 	srli	r2,r17,9
 2006bb0:	1000a126 	beq	r2,zero,2006e38 <_malloc_r+0x2e4>
 2006bb4:	00c00104 	movi	r3,4
 2006bb8:	18811e36 	bltu	r3,r2,2007034 <_malloc_r+0x4e0>
 2006bbc:	8804d1ba 	srli	r2,r17,6
 2006bc0:	12000e44 	addi	r8,r2,57
 2006bc4:	11c00e04 	addi	r7,r2,56
 2006bc8:	4209883a 	add	r4,r8,r8
 2006bcc:	04c08074 	movhi	r19,513
 2006bd0:	2109883a 	add	r4,r4,r4
 2006bd4:	9cc5e704 	addi	r19,r19,6044
 2006bd8:	2109883a 	add	r4,r4,r4
 2006bdc:	9909883a 	add	r4,r19,r4
 2006be0:	24000117 	ldw	r16,4(r4)
 2006be4:	213ffe04 	addi	r4,r4,-8
 2006be8:	24009726 	beq	r4,r16,2006e48 <_malloc_r+0x2f4>
 2006bec:	80800117 	ldw	r2,4(r16)
 2006bf0:	01bfff04 	movi	r6,-4
 2006bf4:	014003c4 	movi	r5,15
 2006bf8:	1184703a 	and	r2,r2,r6
 2006bfc:	1447c83a 	sub	r3,r2,r17
 2006c00:	28c00716 	blt	r5,r3,2006c20 <_malloc_r+0xcc>
 2006c04:	1800920e 	bge	r3,zero,2006e50 <_malloc_r+0x2fc>
 2006c08:	84000317 	ldw	r16,12(r16)
 2006c0c:	24008e26 	beq	r4,r16,2006e48 <_malloc_r+0x2f4>
 2006c10:	80800117 	ldw	r2,4(r16)
 2006c14:	1184703a 	and	r2,r2,r6
 2006c18:	1447c83a 	sub	r3,r2,r17
 2006c1c:	28fff90e 	bge	r5,r3,2006c04 <__alt_data_end+0xff006c04>
 2006c20:	3809883a 	mov	r4,r7
 2006c24:	01808074 	movhi	r6,513
 2006c28:	9c000417 	ldw	r16,16(r19)
 2006c2c:	3185e704 	addi	r6,r6,6044
 2006c30:	32000204 	addi	r8,r6,8
 2006c34:	82013426 	beq	r16,r8,2007108 <_malloc_r+0x5b4>
 2006c38:	80c00117 	ldw	r3,4(r16)
 2006c3c:	00bfff04 	movi	r2,-4
 2006c40:	188e703a 	and	r7,r3,r2
 2006c44:	3c45c83a 	sub	r2,r7,r17
 2006c48:	00c003c4 	movi	r3,15
 2006c4c:	18811f16 	blt	r3,r2,20070cc <_malloc_r+0x578>
 2006c50:	32000515 	stw	r8,20(r6)
 2006c54:	32000415 	stw	r8,16(r6)
 2006c58:	10007f0e 	bge	r2,zero,2006e58 <_malloc_r+0x304>
 2006c5c:	00807fc4 	movi	r2,511
 2006c60:	11c0fd36 	bltu	r2,r7,2007058 <_malloc_r+0x504>
 2006c64:	3806d0fa 	srli	r3,r7,3
 2006c68:	01c00044 	movi	r7,1
 2006c6c:	30800117 	ldw	r2,4(r6)
 2006c70:	19400044 	addi	r5,r3,1
 2006c74:	294b883a 	add	r5,r5,r5
 2006c78:	1807d0ba 	srai	r3,r3,2
 2006c7c:	294b883a 	add	r5,r5,r5
 2006c80:	294b883a 	add	r5,r5,r5
 2006c84:	298b883a 	add	r5,r5,r6
 2006c88:	38c6983a 	sll	r3,r7,r3
 2006c8c:	29c00017 	ldw	r7,0(r5)
 2006c90:	2a7ffe04 	addi	r9,r5,-8
 2006c94:	1886b03a 	or	r3,r3,r2
 2006c98:	82400315 	stw	r9,12(r16)
 2006c9c:	81c00215 	stw	r7,8(r16)
 2006ca0:	30c00115 	stw	r3,4(r6)
 2006ca4:	2c000015 	stw	r16,0(r5)
 2006ca8:	3c000315 	stw	r16,12(r7)
 2006cac:	2005d0ba 	srai	r2,r4,2
 2006cb0:	01400044 	movi	r5,1
 2006cb4:	288a983a 	sll	r5,r5,r2
 2006cb8:	19406f36 	bltu	r3,r5,2006e78 <_malloc_r+0x324>
 2006cbc:	28c4703a 	and	r2,r5,r3
 2006cc0:	10000a1e 	bne	r2,zero,2006cec <_malloc_r+0x198>
 2006cc4:	00bfff04 	movi	r2,-4
 2006cc8:	294b883a 	add	r5,r5,r5
 2006ccc:	2088703a 	and	r4,r4,r2
 2006cd0:	28c4703a 	and	r2,r5,r3
 2006cd4:	21000104 	addi	r4,r4,4
 2006cd8:	1000041e 	bne	r2,zero,2006cec <_malloc_r+0x198>
 2006cdc:	294b883a 	add	r5,r5,r5
 2006ce0:	28c4703a 	and	r2,r5,r3
 2006ce4:	21000104 	addi	r4,r4,4
 2006ce8:	103ffc26 	beq	r2,zero,2006cdc <__alt_data_end+0xff006cdc>
 2006cec:	02bfff04 	movi	r10,-4
 2006cf0:	024003c4 	movi	r9,15
 2006cf4:	21800044 	addi	r6,r4,1
 2006cf8:	318d883a 	add	r6,r6,r6
 2006cfc:	318d883a 	add	r6,r6,r6
 2006d00:	318d883a 	add	r6,r6,r6
 2006d04:	998d883a 	add	r6,r19,r6
 2006d08:	333ffe04 	addi	r12,r6,-8
 2006d0c:	2017883a 	mov	r11,r4
 2006d10:	31800104 	addi	r6,r6,4
 2006d14:	34000017 	ldw	r16,0(r6)
 2006d18:	31fffd04 	addi	r7,r6,-12
 2006d1c:	81c0041e 	bne	r16,r7,2006d30 <_malloc_r+0x1dc>
 2006d20:	0000fb06 	br	2007110 <_malloc_r+0x5bc>
 2006d24:	1801030e 	bge	r3,zero,2007134 <_malloc_r+0x5e0>
 2006d28:	84000317 	ldw	r16,12(r16)
 2006d2c:	81c0f826 	beq	r16,r7,2007110 <_malloc_r+0x5bc>
 2006d30:	80800117 	ldw	r2,4(r16)
 2006d34:	1284703a 	and	r2,r2,r10
 2006d38:	1447c83a 	sub	r3,r2,r17
 2006d3c:	48fff90e 	bge	r9,r3,2006d24 <__alt_data_end+0xff006d24>
 2006d40:	80800317 	ldw	r2,12(r16)
 2006d44:	81000217 	ldw	r4,8(r16)
 2006d48:	89400054 	ori	r5,r17,1
 2006d4c:	81400115 	stw	r5,4(r16)
 2006d50:	20800315 	stw	r2,12(r4)
 2006d54:	11000215 	stw	r4,8(r2)
 2006d58:	8463883a 	add	r17,r16,r17
 2006d5c:	9c400515 	stw	r17,20(r19)
 2006d60:	9c400415 	stw	r17,16(r19)
 2006d64:	18800054 	ori	r2,r3,1
 2006d68:	88800115 	stw	r2,4(r17)
 2006d6c:	8a000315 	stw	r8,12(r17)
 2006d70:	8a000215 	stw	r8,8(r17)
 2006d74:	88e3883a 	add	r17,r17,r3
 2006d78:	88c00015 	stw	r3,0(r17)
 2006d7c:	9009883a 	mov	r4,r18
 2006d80:	200ed280 	call	200ed28 <__malloc_unlock>
 2006d84:	80800204 	addi	r2,r16,8
 2006d88:	00001b06 	br	2006df8 <_malloc_r+0x2a4>
 2006d8c:	04400404 	movi	r17,16
 2006d90:	89402536 	bltu	r17,r5,2006e28 <_malloc_r+0x2d4>
 2006d94:	200ed040 	call	200ed04 <__malloc_lock>
 2006d98:	00800184 	movi	r2,6
 2006d9c:	01000084 	movi	r4,2
 2006da0:	04c08074 	movhi	r19,513
 2006da4:	1085883a 	add	r2,r2,r2
 2006da8:	9cc5e704 	addi	r19,r19,6044
 2006dac:	1085883a 	add	r2,r2,r2
 2006db0:	9885883a 	add	r2,r19,r2
 2006db4:	14000117 	ldw	r16,4(r2)
 2006db8:	10fffe04 	addi	r3,r2,-8
 2006dbc:	80c0d926 	beq	r16,r3,2007124 <_malloc_r+0x5d0>
 2006dc0:	80c00117 	ldw	r3,4(r16)
 2006dc4:	81000317 	ldw	r4,12(r16)
 2006dc8:	00bfff04 	movi	r2,-4
 2006dcc:	1884703a 	and	r2,r3,r2
 2006dd0:	81400217 	ldw	r5,8(r16)
 2006dd4:	8085883a 	add	r2,r16,r2
 2006dd8:	10c00117 	ldw	r3,4(r2)
 2006ddc:	29000315 	stw	r4,12(r5)
 2006de0:	21400215 	stw	r5,8(r4)
 2006de4:	18c00054 	ori	r3,r3,1
 2006de8:	10c00115 	stw	r3,4(r2)
 2006dec:	9009883a 	mov	r4,r18
 2006df0:	200ed280 	call	200ed28 <__malloc_unlock>
 2006df4:	80800204 	addi	r2,r16,8
 2006df8:	dfc00a17 	ldw	ra,40(sp)
 2006dfc:	df000917 	ldw	fp,36(sp)
 2006e00:	ddc00817 	ldw	r23,32(sp)
 2006e04:	dd800717 	ldw	r22,28(sp)
 2006e08:	dd400617 	ldw	r21,24(sp)
 2006e0c:	dd000517 	ldw	r20,20(sp)
 2006e10:	dcc00417 	ldw	r19,16(sp)
 2006e14:	dc800317 	ldw	r18,12(sp)
 2006e18:	dc400217 	ldw	r17,8(sp)
 2006e1c:	dc000117 	ldw	r16,4(sp)
 2006e20:	dec00b04 	addi	sp,sp,44
 2006e24:	f800283a 	ret
 2006e28:	00800304 	movi	r2,12
 2006e2c:	90800015 	stw	r2,0(r18)
 2006e30:	0005883a 	mov	r2,zero
 2006e34:	003ff006 	br	2006df8 <__alt_data_end+0xff006df8>
 2006e38:	01002004 	movi	r4,128
 2006e3c:	02001004 	movi	r8,64
 2006e40:	01c00fc4 	movi	r7,63
 2006e44:	003f6106 	br	2006bcc <__alt_data_end+0xff006bcc>
 2006e48:	4009883a 	mov	r4,r8
 2006e4c:	003f7506 	br	2006c24 <__alt_data_end+0xff006c24>
 2006e50:	81000317 	ldw	r4,12(r16)
 2006e54:	003fde06 	br	2006dd0 <__alt_data_end+0xff006dd0>
 2006e58:	81c5883a 	add	r2,r16,r7
 2006e5c:	11400117 	ldw	r5,4(r2)
 2006e60:	9009883a 	mov	r4,r18
 2006e64:	29400054 	ori	r5,r5,1
 2006e68:	11400115 	stw	r5,4(r2)
 2006e6c:	200ed280 	call	200ed28 <__malloc_unlock>
 2006e70:	80800204 	addi	r2,r16,8
 2006e74:	003fe006 	br	2006df8 <__alt_data_end+0xff006df8>
 2006e78:	9c000217 	ldw	r16,8(r19)
 2006e7c:	00bfff04 	movi	r2,-4
 2006e80:	85800117 	ldw	r22,4(r16)
 2006e84:	b0ac703a 	and	r22,r22,r2
 2006e88:	b4400336 	bltu	r22,r17,2006e98 <_malloc_r+0x344>
 2006e8c:	b445c83a 	sub	r2,r22,r17
 2006e90:	00c003c4 	movi	r3,15
 2006e94:	18805d16 	blt	r3,r2,200700c <_malloc_r+0x4b8>
 2006e98:	05c08074 	movhi	r23,513
 2006e9c:	00808074 	movhi	r2,513
 2006ea0:	10923c04 	addi	r2,r2,18672
 2006ea4:	bdcb6e04 	addi	r23,r23,11704
 2006ea8:	15400017 	ldw	r21,0(r2)
 2006eac:	b8c00017 	ldw	r3,0(r23)
 2006eb0:	00bfffc4 	movi	r2,-1
 2006eb4:	858d883a 	add	r6,r16,r22
 2006eb8:	8d6b883a 	add	r21,r17,r21
 2006ebc:	1880ea26 	beq	r3,r2,2007268 <_malloc_r+0x714>
 2006ec0:	ad4403c4 	addi	r21,r21,4111
 2006ec4:	00bc0004 	movi	r2,-4096
 2006ec8:	a8aa703a 	and	r21,r21,r2
 2006ecc:	a80b883a 	mov	r5,r21
 2006ed0:	9009883a 	mov	r4,r18
 2006ed4:	d9800015 	stw	r6,0(sp)
 2006ed8:	2008ea00 	call	2008ea0 <_sbrk_r>
 2006edc:	1029883a 	mov	r20,r2
 2006ee0:	00bfffc4 	movi	r2,-1
 2006ee4:	d9800017 	ldw	r6,0(sp)
 2006ee8:	a080e826 	beq	r20,r2,200728c <_malloc_r+0x738>
 2006eec:	a180a636 	bltu	r20,r6,2007188 <_malloc_r+0x634>
 2006ef0:	07008074 	movhi	fp,513
 2006ef4:	e7124504 	addi	fp,fp,18708
 2006ef8:	e0800017 	ldw	r2,0(fp)
 2006efc:	a887883a 	add	r3,r21,r2
 2006f00:	e0c00015 	stw	r3,0(fp)
 2006f04:	3500e626 	beq	r6,r20,20072a0 <_malloc_r+0x74c>
 2006f08:	b9000017 	ldw	r4,0(r23)
 2006f0c:	00bfffc4 	movi	r2,-1
 2006f10:	2080ee26 	beq	r4,r2,20072cc <_malloc_r+0x778>
 2006f14:	a185c83a 	sub	r2,r20,r6
 2006f18:	10c5883a 	add	r2,r2,r3
 2006f1c:	e0800015 	stw	r2,0(fp)
 2006f20:	a0c001cc 	andi	r3,r20,7
 2006f24:	1800bc26 	beq	r3,zero,2007218 <_malloc_r+0x6c4>
 2006f28:	a0e9c83a 	sub	r20,r20,r3
 2006f2c:	00840204 	movi	r2,4104
 2006f30:	a5000204 	addi	r20,r20,8
 2006f34:	10c7c83a 	sub	r3,r2,r3
 2006f38:	a545883a 	add	r2,r20,r21
 2006f3c:	1083ffcc 	andi	r2,r2,4095
 2006f40:	18abc83a 	sub	r21,r3,r2
 2006f44:	a80b883a 	mov	r5,r21
 2006f48:	9009883a 	mov	r4,r18
 2006f4c:	2008ea00 	call	2008ea0 <_sbrk_r>
 2006f50:	00ffffc4 	movi	r3,-1
 2006f54:	10c0e126 	beq	r2,r3,20072dc <_malloc_r+0x788>
 2006f58:	1505c83a 	sub	r2,r2,r20
 2006f5c:	1545883a 	add	r2,r2,r21
 2006f60:	10800054 	ori	r2,r2,1
 2006f64:	e0c00017 	ldw	r3,0(fp)
 2006f68:	9d000215 	stw	r20,8(r19)
 2006f6c:	a0800115 	stw	r2,4(r20)
 2006f70:	a8c7883a 	add	r3,r21,r3
 2006f74:	e0c00015 	stw	r3,0(fp)
 2006f78:	84c00e26 	beq	r16,r19,2006fb4 <_malloc_r+0x460>
 2006f7c:	018003c4 	movi	r6,15
 2006f80:	3580a72e 	bgeu	r6,r22,2007220 <_malloc_r+0x6cc>
 2006f84:	81400117 	ldw	r5,4(r16)
 2006f88:	013ffe04 	movi	r4,-8
 2006f8c:	b0bffd04 	addi	r2,r22,-12
 2006f90:	1104703a 	and	r2,r2,r4
 2006f94:	2900004c 	andi	r4,r5,1
 2006f98:	2088b03a 	or	r4,r4,r2
 2006f9c:	81000115 	stw	r4,4(r16)
 2006fa0:	01400144 	movi	r5,5
 2006fa4:	8089883a 	add	r4,r16,r2
 2006fa8:	21400115 	stw	r5,4(r4)
 2006fac:	21400215 	stw	r5,8(r4)
 2006fb0:	3080cd36 	bltu	r6,r2,20072e8 <_malloc_r+0x794>
 2006fb4:	00808074 	movhi	r2,513
 2006fb8:	10923b04 	addi	r2,r2,18668
 2006fbc:	11000017 	ldw	r4,0(r2)
 2006fc0:	20c0012e 	bgeu	r4,r3,2006fc8 <_malloc_r+0x474>
 2006fc4:	10c00015 	stw	r3,0(r2)
 2006fc8:	00808074 	movhi	r2,513
 2006fcc:	10923a04 	addi	r2,r2,18664
 2006fd0:	11000017 	ldw	r4,0(r2)
 2006fd4:	9c000217 	ldw	r16,8(r19)
 2006fd8:	20c0012e 	bgeu	r4,r3,2006fe0 <_malloc_r+0x48c>
 2006fdc:	10c00015 	stw	r3,0(r2)
 2006fe0:	80c00117 	ldw	r3,4(r16)
 2006fe4:	00bfff04 	movi	r2,-4
 2006fe8:	1886703a 	and	r3,r3,r2
 2006fec:	1c45c83a 	sub	r2,r3,r17
 2006ff0:	1c400236 	bltu	r3,r17,2006ffc <_malloc_r+0x4a8>
 2006ff4:	00c003c4 	movi	r3,15
 2006ff8:	18800416 	blt	r3,r2,200700c <_malloc_r+0x4b8>
 2006ffc:	9009883a 	mov	r4,r18
 2007000:	200ed280 	call	200ed28 <__malloc_unlock>
 2007004:	0005883a 	mov	r2,zero
 2007008:	003f7b06 	br	2006df8 <__alt_data_end+0xff006df8>
 200700c:	88c00054 	ori	r3,r17,1
 2007010:	80c00115 	stw	r3,4(r16)
 2007014:	8463883a 	add	r17,r16,r17
 2007018:	10800054 	ori	r2,r2,1
 200701c:	9c400215 	stw	r17,8(r19)
 2007020:	88800115 	stw	r2,4(r17)
 2007024:	9009883a 	mov	r4,r18
 2007028:	200ed280 	call	200ed28 <__malloc_unlock>
 200702c:	80800204 	addi	r2,r16,8
 2007030:	003f7106 	br	2006df8 <__alt_data_end+0xff006df8>
 2007034:	00c00504 	movi	r3,20
 2007038:	18804a2e 	bgeu	r3,r2,2007164 <_malloc_r+0x610>
 200703c:	00c01504 	movi	r3,84
 2007040:	18806e36 	bltu	r3,r2,20071fc <_malloc_r+0x6a8>
 2007044:	8804d33a 	srli	r2,r17,12
 2007048:	12001bc4 	addi	r8,r2,111
 200704c:	11c01b84 	addi	r7,r2,110
 2007050:	4209883a 	add	r4,r8,r8
 2007054:	003edd06 	br	2006bcc <__alt_data_end+0xff006bcc>
 2007058:	3804d27a 	srli	r2,r7,9
 200705c:	00c00104 	movi	r3,4
 2007060:	1880442e 	bgeu	r3,r2,2007174 <_malloc_r+0x620>
 2007064:	00c00504 	movi	r3,20
 2007068:	18808136 	bltu	r3,r2,2007270 <_malloc_r+0x71c>
 200706c:	11401704 	addi	r5,r2,92
 2007070:	10c016c4 	addi	r3,r2,91
 2007074:	294b883a 	add	r5,r5,r5
 2007078:	294b883a 	add	r5,r5,r5
 200707c:	294b883a 	add	r5,r5,r5
 2007080:	994b883a 	add	r5,r19,r5
 2007084:	28800017 	ldw	r2,0(r5)
 2007088:	01808074 	movhi	r6,513
 200708c:	297ffe04 	addi	r5,r5,-8
 2007090:	3185e704 	addi	r6,r6,6044
 2007094:	28806526 	beq	r5,r2,200722c <_malloc_r+0x6d8>
 2007098:	01bfff04 	movi	r6,-4
 200709c:	10c00117 	ldw	r3,4(r2)
 20070a0:	1986703a 	and	r3,r3,r6
 20070a4:	38c0022e 	bgeu	r7,r3,20070b0 <_malloc_r+0x55c>
 20070a8:	10800217 	ldw	r2,8(r2)
 20070ac:	28bffb1e 	bne	r5,r2,200709c <__alt_data_end+0xff00709c>
 20070b0:	11400317 	ldw	r5,12(r2)
 20070b4:	98c00117 	ldw	r3,4(r19)
 20070b8:	81400315 	stw	r5,12(r16)
 20070bc:	80800215 	stw	r2,8(r16)
 20070c0:	2c000215 	stw	r16,8(r5)
 20070c4:	14000315 	stw	r16,12(r2)
 20070c8:	003ef806 	br	2006cac <__alt_data_end+0xff006cac>
 20070cc:	88c00054 	ori	r3,r17,1
 20070d0:	80c00115 	stw	r3,4(r16)
 20070d4:	8463883a 	add	r17,r16,r17
 20070d8:	34400515 	stw	r17,20(r6)
 20070dc:	34400415 	stw	r17,16(r6)
 20070e0:	10c00054 	ori	r3,r2,1
 20070e4:	8a000315 	stw	r8,12(r17)
 20070e8:	8a000215 	stw	r8,8(r17)
 20070ec:	88c00115 	stw	r3,4(r17)
 20070f0:	88a3883a 	add	r17,r17,r2
 20070f4:	88800015 	stw	r2,0(r17)
 20070f8:	9009883a 	mov	r4,r18
 20070fc:	200ed280 	call	200ed28 <__malloc_unlock>
 2007100:	80800204 	addi	r2,r16,8
 2007104:	003f3c06 	br	2006df8 <__alt_data_end+0xff006df8>
 2007108:	30c00117 	ldw	r3,4(r6)
 200710c:	003ee706 	br	2006cac <__alt_data_end+0xff006cac>
 2007110:	5ac00044 	addi	r11,r11,1
 2007114:	588000cc 	andi	r2,r11,3
 2007118:	31800204 	addi	r6,r6,8
 200711c:	103efd1e 	bne	r2,zero,2006d14 <__alt_data_end+0xff006d14>
 2007120:	00002406 	br	20071b4 <_malloc_r+0x660>
 2007124:	14000317 	ldw	r16,12(r2)
 2007128:	143f251e 	bne	r2,r16,2006dc0 <__alt_data_end+0xff006dc0>
 200712c:	21000084 	addi	r4,r4,2
 2007130:	003ebc06 	br	2006c24 <__alt_data_end+0xff006c24>
 2007134:	8085883a 	add	r2,r16,r2
 2007138:	10c00117 	ldw	r3,4(r2)
 200713c:	81000317 	ldw	r4,12(r16)
 2007140:	81400217 	ldw	r5,8(r16)
 2007144:	18c00054 	ori	r3,r3,1
 2007148:	10c00115 	stw	r3,4(r2)
 200714c:	29000315 	stw	r4,12(r5)
 2007150:	21400215 	stw	r5,8(r4)
 2007154:	9009883a 	mov	r4,r18
 2007158:	200ed280 	call	200ed28 <__malloc_unlock>
 200715c:	80800204 	addi	r2,r16,8
 2007160:	003f2506 	br	2006df8 <__alt_data_end+0xff006df8>
 2007164:	12001704 	addi	r8,r2,92
 2007168:	11c016c4 	addi	r7,r2,91
 200716c:	4209883a 	add	r4,r8,r8
 2007170:	003e9606 	br	2006bcc <__alt_data_end+0xff006bcc>
 2007174:	3804d1ba 	srli	r2,r7,6
 2007178:	11400e44 	addi	r5,r2,57
 200717c:	10c00e04 	addi	r3,r2,56
 2007180:	294b883a 	add	r5,r5,r5
 2007184:	003fbc06 	br	2007078 <__alt_data_end+0xff007078>
 2007188:	84ff5926 	beq	r16,r19,2006ef0 <__alt_data_end+0xff006ef0>
 200718c:	00808074 	movhi	r2,513
 2007190:	1085e704 	addi	r2,r2,6044
 2007194:	14000217 	ldw	r16,8(r2)
 2007198:	00bfff04 	movi	r2,-4
 200719c:	80c00117 	ldw	r3,4(r16)
 20071a0:	1886703a 	and	r3,r3,r2
 20071a4:	003f9106 	br	2006fec <__alt_data_end+0xff006fec>
 20071a8:	60800217 	ldw	r2,8(r12)
 20071ac:	213fffc4 	addi	r4,r4,-1
 20071b0:	1300651e 	bne	r2,r12,2007348 <_malloc_r+0x7f4>
 20071b4:	208000cc 	andi	r2,r4,3
 20071b8:	633ffe04 	addi	r12,r12,-8
 20071bc:	103ffa1e 	bne	r2,zero,20071a8 <__alt_data_end+0xff0071a8>
 20071c0:	98800117 	ldw	r2,4(r19)
 20071c4:	0146303a 	nor	r3,zero,r5
 20071c8:	1884703a 	and	r2,r3,r2
 20071cc:	98800115 	stw	r2,4(r19)
 20071d0:	294b883a 	add	r5,r5,r5
 20071d4:	117f2836 	bltu	r2,r5,2006e78 <__alt_data_end+0xff006e78>
 20071d8:	283f2726 	beq	r5,zero,2006e78 <__alt_data_end+0xff006e78>
 20071dc:	2886703a 	and	r3,r5,r2
 20071e0:	5809883a 	mov	r4,r11
 20071e4:	183ec31e 	bne	r3,zero,2006cf4 <__alt_data_end+0xff006cf4>
 20071e8:	294b883a 	add	r5,r5,r5
 20071ec:	2886703a 	and	r3,r5,r2
 20071f0:	21000104 	addi	r4,r4,4
 20071f4:	183ffc26 	beq	r3,zero,20071e8 <__alt_data_end+0xff0071e8>
 20071f8:	003ebe06 	br	2006cf4 <__alt_data_end+0xff006cf4>
 20071fc:	00c05504 	movi	r3,340
 2007200:	18801236 	bltu	r3,r2,200724c <_malloc_r+0x6f8>
 2007204:	8804d3fa 	srli	r2,r17,15
 2007208:	12001e04 	addi	r8,r2,120
 200720c:	11c01dc4 	addi	r7,r2,119
 2007210:	4209883a 	add	r4,r8,r8
 2007214:	003e6d06 	br	2006bcc <__alt_data_end+0xff006bcc>
 2007218:	00c40004 	movi	r3,4096
 200721c:	003f4606 	br	2006f38 <__alt_data_end+0xff006f38>
 2007220:	00800044 	movi	r2,1
 2007224:	a0800115 	stw	r2,4(r20)
 2007228:	003f7406 	br	2006ffc <__alt_data_end+0xff006ffc>
 200722c:	1805d0ba 	srai	r2,r3,2
 2007230:	01c00044 	movi	r7,1
 2007234:	30c00117 	ldw	r3,4(r6)
 2007238:	388e983a 	sll	r7,r7,r2
 200723c:	2805883a 	mov	r2,r5
 2007240:	38c6b03a 	or	r3,r7,r3
 2007244:	30c00115 	stw	r3,4(r6)
 2007248:	003f9b06 	br	20070b8 <__alt_data_end+0xff0070b8>
 200724c:	00c15504 	movi	r3,1364
 2007250:	18801a36 	bltu	r3,r2,20072bc <_malloc_r+0x768>
 2007254:	8804d4ba 	srli	r2,r17,18
 2007258:	12001f44 	addi	r8,r2,125
 200725c:	11c01f04 	addi	r7,r2,124
 2007260:	4209883a 	add	r4,r8,r8
 2007264:	003e5906 	br	2006bcc <__alt_data_end+0xff006bcc>
 2007268:	ad400404 	addi	r21,r21,16
 200726c:	003f1706 	br	2006ecc <__alt_data_end+0xff006ecc>
 2007270:	00c01504 	movi	r3,84
 2007274:	18802336 	bltu	r3,r2,2007304 <_malloc_r+0x7b0>
 2007278:	3804d33a 	srli	r2,r7,12
 200727c:	11401bc4 	addi	r5,r2,111
 2007280:	10c01b84 	addi	r3,r2,110
 2007284:	294b883a 	add	r5,r5,r5
 2007288:	003f7b06 	br	2007078 <__alt_data_end+0xff007078>
 200728c:	9c000217 	ldw	r16,8(r19)
 2007290:	00bfff04 	movi	r2,-4
 2007294:	80c00117 	ldw	r3,4(r16)
 2007298:	1886703a 	and	r3,r3,r2
 200729c:	003f5306 	br	2006fec <__alt_data_end+0xff006fec>
 20072a0:	3083ffcc 	andi	r2,r6,4095
 20072a4:	103f181e 	bne	r2,zero,2006f08 <__alt_data_end+0xff006f08>
 20072a8:	99000217 	ldw	r4,8(r19)
 20072ac:	b545883a 	add	r2,r22,r21
 20072b0:	10800054 	ori	r2,r2,1
 20072b4:	20800115 	stw	r2,4(r4)
 20072b8:	003f3e06 	br	2006fb4 <__alt_data_end+0xff006fb4>
 20072bc:	01003f84 	movi	r4,254
 20072c0:	02001fc4 	movi	r8,127
 20072c4:	01c01f84 	movi	r7,126
 20072c8:	003e4006 	br	2006bcc <__alt_data_end+0xff006bcc>
 20072cc:	00808074 	movhi	r2,513
 20072d0:	108b6e04 	addi	r2,r2,11704
 20072d4:	15000015 	stw	r20,0(r2)
 20072d8:	003f1106 	br	2006f20 <__alt_data_end+0xff006f20>
 20072dc:	00800044 	movi	r2,1
 20072e0:	002b883a 	mov	r21,zero
 20072e4:	003f1f06 	br	2006f64 <__alt_data_end+0xff006f64>
 20072e8:	81400204 	addi	r5,r16,8
 20072ec:	9009883a 	mov	r4,r18
 20072f0:	2005f5c0 	call	2005f5c <_free_r>
 20072f4:	00808074 	movhi	r2,513
 20072f8:	10924504 	addi	r2,r2,18708
 20072fc:	10c00017 	ldw	r3,0(r2)
 2007300:	003f2c06 	br	2006fb4 <__alt_data_end+0xff006fb4>
 2007304:	00c05504 	movi	r3,340
 2007308:	18800536 	bltu	r3,r2,2007320 <_malloc_r+0x7cc>
 200730c:	3804d3fa 	srli	r2,r7,15
 2007310:	11401e04 	addi	r5,r2,120
 2007314:	10c01dc4 	addi	r3,r2,119
 2007318:	294b883a 	add	r5,r5,r5
 200731c:	003f5606 	br	2007078 <__alt_data_end+0xff007078>
 2007320:	00c15504 	movi	r3,1364
 2007324:	18800536 	bltu	r3,r2,200733c <_malloc_r+0x7e8>
 2007328:	3804d4ba 	srli	r2,r7,18
 200732c:	11401f44 	addi	r5,r2,125
 2007330:	10c01f04 	addi	r3,r2,124
 2007334:	294b883a 	add	r5,r5,r5
 2007338:	003f4f06 	br	2007078 <__alt_data_end+0xff007078>
 200733c:	01403f84 	movi	r5,254
 2007340:	00c01f84 	movi	r3,126
 2007344:	003f4c06 	br	2007078 <__alt_data_end+0xff007078>
 2007348:	98800117 	ldw	r2,4(r19)
 200734c:	003fa006 	br	20071d0 <__alt_data_end+0xff0071d0>
 2007350:	8808d0fa 	srli	r4,r17,3
 2007354:	20800044 	addi	r2,r4,1
 2007358:	1085883a 	add	r2,r2,r2
 200735c:	003e9006 	br	2006da0 <__alt_data_end+0xff006da0>

02007360 <memchr>:
 2007360:	208000cc 	andi	r2,r4,3
 2007364:	280f883a 	mov	r7,r5
 2007368:	10003426 	beq	r2,zero,200743c <memchr+0xdc>
 200736c:	30bfffc4 	addi	r2,r6,-1
 2007370:	30001a26 	beq	r6,zero,20073dc <memchr+0x7c>
 2007374:	20c00003 	ldbu	r3,0(r4)
 2007378:	29803fcc 	andi	r6,r5,255
 200737c:	30c0051e 	bne	r6,r3,2007394 <memchr+0x34>
 2007380:	00001806 	br	20073e4 <memchr+0x84>
 2007384:	10001526 	beq	r2,zero,20073dc <memchr+0x7c>
 2007388:	20c00003 	ldbu	r3,0(r4)
 200738c:	10bfffc4 	addi	r2,r2,-1
 2007390:	30c01426 	beq	r6,r3,20073e4 <memchr+0x84>
 2007394:	21000044 	addi	r4,r4,1
 2007398:	20c000cc 	andi	r3,r4,3
 200739c:	183ff91e 	bne	r3,zero,2007384 <__alt_data_end+0xff007384>
 20073a0:	020000c4 	movi	r8,3
 20073a4:	40801136 	bltu	r8,r2,20073ec <memchr+0x8c>
 20073a8:	10000c26 	beq	r2,zero,20073dc <memchr+0x7c>
 20073ac:	20c00003 	ldbu	r3,0(r4)
 20073b0:	29403fcc 	andi	r5,r5,255
 20073b4:	28c00b26 	beq	r5,r3,20073e4 <memchr+0x84>
 20073b8:	20c00044 	addi	r3,r4,1
 20073bc:	39803fcc 	andi	r6,r7,255
 20073c0:	2089883a 	add	r4,r4,r2
 20073c4:	00000306 	br	20073d4 <memchr+0x74>
 20073c8:	18c00044 	addi	r3,r3,1
 20073cc:	197fffc3 	ldbu	r5,-1(r3)
 20073d0:	31400526 	beq	r6,r5,20073e8 <memchr+0x88>
 20073d4:	1805883a 	mov	r2,r3
 20073d8:	20fffb1e 	bne	r4,r3,20073c8 <__alt_data_end+0xff0073c8>
 20073dc:	0005883a 	mov	r2,zero
 20073e0:	f800283a 	ret
 20073e4:	2005883a 	mov	r2,r4
 20073e8:	f800283a 	ret
 20073ec:	28c03fcc 	andi	r3,r5,255
 20073f0:	1812923a 	slli	r9,r3,8
 20073f4:	02ffbff4 	movhi	r11,65279
 20073f8:	02a02074 	movhi	r10,32897
 20073fc:	48d2b03a 	or	r9,r9,r3
 2007400:	4806943a 	slli	r3,r9,16
 2007404:	5affbfc4 	addi	r11,r11,-257
 2007408:	52a02004 	addi	r10,r10,-32640
 200740c:	48d2b03a 	or	r9,r9,r3
 2007410:	20c00017 	ldw	r3,0(r4)
 2007414:	48c6f03a 	xor	r3,r9,r3
 2007418:	1acd883a 	add	r6,r3,r11
 200741c:	00c6303a 	nor	r3,zero,r3
 2007420:	30c6703a 	and	r3,r6,r3
 2007424:	1a86703a 	and	r3,r3,r10
 2007428:	183fe01e 	bne	r3,zero,20073ac <__alt_data_end+0xff0073ac>
 200742c:	10bfff04 	addi	r2,r2,-4
 2007430:	21000104 	addi	r4,r4,4
 2007434:	40bff636 	bltu	r8,r2,2007410 <__alt_data_end+0xff007410>
 2007438:	003fdb06 	br	20073a8 <__alt_data_end+0xff0073a8>
 200743c:	3005883a 	mov	r2,r6
 2007440:	003fd706 	br	20073a0 <__alt_data_end+0xff0073a0>

02007444 <memcpy>:
 2007444:	defffd04 	addi	sp,sp,-12
 2007448:	dfc00215 	stw	ra,8(sp)
 200744c:	dc400115 	stw	r17,4(sp)
 2007450:	dc000015 	stw	r16,0(sp)
 2007454:	00c003c4 	movi	r3,15
 2007458:	2005883a 	mov	r2,r4
 200745c:	1980452e 	bgeu	r3,r6,2007574 <memcpy+0x130>
 2007460:	2906b03a 	or	r3,r5,r4
 2007464:	18c000cc 	andi	r3,r3,3
 2007468:	1800441e 	bne	r3,zero,200757c <memcpy+0x138>
 200746c:	347ffc04 	addi	r17,r6,-16
 2007470:	8822d13a 	srli	r17,r17,4
 2007474:	28c00104 	addi	r3,r5,4
 2007478:	23400104 	addi	r13,r4,4
 200747c:	8820913a 	slli	r16,r17,4
 2007480:	2b000204 	addi	r12,r5,8
 2007484:	22c00204 	addi	r11,r4,8
 2007488:	84000504 	addi	r16,r16,20
 200748c:	2a800304 	addi	r10,r5,12
 2007490:	22400304 	addi	r9,r4,12
 2007494:	2c21883a 	add	r16,r5,r16
 2007498:	2811883a 	mov	r8,r5
 200749c:	200f883a 	mov	r7,r4
 20074a0:	41000017 	ldw	r4,0(r8)
 20074a4:	1fc00017 	ldw	ra,0(r3)
 20074a8:	63c00017 	ldw	r15,0(r12)
 20074ac:	39000015 	stw	r4,0(r7)
 20074b0:	53800017 	ldw	r14,0(r10)
 20074b4:	6fc00015 	stw	ra,0(r13)
 20074b8:	5bc00015 	stw	r15,0(r11)
 20074bc:	4b800015 	stw	r14,0(r9)
 20074c0:	18c00404 	addi	r3,r3,16
 20074c4:	39c00404 	addi	r7,r7,16
 20074c8:	42000404 	addi	r8,r8,16
 20074cc:	6b400404 	addi	r13,r13,16
 20074d0:	63000404 	addi	r12,r12,16
 20074d4:	5ac00404 	addi	r11,r11,16
 20074d8:	52800404 	addi	r10,r10,16
 20074dc:	4a400404 	addi	r9,r9,16
 20074e0:	1c3fef1e 	bne	r3,r16,20074a0 <__alt_data_end+0xff0074a0>
 20074e4:	89c00044 	addi	r7,r17,1
 20074e8:	380e913a 	slli	r7,r7,4
 20074ec:	310003cc 	andi	r4,r6,15
 20074f0:	02c000c4 	movi	r11,3
 20074f4:	11c7883a 	add	r3,r2,r7
 20074f8:	29cb883a 	add	r5,r5,r7
 20074fc:	5900212e 	bgeu	r11,r4,2007584 <memcpy+0x140>
 2007500:	1813883a 	mov	r9,r3
 2007504:	2811883a 	mov	r8,r5
 2007508:	200f883a 	mov	r7,r4
 200750c:	42800017 	ldw	r10,0(r8)
 2007510:	4a400104 	addi	r9,r9,4
 2007514:	39ffff04 	addi	r7,r7,-4
 2007518:	4abfff15 	stw	r10,-4(r9)
 200751c:	42000104 	addi	r8,r8,4
 2007520:	59fffa36 	bltu	r11,r7,200750c <__alt_data_end+0xff00750c>
 2007524:	213fff04 	addi	r4,r4,-4
 2007528:	2008d0ba 	srli	r4,r4,2
 200752c:	318000cc 	andi	r6,r6,3
 2007530:	21000044 	addi	r4,r4,1
 2007534:	2109883a 	add	r4,r4,r4
 2007538:	2109883a 	add	r4,r4,r4
 200753c:	1907883a 	add	r3,r3,r4
 2007540:	290b883a 	add	r5,r5,r4
 2007544:	30000626 	beq	r6,zero,2007560 <memcpy+0x11c>
 2007548:	198d883a 	add	r6,r3,r6
 200754c:	29c00003 	ldbu	r7,0(r5)
 2007550:	18c00044 	addi	r3,r3,1
 2007554:	29400044 	addi	r5,r5,1
 2007558:	19ffffc5 	stb	r7,-1(r3)
 200755c:	19bffb1e 	bne	r3,r6,200754c <__alt_data_end+0xff00754c>
 2007560:	dfc00217 	ldw	ra,8(sp)
 2007564:	dc400117 	ldw	r17,4(sp)
 2007568:	dc000017 	ldw	r16,0(sp)
 200756c:	dec00304 	addi	sp,sp,12
 2007570:	f800283a 	ret
 2007574:	2007883a 	mov	r3,r4
 2007578:	003ff206 	br	2007544 <__alt_data_end+0xff007544>
 200757c:	2007883a 	mov	r3,r4
 2007580:	003ff106 	br	2007548 <__alt_data_end+0xff007548>
 2007584:	200d883a 	mov	r6,r4
 2007588:	003fee06 	br	2007544 <__alt_data_end+0xff007544>

0200758c <memmove>:
 200758c:	2005883a 	mov	r2,r4
 2007590:	29000b2e 	bgeu	r5,r4,20075c0 <memmove+0x34>
 2007594:	298f883a 	add	r7,r5,r6
 2007598:	21c0092e 	bgeu	r4,r7,20075c0 <memmove+0x34>
 200759c:	2187883a 	add	r3,r4,r6
 20075a0:	198bc83a 	sub	r5,r3,r6
 20075a4:	30004826 	beq	r6,zero,20076c8 <memmove+0x13c>
 20075a8:	39ffffc4 	addi	r7,r7,-1
 20075ac:	39000003 	ldbu	r4,0(r7)
 20075b0:	18ffffc4 	addi	r3,r3,-1
 20075b4:	19000005 	stb	r4,0(r3)
 20075b8:	28fffb1e 	bne	r5,r3,20075a8 <__alt_data_end+0xff0075a8>
 20075bc:	f800283a 	ret
 20075c0:	00c003c4 	movi	r3,15
 20075c4:	1980412e 	bgeu	r3,r6,20076cc <memmove+0x140>
 20075c8:	2886b03a 	or	r3,r5,r2
 20075cc:	18c000cc 	andi	r3,r3,3
 20075d0:	1800401e 	bne	r3,zero,20076d4 <memmove+0x148>
 20075d4:	33fffc04 	addi	r15,r6,-16
 20075d8:	781ed13a 	srli	r15,r15,4
 20075dc:	28c00104 	addi	r3,r5,4
 20075e0:	13400104 	addi	r13,r2,4
 20075e4:	781c913a 	slli	r14,r15,4
 20075e8:	2b000204 	addi	r12,r5,8
 20075ec:	12c00204 	addi	r11,r2,8
 20075f0:	73800504 	addi	r14,r14,20
 20075f4:	2a800304 	addi	r10,r5,12
 20075f8:	12400304 	addi	r9,r2,12
 20075fc:	2b9d883a 	add	r14,r5,r14
 2007600:	2811883a 	mov	r8,r5
 2007604:	100f883a 	mov	r7,r2
 2007608:	41000017 	ldw	r4,0(r8)
 200760c:	39c00404 	addi	r7,r7,16
 2007610:	18c00404 	addi	r3,r3,16
 2007614:	393ffc15 	stw	r4,-16(r7)
 2007618:	193ffc17 	ldw	r4,-16(r3)
 200761c:	6b400404 	addi	r13,r13,16
 2007620:	5ac00404 	addi	r11,r11,16
 2007624:	693ffc15 	stw	r4,-16(r13)
 2007628:	61000017 	ldw	r4,0(r12)
 200762c:	4a400404 	addi	r9,r9,16
 2007630:	42000404 	addi	r8,r8,16
 2007634:	593ffc15 	stw	r4,-16(r11)
 2007638:	51000017 	ldw	r4,0(r10)
 200763c:	63000404 	addi	r12,r12,16
 2007640:	52800404 	addi	r10,r10,16
 2007644:	493ffc15 	stw	r4,-16(r9)
 2007648:	1bbfef1e 	bne	r3,r14,2007608 <__alt_data_end+0xff007608>
 200764c:	79000044 	addi	r4,r15,1
 2007650:	2008913a 	slli	r4,r4,4
 2007654:	328003cc 	andi	r10,r6,15
 2007658:	02c000c4 	movi	r11,3
 200765c:	1107883a 	add	r3,r2,r4
 2007660:	290b883a 	add	r5,r5,r4
 2007664:	5a801e2e 	bgeu	r11,r10,20076e0 <memmove+0x154>
 2007668:	1813883a 	mov	r9,r3
 200766c:	2811883a 	mov	r8,r5
 2007670:	500f883a 	mov	r7,r10
 2007674:	41000017 	ldw	r4,0(r8)
 2007678:	4a400104 	addi	r9,r9,4
 200767c:	39ffff04 	addi	r7,r7,-4
 2007680:	493fff15 	stw	r4,-4(r9)
 2007684:	42000104 	addi	r8,r8,4
 2007688:	59fffa36 	bltu	r11,r7,2007674 <__alt_data_end+0xff007674>
 200768c:	513fff04 	addi	r4,r10,-4
 2007690:	2008d0ba 	srli	r4,r4,2
 2007694:	318000cc 	andi	r6,r6,3
 2007698:	21000044 	addi	r4,r4,1
 200769c:	2109883a 	add	r4,r4,r4
 20076a0:	2109883a 	add	r4,r4,r4
 20076a4:	1907883a 	add	r3,r3,r4
 20076a8:	290b883a 	add	r5,r5,r4
 20076ac:	30000b26 	beq	r6,zero,20076dc <memmove+0x150>
 20076b0:	198d883a 	add	r6,r3,r6
 20076b4:	29c00003 	ldbu	r7,0(r5)
 20076b8:	18c00044 	addi	r3,r3,1
 20076bc:	29400044 	addi	r5,r5,1
 20076c0:	19ffffc5 	stb	r7,-1(r3)
 20076c4:	19bffb1e 	bne	r3,r6,20076b4 <__alt_data_end+0xff0076b4>
 20076c8:	f800283a 	ret
 20076cc:	1007883a 	mov	r3,r2
 20076d0:	003ff606 	br	20076ac <__alt_data_end+0xff0076ac>
 20076d4:	1007883a 	mov	r3,r2
 20076d8:	003ff506 	br	20076b0 <__alt_data_end+0xff0076b0>
 20076dc:	f800283a 	ret
 20076e0:	500d883a 	mov	r6,r10
 20076e4:	003ff106 	br	20076ac <__alt_data_end+0xff0076ac>

020076e8 <memset>:
 20076e8:	20c000cc 	andi	r3,r4,3
 20076ec:	2005883a 	mov	r2,r4
 20076f0:	18004426 	beq	r3,zero,2007804 <memset+0x11c>
 20076f4:	31ffffc4 	addi	r7,r6,-1
 20076f8:	30004026 	beq	r6,zero,20077fc <memset+0x114>
 20076fc:	2813883a 	mov	r9,r5
 2007700:	200d883a 	mov	r6,r4
 2007704:	2007883a 	mov	r3,r4
 2007708:	00000406 	br	200771c <memset+0x34>
 200770c:	3a3fffc4 	addi	r8,r7,-1
 2007710:	31800044 	addi	r6,r6,1
 2007714:	38003926 	beq	r7,zero,20077fc <memset+0x114>
 2007718:	400f883a 	mov	r7,r8
 200771c:	18c00044 	addi	r3,r3,1
 2007720:	32400005 	stb	r9,0(r6)
 2007724:	1a0000cc 	andi	r8,r3,3
 2007728:	403ff81e 	bne	r8,zero,200770c <__alt_data_end+0xff00770c>
 200772c:	010000c4 	movi	r4,3
 2007730:	21c02d2e 	bgeu	r4,r7,20077e8 <memset+0x100>
 2007734:	29003fcc 	andi	r4,r5,255
 2007738:	200c923a 	slli	r6,r4,8
 200773c:	3108b03a 	or	r4,r6,r4
 2007740:	200c943a 	slli	r6,r4,16
 2007744:	218cb03a 	or	r6,r4,r6
 2007748:	010003c4 	movi	r4,15
 200774c:	21c0182e 	bgeu	r4,r7,20077b0 <memset+0xc8>
 2007750:	3b3ffc04 	addi	r12,r7,-16
 2007754:	6018d13a 	srli	r12,r12,4
 2007758:	1a000104 	addi	r8,r3,4
 200775c:	1ac00204 	addi	r11,r3,8
 2007760:	6008913a 	slli	r4,r12,4
 2007764:	1a800304 	addi	r10,r3,12
 2007768:	1813883a 	mov	r9,r3
 200776c:	21000504 	addi	r4,r4,20
 2007770:	1909883a 	add	r4,r3,r4
 2007774:	49800015 	stw	r6,0(r9)
 2007778:	41800015 	stw	r6,0(r8)
 200777c:	59800015 	stw	r6,0(r11)
 2007780:	51800015 	stw	r6,0(r10)
 2007784:	42000404 	addi	r8,r8,16
 2007788:	4a400404 	addi	r9,r9,16
 200778c:	5ac00404 	addi	r11,r11,16
 2007790:	52800404 	addi	r10,r10,16
 2007794:	413ff71e 	bne	r8,r4,2007774 <__alt_data_end+0xff007774>
 2007798:	63000044 	addi	r12,r12,1
 200779c:	6018913a 	slli	r12,r12,4
 20077a0:	39c003cc 	andi	r7,r7,15
 20077a4:	010000c4 	movi	r4,3
 20077a8:	1b07883a 	add	r3,r3,r12
 20077ac:	21c00e2e 	bgeu	r4,r7,20077e8 <memset+0x100>
 20077b0:	1813883a 	mov	r9,r3
 20077b4:	3811883a 	mov	r8,r7
 20077b8:	010000c4 	movi	r4,3
 20077bc:	49800015 	stw	r6,0(r9)
 20077c0:	423fff04 	addi	r8,r8,-4
 20077c4:	4a400104 	addi	r9,r9,4
 20077c8:	223ffc36 	bltu	r4,r8,20077bc <__alt_data_end+0xff0077bc>
 20077cc:	393fff04 	addi	r4,r7,-4
 20077d0:	2008d0ba 	srli	r4,r4,2
 20077d4:	39c000cc 	andi	r7,r7,3
 20077d8:	21000044 	addi	r4,r4,1
 20077dc:	2109883a 	add	r4,r4,r4
 20077e0:	2109883a 	add	r4,r4,r4
 20077e4:	1907883a 	add	r3,r3,r4
 20077e8:	38000526 	beq	r7,zero,2007800 <memset+0x118>
 20077ec:	19cf883a 	add	r7,r3,r7
 20077f0:	19400005 	stb	r5,0(r3)
 20077f4:	18c00044 	addi	r3,r3,1
 20077f8:	38fffd1e 	bne	r7,r3,20077f0 <__alt_data_end+0xff0077f0>
 20077fc:	f800283a 	ret
 2007800:	f800283a 	ret
 2007804:	2007883a 	mov	r3,r4
 2007808:	300f883a 	mov	r7,r6
 200780c:	003fc706 	br	200772c <__alt_data_end+0xff00772c>

02007810 <_Balloc>:
 2007810:	20801317 	ldw	r2,76(r4)
 2007814:	defffc04 	addi	sp,sp,-16
 2007818:	dc400115 	stw	r17,4(sp)
 200781c:	dc000015 	stw	r16,0(sp)
 2007820:	dfc00315 	stw	ra,12(sp)
 2007824:	dc800215 	stw	r18,8(sp)
 2007828:	2023883a 	mov	r17,r4
 200782c:	2821883a 	mov	r16,r5
 2007830:	10000f26 	beq	r2,zero,2007870 <_Balloc+0x60>
 2007834:	8407883a 	add	r3,r16,r16
 2007838:	18c7883a 	add	r3,r3,r3
 200783c:	10c7883a 	add	r3,r2,r3
 2007840:	18800017 	ldw	r2,0(r3)
 2007844:	10001126 	beq	r2,zero,200788c <_Balloc+0x7c>
 2007848:	11000017 	ldw	r4,0(r2)
 200784c:	19000015 	stw	r4,0(r3)
 2007850:	10000415 	stw	zero,16(r2)
 2007854:	10000315 	stw	zero,12(r2)
 2007858:	dfc00317 	ldw	ra,12(sp)
 200785c:	dc800217 	ldw	r18,8(sp)
 2007860:	dc400117 	ldw	r17,4(sp)
 2007864:	dc000017 	ldw	r16,0(sp)
 2007868:	dec00404 	addi	sp,sp,16
 200786c:	f800283a 	ret
 2007870:	01800844 	movi	r6,33
 2007874:	01400104 	movi	r5,4
 2007878:	200a8b80 	call	200a8b8 <_calloc_r>
 200787c:	88801315 	stw	r2,76(r17)
 2007880:	103fec1e 	bne	r2,zero,2007834 <__alt_data_end+0xff007834>
 2007884:	0005883a 	mov	r2,zero
 2007888:	003ff306 	br	2007858 <__alt_data_end+0xff007858>
 200788c:	01400044 	movi	r5,1
 2007890:	2c24983a 	sll	r18,r5,r16
 2007894:	8809883a 	mov	r4,r17
 2007898:	91800144 	addi	r6,r18,5
 200789c:	318d883a 	add	r6,r6,r6
 20078a0:	318d883a 	add	r6,r6,r6
 20078a4:	200a8b80 	call	200a8b8 <_calloc_r>
 20078a8:	103ff626 	beq	r2,zero,2007884 <__alt_data_end+0xff007884>
 20078ac:	14000115 	stw	r16,4(r2)
 20078b0:	14800215 	stw	r18,8(r2)
 20078b4:	003fe606 	br	2007850 <__alt_data_end+0xff007850>

020078b8 <_Bfree>:
 20078b8:	28000826 	beq	r5,zero,20078dc <_Bfree+0x24>
 20078bc:	28c00117 	ldw	r3,4(r5)
 20078c0:	20801317 	ldw	r2,76(r4)
 20078c4:	18c7883a 	add	r3,r3,r3
 20078c8:	18c7883a 	add	r3,r3,r3
 20078cc:	10c5883a 	add	r2,r2,r3
 20078d0:	10c00017 	ldw	r3,0(r2)
 20078d4:	28c00015 	stw	r3,0(r5)
 20078d8:	11400015 	stw	r5,0(r2)
 20078dc:	f800283a 	ret

020078e0 <__multadd>:
 20078e0:	defff704 	addi	sp,sp,-36
 20078e4:	dc800215 	stw	r18,8(sp)
 20078e8:	2c800417 	ldw	r18,16(r5)
 20078ec:	dd800615 	stw	r22,24(sp)
 20078f0:	dd400515 	stw	r21,20(sp)
 20078f4:	dd000415 	stw	r20,16(sp)
 20078f8:	dcc00315 	stw	r19,12(sp)
 20078fc:	dc400115 	stw	r17,4(sp)
 2007900:	dc000015 	stw	r16,0(sp)
 2007904:	dfc00815 	stw	ra,32(sp)
 2007908:	ddc00715 	stw	r23,28(sp)
 200790c:	2827883a 	mov	r19,r5
 2007910:	2029883a 	mov	r20,r4
 2007914:	3023883a 	mov	r17,r6
 2007918:	3821883a 	mov	r16,r7
 200791c:	2d400504 	addi	r21,r5,20
 2007920:	002d883a 	mov	r22,zero
 2007924:	adc00017 	ldw	r23,0(r21)
 2007928:	880b883a 	mov	r5,r17
 200792c:	ad400104 	addi	r21,r21,4
 2007930:	b93fffcc 	andi	r4,r23,65535
 2007934:	20018280 	call	2001828 <__mulsi3>
 2007938:	b808d43a 	srli	r4,r23,16
 200793c:	880b883a 	mov	r5,r17
 2007940:	1421883a 	add	r16,r2,r16
 2007944:	20018280 	call	2001828 <__mulsi3>
 2007948:	800ed43a 	srli	r7,r16,16
 200794c:	80ffffcc 	andi	r3,r16,65535
 2007950:	b5800044 	addi	r22,r22,1
 2007954:	11c5883a 	add	r2,r2,r7
 2007958:	100e943a 	slli	r7,r2,16
 200795c:	1020d43a 	srli	r16,r2,16
 2007960:	38c7883a 	add	r3,r7,r3
 2007964:	a8ffff15 	stw	r3,-4(r21)
 2007968:	b4bfee16 	blt	r22,r18,2007924 <__alt_data_end+0xff007924>
 200796c:	80000926 	beq	r16,zero,2007994 <__multadd+0xb4>
 2007970:	98800217 	ldw	r2,8(r19)
 2007974:	9080130e 	bge	r18,r2,20079c4 <__multadd+0xe4>
 2007978:	90800144 	addi	r2,r18,5
 200797c:	1085883a 	add	r2,r2,r2
 2007980:	1085883a 	add	r2,r2,r2
 2007984:	9885883a 	add	r2,r19,r2
 2007988:	14000015 	stw	r16,0(r2)
 200798c:	94800044 	addi	r18,r18,1
 2007990:	9c800415 	stw	r18,16(r19)
 2007994:	9805883a 	mov	r2,r19
 2007998:	dfc00817 	ldw	ra,32(sp)
 200799c:	ddc00717 	ldw	r23,28(sp)
 20079a0:	dd800617 	ldw	r22,24(sp)
 20079a4:	dd400517 	ldw	r21,20(sp)
 20079a8:	dd000417 	ldw	r20,16(sp)
 20079ac:	dcc00317 	ldw	r19,12(sp)
 20079b0:	dc800217 	ldw	r18,8(sp)
 20079b4:	dc400117 	ldw	r17,4(sp)
 20079b8:	dc000017 	ldw	r16,0(sp)
 20079bc:	dec00904 	addi	sp,sp,36
 20079c0:	f800283a 	ret
 20079c4:	99400117 	ldw	r5,4(r19)
 20079c8:	a009883a 	mov	r4,r20
 20079cc:	29400044 	addi	r5,r5,1
 20079d0:	20078100 	call	2007810 <_Balloc>
 20079d4:	99800417 	ldw	r6,16(r19)
 20079d8:	99400304 	addi	r5,r19,12
 20079dc:	11000304 	addi	r4,r2,12
 20079e0:	31800084 	addi	r6,r6,2
 20079e4:	318d883a 	add	r6,r6,r6
 20079e8:	318d883a 	add	r6,r6,r6
 20079ec:	1023883a 	mov	r17,r2
 20079f0:	20074440 	call	2007444 <memcpy>
 20079f4:	98000a26 	beq	r19,zero,2007a20 <__multadd+0x140>
 20079f8:	98c00117 	ldw	r3,4(r19)
 20079fc:	a0801317 	ldw	r2,76(r20)
 2007a00:	18c7883a 	add	r3,r3,r3
 2007a04:	18c7883a 	add	r3,r3,r3
 2007a08:	10c5883a 	add	r2,r2,r3
 2007a0c:	10c00017 	ldw	r3,0(r2)
 2007a10:	98c00015 	stw	r3,0(r19)
 2007a14:	14c00015 	stw	r19,0(r2)
 2007a18:	8827883a 	mov	r19,r17
 2007a1c:	003fd606 	br	2007978 <__alt_data_end+0xff007978>
 2007a20:	8827883a 	mov	r19,r17
 2007a24:	003fd406 	br	2007978 <__alt_data_end+0xff007978>

02007a28 <__s2b>:
 2007a28:	defff904 	addi	sp,sp,-28
 2007a2c:	dc400115 	stw	r17,4(sp)
 2007a30:	dc000015 	stw	r16,0(sp)
 2007a34:	2023883a 	mov	r17,r4
 2007a38:	2821883a 	mov	r16,r5
 2007a3c:	39000204 	addi	r4,r7,8
 2007a40:	01400244 	movi	r5,9
 2007a44:	dcc00315 	stw	r19,12(sp)
 2007a48:	dc800215 	stw	r18,8(sp)
 2007a4c:	dfc00615 	stw	ra,24(sp)
 2007a50:	dd400515 	stw	r21,20(sp)
 2007a54:	dd000415 	stw	r20,16(sp)
 2007a58:	3825883a 	mov	r18,r7
 2007a5c:	3027883a 	mov	r19,r6
 2007a60:	200bd100 	call	200bd10 <__divsi3>
 2007a64:	00c00044 	movi	r3,1
 2007a68:	000b883a 	mov	r5,zero
 2007a6c:	1880030e 	bge	r3,r2,2007a7c <__s2b+0x54>
 2007a70:	18c7883a 	add	r3,r3,r3
 2007a74:	29400044 	addi	r5,r5,1
 2007a78:	18bffd16 	blt	r3,r2,2007a70 <__alt_data_end+0xff007a70>
 2007a7c:	8809883a 	mov	r4,r17
 2007a80:	20078100 	call	2007810 <_Balloc>
 2007a84:	d8c00717 	ldw	r3,28(sp)
 2007a88:	10c00515 	stw	r3,20(r2)
 2007a8c:	00c00044 	movi	r3,1
 2007a90:	10c00415 	stw	r3,16(r2)
 2007a94:	00c00244 	movi	r3,9
 2007a98:	1cc0210e 	bge	r3,r19,2007b20 <__s2b+0xf8>
 2007a9c:	80eb883a 	add	r21,r16,r3
 2007aa0:	a829883a 	mov	r20,r21
 2007aa4:	84e1883a 	add	r16,r16,r19
 2007aa8:	a1c00007 	ldb	r7,0(r20)
 2007aac:	01800284 	movi	r6,10
 2007ab0:	a5000044 	addi	r20,r20,1
 2007ab4:	100b883a 	mov	r5,r2
 2007ab8:	39fff404 	addi	r7,r7,-48
 2007abc:	8809883a 	mov	r4,r17
 2007ac0:	20078e00 	call	20078e0 <__multadd>
 2007ac4:	a43ff81e 	bne	r20,r16,2007aa8 <__alt_data_end+0xff007aa8>
 2007ac8:	ace1883a 	add	r16,r21,r19
 2007acc:	843ffe04 	addi	r16,r16,-8
 2007ad0:	9c800a0e 	bge	r19,r18,2007afc <__s2b+0xd4>
 2007ad4:	94e5c83a 	sub	r18,r18,r19
 2007ad8:	84a5883a 	add	r18,r16,r18
 2007adc:	81c00007 	ldb	r7,0(r16)
 2007ae0:	01800284 	movi	r6,10
 2007ae4:	84000044 	addi	r16,r16,1
 2007ae8:	100b883a 	mov	r5,r2
 2007aec:	39fff404 	addi	r7,r7,-48
 2007af0:	8809883a 	mov	r4,r17
 2007af4:	20078e00 	call	20078e0 <__multadd>
 2007af8:	84bff81e 	bne	r16,r18,2007adc <__alt_data_end+0xff007adc>
 2007afc:	dfc00617 	ldw	ra,24(sp)
 2007b00:	dd400517 	ldw	r21,20(sp)
 2007b04:	dd000417 	ldw	r20,16(sp)
 2007b08:	dcc00317 	ldw	r19,12(sp)
 2007b0c:	dc800217 	ldw	r18,8(sp)
 2007b10:	dc400117 	ldw	r17,4(sp)
 2007b14:	dc000017 	ldw	r16,0(sp)
 2007b18:	dec00704 	addi	sp,sp,28
 2007b1c:	f800283a 	ret
 2007b20:	84000284 	addi	r16,r16,10
 2007b24:	1827883a 	mov	r19,r3
 2007b28:	003fe906 	br	2007ad0 <__alt_data_end+0xff007ad0>

02007b2c <__hi0bits>:
 2007b2c:	20bfffec 	andhi	r2,r4,65535
 2007b30:	1000141e 	bne	r2,zero,2007b84 <__hi0bits+0x58>
 2007b34:	2008943a 	slli	r4,r4,16
 2007b38:	00800404 	movi	r2,16
 2007b3c:	20ffc02c 	andhi	r3,r4,65280
 2007b40:	1800021e 	bne	r3,zero,2007b4c <__hi0bits+0x20>
 2007b44:	2008923a 	slli	r4,r4,8
 2007b48:	10800204 	addi	r2,r2,8
 2007b4c:	20fc002c 	andhi	r3,r4,61440
 2007b50:	1800021e 	bne	r3,zero,2007b5c <__hi0bits+0x30>
 2007b54:	2008913a 	slli	r4,r4,4
 2007b58:	10800104 	addi	r2,r2,4
 2007b5c:	20f0002c 	andhi	r3,r4,49152
 2007b60:	1800031e 	bne	r3,zero,2007b70 <__hi0bits+0x44>
 2007b64:	2109883a 	add	r4,r4,r4
 2007b68:	10800084 	addi	r2,r2,2
 2007b6c:	2109883a 	add	r4,r4,r4
 2007b70:	20000316 	blt	r4,zero,2007b80 <__hi0bits+0x54>
 2007b74:	2110002c 	andhi	r4,r4,16384
 2007b78:	2000041e 	bne	r4,zero,2007b8c <__hi0bits+0x60>
 2007b7c:	00800804 	movi	r2,32
 2007b80:	f800283a 	ret
 2007b84:	0005883a 	mov	r2,zero
 2007b88:	003fec06 	br	2007b3c <__alt_data_end+0xff007b3c>
 2007b8c:	10800044 	addi	r2,r2,1
 2007b90:	f800283a 	ret

02007b94 <__lo0bits>:
 2007b94:	20c00017 	ldw	r3,0(r4)
 2007b98:	188001cc 	andi	r2,r3,7
 2007b9c:	10000826 	beq	r2,zero,2007bc0 <__lo0bits+0x2c>
 2007ba0:	1880004c 	andi	r2,r3,1
 2007ba4:	1000211e 	bne	r2,zero,2007c2c <__lo0bits+0x98>
 2007ba8:	1880008c 	andi	r2,r3,2
 2007bac:	1000211e 	bne	r2,zero,2007c34 <__lo0bits+0xa0>
 2007bb0:	1806d0ba 	srli	r3,r3,2
 2007bb4:	00800084 	movi	r2,2
 2007bb8:	20c00015 	stw	r3,0(r4)
 2007bbc:	f800283a 	ret
 2007bc0:	18bfffcc 	andi	r2,r3,65535
 2007bc4:	10001326 	beq	r2,zero,2007c14 <__lo0bits+0x80>
 2007bc8:	0005883a 	mov	r2,zero
 2007bcc:	19403fcc 	andi	r5,r3,255
 2007bd0:	2800021e 	bne	r5,zero,2007bdc <__lo0bits+0x48>
 2007bd4:	1806d23a 	srli	r3,r3,8
 2007bd8:	10800204 	addi	r2,r2,8
 2007bdc:	194003cc 	andi	r5,r3,15
 2007be0:	2800021e 	bne	r5,zero,2007bec <__lo0bits+0x58>
 2007be4:	1806d13a 	srli	r3,r3,4
 2007be8:	10800104 	addi	r2,r2,4
 2007bec:	194000cc 	andi	r5,r3,3
 2007bf0:	2800021e 	bne	r5,zero,2007bfc <__lo0bits+0x68>
 2007bf4:	1806d0ba 	srli	r3,r3,2
 2007bf8:	10800084 	addi	r2,r2,2
 2007bfc:	1940004c 	andi	r5,r3,1
 2007c00:	2800081e 	bne	r5,zero,2007c24 <__lo0bits+0x90>
 2007c04:	1806d07a 	srli	r3,r3,1
 2007c08:	1800051e 	bne	r3,zero,2007c20 <__lo0bits+0x8c>
 2007c0c:	00800804 	movi	r2,32
 2007c10:	f800283a 	ret
 2007c14:	1806d43a 	srli	r3,r3,16
 2007c18:	00800404 	movi	r2,16
 2007c1c:	003feb06 	br	2007bcc <__alt_data_end+0xff007bcc>
 2007c20:	10800044 	addi	r2,r2,1
 2007c24:	20c00015 	stw	r3,0(r4)
 2007c28:	f800283a 	ret
 2007c2c:	0005883a 	mov	r2,zero
 2007c30:	f800283a 	ret
 2007c34:	1806d07a 	srli	r3,r3,1
 2007c38:	00800044 	movi	r2,1
 2007c3c:	20c00015 	stw	r3,0(r4)
 2007c40:	f800283a 	ret

02007c44 <__i2b>:
 2007c44:	defffd04 	addi	sp,sp,-12
 2007c48:	dc000015 	stw	r16,0(sp)
 2007c4c:	04000044 	movi	r16,1
 2007c50:	dc400115 	stw	r17,4(sp)
 2007c54:	2823883a 	mov	r17,r5
 2007c58:	800b883a 	mov	r5,r16
 2007c5c:	dfc00215 	stw	ra,8(sp)
 2007c60:	20078100 	call	2007810 <_Balloc>
 2007c64:	14400515 	stw	r17,20(r2)
 2007c68:	14000415 	stw	r16,16(r2)
 2007c6c:	dfc00217 	ldw	ra,8(sp)
 2007c70:	dc400117 	ldw	r17,4(sp)
 2007c74:	dc000017 	ldw	r16,0(sp)
 2007c78:	dec00304 	addi	sp,sp,12
 2007c7c:	f800283a 	ret

02007c80 <__multiply>:
 2007c80:	deffef04 	addi	sp,sp,-68
 2007c84:	dc400815 	stw	r17,32(sp)
 2007c88:	dc000715 	stw	r16,28(sp)
 2007c8c:	34400417 	ldw	r17,16(r6)
 2007c90:	2c000417 	ldw	r16,16(r5)
 2007c94:	dd800d15 	stw	r22,52(sp)
 2007c98:	dc800915 	stw	r18,36(sp)
 2007c9c:	dfc01015 	stw	ra,64(sp)
 2007ca0:	df000f15 	stw	fp,60(sp)
 2007ca4:	ddc00e15 	stw	r23,56(sp)
 2007ca8:	dd400c15 	stw	r21,48(sp)
 2007cac:	dd000b15 	stw	r20,44(sp)
 2007cb0:	dcc00a15 	stw	r19,40(sp)
 2007cb4:	2825883a 	mov	r18,r5
 2007cb8:	302d883a 	mov	r22,r6
 2007cbc:	8440050e 	bge	r16,r17,2007cd4 <__multiply+0x54>
 2007cc0:	8007883a 	mov	r3,r16
 2007cc4:	3025883a 	mov	r18,r6
 2007cc8:	8821883a 	mov	r16,r17
 2007ccc:	282d883a 	mov	r22,r5
 2007cd0:	1823883a 	mov	r17,r3
 2007cd4:	90800217 	ldw	r2,8(r18)
 2007cd8:	8447883a 	add	r3,r16,r17
 2007cdc:	d8c00215 	stw	r3,8(sp)
 2007ce0:	91400117 	ldw	r5,4(r18)
 2007ce4:	10c0010e 	bge	r2,r3,2007cec <__multiply+0x6c>
 2007ce8:	29400044 	addi	r5,r5,1
 2007cec:	20078100 	call	2007810 <_Balloc>
 2007cf0:	d8c00217 	ldw	r3,8(sp)
 2007cf4:	d8800615 	stw	r2,24(sp)
 2007cf8:	18eb883a 	add	r21,r3,r3
 2007cfc:	ad6b883a 	add	r21,r21,r21
 2007d00:	10c00504 	addi	r3,r2,20
 2007d04:	1d6b883a 	add	r21,r3,r21
 2007d08:	d8c00115 	stw	r3,4(sp)
 2007d0c:	dd400315 	stw	r21,12(sp)
 2007d10:	1805883a 	mov	r2,r3
 2007d14:	1d40042e 	bgeu	r3,r21,2007d28 <__multiply+0xa8>
 2007d18:	d8c00317 	ldw	r3,12(sp)
 2007d1c:	10000015 	stw	zero,0(r2)
 2007d20:	10800104 	addi	r2,r2,4
 2007d24:	10fffc36 	bltu	r2,r3,2007d18 <__alt_data_end+0xff007d18>
 2007d28:	8c63883a 	add	r17,r17,r17
 2007d2c:	b5800504 	addi	r22,r22,20
 2007d30:	8c63883a 	add	r17,r17,r17
 2007d34:	94800504 	addi	r18,r18,20
 2007d38:	8421883a 	add	r16,r16,r16
 2007d3c:	b463883a 	add	r17,r22,r17
 2007d40:	8421883a 	add	r16,r16,r16
 2007d44:	dd800015 	stw	r22,0(sp)
 2007d48:	dc800415 	stw	r18,16(sp)
 2007d4c:	dc400515 	stw	r17,20(sp)
 2007d50:	9429883a 	add	r20,r18,r16
 2007d54:	b4404f2e 	bgeu	r22,r17,2007e94 <__multiply+0x214>
 2007d58:	d8c00017 	ldw	r3,0(sp)
 2007d5c:	1c800017 	ldw	r18,0(r3)
 2007d60:	947fffcc 	andi	r17,r18,65535
 2007d64:	88001e26 	beq	r17,zero,2007de0 <__multiply+0x160>
 2007d68:	dd800117 	ldw	r22,4(sp)
 2007d6c:	dd400417 	ldw	r21,16(sp)
 2007d70:	0027883a 	mov	r19,zero
 2007d74:	ac800017 	ldw	r18,0(r21)
 2007d78:	b4000017 	ldw	r16,0(r22)
 2007d7c:	880b883a 	mov	r5,r17
 2007d80:	913fffcc 	andi	r4,r18,65535
 2007d84:	20018280 	call	2001828 <__mulsi3>
 2007d88:	9008d43a 	srli	r4,r18,16
 2007d8c:	84bfffcc 	andi	r18,r16,65535
 2007d90:	1485883a 	add	r2,r2,r18
 2007d94:	14e5883a 	add	r18,r2,r19
 2007d98:	8020d43a 	srli	r16,r16,16
 2007d9c:	9026d43a 	srli	r19,r18,16
 2007da0:	880b883a 	mov	r5,r17
 2007da4:	20018280 	call	2001828 <__mulsi3>
 2007da8:	1405883a 	add	r2,r2,r16
 2007dac:	14e1883a 	add	r16,r2,r19
 2007db0:	90ffffcc 	andi	r3,r18,65535
 2007db4:	8024943a 	slli	r18,r16,16
 2007db8:	ad400104 	addi	r21,r21,4
 2007dbc:	b005883a 	mov	r2,r22
 2007dc0:	90c6b03a 	or	r3,r18,r3
 2007dc4:	b0c00015 	stw	r3,0(r22)
 2007dc8:	8026d43a 	srli	r19,r16,16
 2007dcc:	b5800104 	addi	r22,r22,4
 2007dd0:	ad3fe836 	bltu	r21,r20,2007d74 <__alt_data_end+0xff007d74>
 2007dd4:	d8c00017 	ldw	r3,0(sp)
 2007dd8:	14c00115 	stw	r19,4(r2)
 2007ddc:	1c800017 	ldw	r18,0(r3)
 2007de0:	9024d43a 	srli	r18,r18,16
 2007de4:	90002226 	beq	r18,zero,2007e70 <__multiply+0x1f0>
 2007de8:	d8c00117 	ldw	r3,4(sp)
 2007dec:	dd800417 	ldw	r22,16(sp)
 2007df0:	002f883a 	mov	r23,zero
 2007df4:	1f000017 	ldw	fp,0(r3)
 2007df8:	1823883a 	mov	r17,r3
 2007dfc:	182b883a 	mov	r21,r3
 2007e00:	e021883a 	mov	r16,fp
 2007e04:	00000106 	br	2007e0c <__multiply+0x18c>
 2007e08:	982b883a 	mov	r21,r19
 2007e0c:	b100000b 	ldhu	r4,0(r22)
 2007e10:	8020d43a 	srli	r16,r16,16
 2007e14:	900b883a 	mov	r5,r18
 2007e18:	20018280 	call	2001828 <__mulsi3>
 2007e1c:	1405883a 	add	r2,r2,r16
 2007e20:	15ef883a 	add	r23,r2,r23
 2007e24:	b804943a 	slli	r2,r23,16
 2007e28:	e0ffffcc 	andi	r3,fp,65535
 2007e2c:	8c400104 	addi	r17,r17,4
 2007e30:	10c6b03a 	or	r3,r2,r3
 2007e34:	88ffff15 	stw	r3,-4(r17)
 2007e38:	b5800104 	addi	r22,r22,4
 2007e3c:	b13fff17 	ldw	r4,-4(r22)
 2007e40:	acc00104 	addi	r19,r21,4
 2007e44:	900b883a 	mov	r5,r18
 2007e48:	2008d43a 	srli	r4,r4,16
 2007e4c:	9c000017 	ldw	r16,0(r19)
 2007e50:	20018280 	call	2001828 <__mulsi3>
 2007e54:	b806d43a 	srli	r3,r23,16
 2007e58:	813fffcc 	andi	r4,r16,65535
 2007e5c:	1105883a 	add	r2,r2,r4
 2007e60:	10f9883a 	add	fp,r2,r3
 2007e64:	e02ed43a 	srli	r23,fp,16
 2007e68:	b53fe736 	bltu	r22,r20,2007e08 <__alt_data_end+0xff007e08>
 2007e6c:	af000115 	stw	fp,4(r21)
 2007e70:	d8c00017 	ldw	r3,0(sp)
 2007e74:	d9000517 	ldw	r4,20(sp)
 2007e78:	18c00104 	addi	r3,r3,4
 2007e7c:	d8c00015 	stw	r3,0(sp)
 2007e80:	d8c00117 	ldw	r3,4(sp)
 2007e84:	18c00104 	addi	r3,r3,4
 2007e88:	d8c00115 	stw	r3,4(sp)
 2007e8c:	d8c00017 	ldw	r3,0(sp)
 2007e90:	193fb136 	bltu	r3,r4,2007d58 <__alt_data_end+0xff007d58>
 2007e94:	d8c00217 	ldw	r3,8(sp)
 2007e98:	00c00c0e 	bge	zero,r3,2007ecc <__multiply+0x24c>
 2007e9c:	d8c00317 	ldw	r3,12(sp)
 2007ea0:	18bfff17 	ldw	r2,-4(r3)
 2007ea4:	1d7fff04 	addi	r21,r3,-4
 2007ea8:	10000326 	beq	r2,zero,2007eb8 <__multiply+0x238>
 2007eac:	00000706 	br	2007ecc <__multiply+0x24c>
 2007eb0:	a8800017 	ldw	r2,0(r21)
 2007eb4:	1000051e 	bne	r2,zero,2007ecc <__multiply+0x24c>
 2007eb8:	d8c00217 	ldw	r3,8(sp)
 2007ebc:	ad7fff04 	addi	r21,r21,-4
 2007ec0:	18ffffc4 	addi	r3,r3,-1
 2007ec4:	d8c00215 	stw	r3,8(sp)
 2007ec8:	183ff91e 	bne	r3,zero,2007eb0 <__alt_data_end+0xff007eb0>
 2007ecc:	d8c00617 	ldw	r3,24(sp)
 2007ed0:	d9000217 	ldw	r4,8(sp)
 2007ed4:	1805883a 	mov	r2,r3
 2007ed8:	19000415 	stw	r4,16(r3)
 2007edc:	dfc01017 	ldw	ra,64(sp)
 2007ee0:	df000f17 	ldw	fp,60(sp)
 2007ee4:	ddc00e17 	ldw	r23,56(sp)
 2007ee8:	dd800d17 	ldw	r22,52(sp)
 2007eec:	dd400c17 	ldw	r21,48(sp)
 2007ef0:	dd000b17 	ldw	r20,44(sp)
 2007ef4:	dcc00a17 	ldw	r19,40(sp)
 2007ef8:	dc800917 	ldw	r18,36(sp)
 2007efc:	dc400817 	ldw	r17,32(sp)
 2007f00:	dc000717 	ldw	r16,28(sp)
 2007f04:	dec01104 	addi	sp,sp,68
 2007f08:	f800283a 	ret

02007f0c <__pow5mult>:
 2007f0c:	defffa04 	addi	sp,sp,-24
 2007f10:	dcc00315 	stw	r19,12(sp)
 2007f14:	dc000015 	stw	r16,0(sp)
 2007f18:	dfc00515 	stw	ra,20(sp)
 2007f1c:	dd000415 	stw	r20,16(sp)
 2007f20:	dc800215 	stw	r18,8(sp)
 2007f24:	dc400115 	stw	r17,4(sp)
 2007f28:	308000cc 	andi	r2,r6,3
 2007f2c:	3021883a 	mov	r16,r6
 2007f30:	2027883a 	mov	r19,r4
 2007f34:	10002f1e 	bne	r2,zero,2007ff4 <__pow5mult+0xe8>
 2007f38:	2825883a 	mov	r18,r5
 2007f3c:	8021d0ba 	srai	r16,r16,2
 2007f40:	80001a26 	beq	r16,zero,2007fac <__pow5mult+0xa0>
 2007f44:	9c401217 	ldw	r17,72(r19)
 2007f48:	8800061e 	bne	r17,zero,2007f64 <__pow5mult+0x58>
 2007f4c:	00003406 	br	2008020 <__pow5mult+0x114>
 2007f50:	8021d07a 	srai	r16,r16,1
 2007f54:	80001526 	beq	r16,zero,2007fac <__pow5mult+0xa0>
 2007f58:	88800017 	ldw	r2,0(r17)
 2007f5c:	10001c26 	beq	r2,zero,2007fd0 <__pow5mult+0xc4>
 2007f60:	1023883a 	mov	r17,r2
 2007f64:	8080004c 	andi	r2,r16,1
 2007f68:	103ff926 	beq	r2,zero,2007f50 <__alt_data_end+0xff007f50>
 2007f6c:	880d883a 	mov	r6,r17
 2007f70:	900b883a 	mov	r5,r18
 2007f74:	9809883a 	mov	r4,r19
 2007f78:	2007c800 	call	2007c80 <__multiply>
 2007f7c:	90001b26 	beq	r18,zero,2007fec <__pow5mult+0xe0>
 2007f80:	91000117 	ldw	r4,4(r18)
 2007f84:	98c01317 	ldw	r3,76(r19)
 2007f88:	8021d07a 	srai	r16,r16,1
 2007f8c:	2109883a 	add	r4,r4,r4
 2007f90:	2109883a 	add	r4,r4,r4
 2007f94:	1907883a 	add	r3,r3,r4
 2007f98:	19000017 	ldw	r4,0(r3)
 2007f9c:	91000015 	stw	r4,0(r18)
 2007fa0:	1c800015 	stw	r18,0(r3)
 2007fa4:	1025883a 	mov	r18,r2
 2007fa8:	803feb1e 	bne	r16,zero,2007f58 <__alt_data_end+0xff007f58>
 2007fac:	9005883a 	mov	r2,r18
 2007fb0:	dfc00517 	ldw	ra,20(sp)
 2007fb4:	dd000417 	ldw	r20,16(sp)
 2007fb8:	dcc00317 	ldw	r19,12(sp)
 2007fbc:	dc800217 	ldw	r18,8(sp)
 2007fc0:	dc400117 	ldw	r17,4(sp)
 2007fc4:	dc000017 	ldw	r16,0(sp)
 2007fc8:	dec00604 	addi	sp,sp,24
 2007fcc:	f800283a 	ret
 2007fd0:	880d883a 	mov	r6,r17
 2007fd4:	880b883a 	mov	r5,r17
 2007fd8:	9809883a 	mov	r4,r19
 2007fdc:	2007c800 	call	2007c80 <__multiply>
 2007fe0:	88800015 	stw	r2,0(r17)
 2007fe4:	10000015 	stw	zero,0(r2)
 2007fe8:	003fdd06 	br	2007f60 <__alt_data_end+0xff007f60>
 2007fec:	1025883a 	mov	r18,r2
 2007ff0:	003fd706 	br	2007f50 <__alt_data_end+0xff007f50>
 2007ff4:	10bfffc4 	addi	r2,r2,-1
 2007ff8:	1085883a 	add	r2,r2,r2
 2007ffc:	00c08074 	movhi	r3,513
 2008000:	18c42204 	addi	r3,r3,4232
 2008004:	1085883a 	add	r2,r2,r2
 2008008:	1885883a 	add	r2,r3,r2
 200800c:	11800017 	ldw	r6,0(r2)
 2008010:	000f883a 	mov	r7,zero
 2008014:	20078e00 	call	20078e0 <__multadd>
 2008018:	1025883a 	mov	r18,r2
 200801c:	003fc706 	br	2007f3c <__alt_data_end+0xff007f3c>
 2008020:	05000044 	movi	r20,1
 2008024:	a00b883a 	mov	r5,r20
 2008028:	9809883a 	mov	r4,r19
 200802c:	20078100 	call	2007810 <_Balloc>
 2008030:	1023883a 	mov	r17,r2
 2008034:	00809c44 	movi	r2,625
 2008038:	88800515 	stw	r2,20(r17)
 200803c:	8d000415 	stw	r20,16(r17)
 2008040:	9c401215 	stw	r17,72(r19)
 2008044:	88000015 	stw	zero,0(r17)
 2008048:	003fc606 	br	2007f64 <__alt_data_end+0xff007f64>

0200804c <__lshift>:
 200804c:	defff904 	addi	sp,sp,-28
 2008050:	dd400515 	stw	r21,20(sp)
 2008054:	dcc00315 	stw	r19,12(sp)
 2008058:	302bd17a 	srai	r21,r6,5
 200805c:	2cc00417 	ldw	r19,16(r5)
 2008060:	28800217 	ldw	r2,8(r5)
 2008064:	dd000415 	stw	r20,16(sp)
 2008068:	ace7883a 	add	r19,r21,r19
 200806c:	dc800215 	stw	r18,8(sp)
 2008070:	dc400115 	stw	r17,4(sp)
 2008074:	dc000015 	stw	r16,0(sp)
 2008078:	dfc00615 	stw	ra,24(sp)
 200807c:	9c000044 	addi	r16,r19,1
 2008080:	2823883a 	mov	r17,r5
 2008084:	3029883a 	mov	r20,r6
 2008088:	2025883a 	mov	r18,r4
 200808c:	29400117 	ldw	r5,4(r5)
 2008090:	1400030e 	bge	r2,r16,20080a0 <__lshift+0x54>
 2008094:	1085883a 	add	r2,r2,r2
 2008098:	29400044 	addi	r5,r5,1
 200809c:	143ffd16 	blt	r2,r16,2008094 <__alt_data_end+0xff008094>
 20080a0:	9009883a 	mov	r4,r18
 20080a4:	20078100 	call	2007810 <_Balloc>
 20080a8:	10c00504 	addi	r3,r2,20
 20080ac:	0540070e 	bge	zero,r21,20080cc <__lshift+0x80>
 20080b0:	ad6b883a 	add	r21,r21,r21
 20080b4:	ad6b883a 	add	r21,r21,r21
 20080b8:	1809883a 	mov	r4,r3
 20080bc:	1d47883a 	add	r3,r3,r21
 20080c0:	20000015 	stw	zero,0(r4)
 20080c4:	21000104 	addi	r4,r4,4
 20080c8:	193ffd1e 	bne	r3,r4,20080c0 <__alt_data_end+0xff0080c0>
 20080cc:	8a000417 	ldw	r8,16(r17)
 20080d0:	89000504 	addi	r4,r17,20
 20080d4:	a18007cc 	andi	r6,r20,31
 20080d8:	4211883a 	add	r8,r8,r8
 20080dc:	4211883a 	add	r8,r8,r8
 20080e0:	2211883a 	add	r8,r4,r8
 20080e4:	30002326 	beq	r6,zero,2008174 <__lshift+0x128>
 20080e8:	02400804 	movi	r9,32
 20080ec:	4993c83a 	sub	r9,r9,r6
 20080f0:	000b883a 	mov	r5,zero
 20080f4:	21c00017 	ldw	r7,0(r4)
 20080f8:	1815883a 	mov	r10,r3
 20080fc:	18c00104 	addi	r3,r3,4
 2008100:	398e983a 	sll	r7,r7,r6
 2008104:	21000104 	addi	r4,r4,4
 2008108:	394ab03a 	or	r5,r7,r5
 200810c:	197fff15 	stw	r5,-4(r3)
 2008110:	217fff17 	ldw	r5,-4(r4)
 2008114:	2a4ad83a 	srl	r5,r5,r9
 2008118:	223ff636 	bltu	r4,r8,20080f4 <__alt_data_end+0xff0080f4>
 200811c:	51400115 	stw	r5,4(r10)
 2008120:	28001a1e 	bne	r5,zero,200818c <__lshift+0x140>
 2008124:	843fffc4 	addi	r16,r16,-1
 2008128:	14000415 	stw	r16,16(r2)
 200812c:	88000826 	beq	r17,zero,2008150 <__lshift+0x104>
 2008130:	89000117 	ldw	r4,4(r17)
 2008134:	90c01317 	ldw	r3,76(r18)
 2008138:	2109883a 	add	r4,r4,r4
 200813c:	2109883a 	add	r4,r4,r4
 2008140:	1907883a 	add	r3,r3,r4
 2008144:	19000017 	ldw	r4,0(r3)
 2008148:	89000015 	stw	r4,0(r17)
 200814c:	1c400015 	stw	r17,0(r3)
 2008150:	dfc00617 	ldw	ra,24(sp)
 2008154:	dd400517 	ldw	r21,20(sp)
 2008158:	dd000417 	ldw	r20,16(sp)
 200815c:	dcc00317 	ldw	r19,12(sp)
 2008160:	dc800217 	ldw	r18,8(sp)
 2008164:	dc400117 	ldw	r17,4(sp)
 2008168:	dc000017 	ldw	r16,0(sp)
 200816c:	dec00704 	addi	sp,sp,28
 2008170:	f800283a 	ret
 2008174:	21400017 	ldw	r5,0(r4)
 2008178:	18c00104 	addi	r3,r3,4
 200817c:	21000104 	addi	r4,r4,4
 2008180:	197fff15 	stw	r5,-4(r3)
 2008184:	223ffb36 	bltu	r4,r8,2008174 <__alt_data_end+0xff008174>
 2008188:	003fe606 	br	2008124 <__alt_data_end+0xff008124>
 200818c:	9c000084 	addi	r16,r19,2
 2008190:	003fe406 	br	2008124 <__alt_data_end+0xff008124>

02008194 <__mcmp>:
 2008194:	20800417 	ldw	r2,16(r4)
 2008198:	28c00417 	ldw	r3,16(r5)
 200819c:	10c5c83a 	sub	r2,r2,r3
 20081a0:	1000111e 	bne	r2,zero,20081e8 <__mcmp+0x54>
 20081a4:	18c7883a 	add	r3,r3,r3
 20081a8:	18c7883a 	add	r3,r3,r3
 20081ac:	21000504 	addi	r4,r4,20
 20081b0:	29400504 	addi	r5,r5,20
 20081b4:	20c5883a 	add	r2,r4,r3
 20081b8:	28cb883a 	add	r5,r5,r3
 20081bc:	00000106 	br	20081c4 <__mcmp+0x30>
 20081c0:	20800a2e 	bgeu	r4,r2,20081ec <__mcmp+0x58>
 20081c4:	10bfff04 	addi	r2,r2,-4
 20081c8:	297fff04 	addi	r5,r5,-4
 20081cc:	11800017 	ldw	r6,0(r2)
 20081d0:	28c00017 	ldw	r3,0(r5)
 20081d4:	30fffa26 	beq	r6,r3,20081c0 <__alt_data_end+0xff0081c0>
 20081d8:	30c00236 	bltu	r6,r3,20081e4 <__mcmp+0x50>
 20081dc:	00800044 	movi	r2,1
 20081e0:	f800283a 	ret
 20081e4:	00bfffc4 	movi	r2,-1
 20081e8:	f800283a 	ret
 20081ec:	0005883a 	mov	r2,zero
 20081f0:	f800283a 	ret

020081f4 <__mdiff>:
 20081f4:	28c00417 	ldw	r3,16(r5)
 20081f8:	30800417 	ldw	r2,16(r6)
 20081fc:	defffa04 	addi	sp,sp,-24
 2008200:	dcc00315 	stw	r19,12(sp)
 2008204:	dc800215 	stw	r18,8(sp)
 2008208:	dfc00515 	stw	ra,20(sp)
 200820c:	dd000415 	stw	r20,16(sp)
 2008210:	dc400115 	stw	r17,4(sp)
 2008214:	dc000015 	stw	r16,0(sp)
 2008218:	1887c83a 	sub	r3,r3,r2
 200821c:	2825883a 	mov	r18,r5
 2008220:	3027883a 	mov	r19,r6
 2008224:	1800141e 	bne	r3,zero,2008278 <__mdiff+0x84>
 2008228:	1085883a 	add	r2,r2,r2
 200822c:	1085883a 	add	r2,r2,r2
 2008230:	2a000504 	addi	r8,r5,20
 2008234:	34000504 	addi	r16,r6,20
 2008238:	4087883a 	add	r3,r8,r2
 200823c:	8085883a 	add	r2,r16,r2
 2008240:	00000106 	br	2008248 <__mdiff+0x54>
 2008244:	40c0592e 	bgeu	r8,r3,20083ac <__mdiff+0x1b8>
 2008248:	18ffff04 	addi	r3,r3,-4
 200824c:	10bfff04 	addi	r2,r2,-4
 2008250:	19c00017 	ldw	r7,0(r3)
 2008254:	11400017 	ldw	r5,0(r2)
 2008258:	397ffa26 	beq	r7,r5,2008244 <__alt_data_end+0xff008244>
 200825c:	3940592e 	bgeu	r7,r5,20083c4 <__mdiff+0x1d0>
 2008260:	9005883a 	mov	r2,r18
 2008264:	4023883a 	mov	r17,r8
 2008268:	9825883a 	mov	r18,r19
 200826c:	05000044 	movi	r20,1
 2008270:	1027883a 	mov	r19,r2
 2008274:	00000406 	br	2008288 <__mdiff+0x94>
 2008278:	18005616 	blt	r3,zero,20083d4 <__mdiff+0x1e0>
 200827c:	34400504 	addi	r17,r6,20
 2008280:	2c000504 	addi	r16,r5,20
 2008284:	0029883a 	mov	r20,zero
 2008288:	91400117 	ldw	r5,4(r18)
 200828c:	20078100 	call	2007810 <_Balloc>
 2008290:	92400417 	ldw	r9,16(r18)
 2008294:	9b000417 	ldw	r12,16(r19)
 2008298:	12c00504 	addi	r11,r2,20
 200829c:	4a51883a 	add	r8,r9,r9
 20082a0:	6319883a 	add	r12,r12,r12
 20082a4:	4211883a 	add	r8,r8,r8
 20082a8:	6319883a 	add	r12,r12,r12
 20082ac:	15000315 	stw	r20,12(r2)
 20082b0:	8211883a 	add	r8,r16,r8
 20082b4:	8b19883a 	add	r12,r17,r12
 20082b8:	0007883a 	mov	r3,zero
 20082bc:	81400017 	ldw	r5,0(r16)
 20082c0:	89c00017 	ldw	r7,0(r17)
 20082c4:	59800104 	addi	r6,r11,4
 20082c8:	293fffcc 	andi	r4,r5,65535
 20082cc:	20c7883a 	add	r3,r4,r3
 20082d0:	393fffcc 	andi	r4,r7,65535
 20082d4:	1909c83a 	sub	r4,r3,r4
 20082d8:	280ad43a 	srli	r5,r5,16
 20082dc:	380ed43a 	srli	r7,r7,16
 20082e0:	2007d43a 	srai	r3,r4,16
 20082e4:	213fffcc 	andi	r4,r4,65535
 20082e8:	29cbc83a 	sub	r5,r5,r7
 20082ec:	28c7883a 	add	r3,r5,r3
 20082f0:	180a943a 	slli	r5,r3,16
 20082f4:	8c400104 	addi	r17,r17,4
 20082f8:	84000104 	addi	r16,r16,4
 20082fc:	2908b03a 	or	r4,r5,r4
 2008300:	59000015 	stw	r4,0(r11)
 2008304:	1807d43a 	srai	r3,r3,16
 2008308:	3015883a 	mov	r10,r6
 200830c:	3017883a 	mov	r11,r6
 2008310:	8b3fea36 	bltu	r17,r12,20082bc <__alt_data_end+0xff0082bc>
 2008314:	8200162e 	bgeu	r16,r8,2008370 <__mdiff+0x17c>
 2008318:	8017883a 	mov	r11,r16
 200831c:	59400017 	ldw	r5,0(r11)
 2008320:	31800104 	addi	r6,r6,4
 2008324:	5ac00104 	addi	r11,r11,4
 2008328:	293fffcc 	andi	r4,r5,65535
 200832c:	20c7883a 	add	r3,r4,r3
 2008330:	280ed43a 	srli	r7,r5,16
 2008334:	180bd43a 	srai	r5,r3,16
 2008338:	193fffcc 	andi	r4,r3,65535
 200833c:	3947883a 	add	r3,r7,r5
 2008340:	180a943a 	slli	r5,r3,16
 2008344:	1807d43a 	srai	r3,r3,16
 2008348:	2908b03a 	or	r4,r5,r4
 200834c:	313fff15 	stw	r4,-4(r6)
 2008350:	5a3ff236 	bltu	r11,r8,200831c <__alt_data_end+0xff00831c>
 2008354:	0406303a 	nor	r3,zero,r16
 2008358:	1a07883a 	add	r3,r3,r8
 200835c:	1806d0ba 	srli	r3,r3,2
 2008360:	18c00044 	addi	r3,r3,1
 2008364:	18c7883a 	add	r3,r3,r3
 2008368:	18c7883a 	add	r3,r3,r3
 200836c:	50d5883a 	add	r10,r10,r3
 2008370:	50ffff04 	addi	r3,r10,-4
 2008374:	2000041e 	bne	r4,zero,2008388 <__mdiff+0x194>
 2008378:	18ffff04 	addi	r3,r3,-4
 200837c:	19000017 	ldw	r4,0(r3)
 2008380:	4a7fffc4 	addi	r9,r9,-1
 2008384:	203ffc26 	beq	r4,zero,2008378 <__alt_data_end+0xff008378>
 2008388:	12400415 	stw	r9,16(r2)
 200838c:	dfc00517 	ldw	ra,20(sp)
 2008390:	dd000417 	ldw	r20,16(sp)
 2008394:	dcc00317 	ldw	r19,12(sp)
 2008398:	dc800217 	ldw	r18,8(sp)
 200839c:	dc400117 	ldw	r17,4(sp)
 20083a0:	dc000017 	ldw	r16,0(sp)
 20083a4:	dec00604 	addi	sp,sp,24
 20083a8:	f800283a 	ret
 20083ac:	000b883a 	mov	r5,zero
 20083b0:	20078100 	call	2007810 <_Balloc>
 20083b4:	00c00044 	movi	r3,1
 20083b8:	10c00415 	stw	r3,16(r2)
 20083bc:	10000515 	stw	zero,20(r2)
 20083c0:	003ff206 	br	200838c <__alt_data_end+0xff00838c>
 20083c4:	8023883a 	mov	r17,r16
 20083c8:	0029883a 	mov	r20,zero
 20083cc:	4021883a 	mov	r16,r8
 20083d0:	003fad06 	br	2008288 <__alt_data_end+0xff008288>
 20083d4:	9005883a 	mov	r2,r18
 20083d8:	94400504 	addi	r17,r18,20
 20083dc:	9c000504 	addi	r16,r19,20
 20083e0:	9825883a 	mov	r18,r19
 20083e4:	05000044 	movi	r20,1
 20083e8:	1027883a 	mov	r19,r2
 20083ec:	003fa606 	br	2008288 <__alt_data_end+0xff008288>

020083f0 <__ulp>:
 20083f0:	295ffc2c 	andhi	r5,r5,32752
 20083f4:	00bf3034 	movhi	r2,64704
 20083f8:	2887883a 	add	r3,r5,r2
 20083fc:	00c0020e 	bge	zero,r3,2008408 <__ulp+0x18>
 2008400:	0005883a 	mov	r2,zero
 2008404:	f800283a 	ret
 2008408:	00c7c83a 	sub	r3,zero,r3
 200840c:	1807d53a 	srai	r3,r3,20
 2008410:	008004c4 	movi	r2,19
 2008414:	10c00b0e 	bge	r2,r3,2008444 <__ulp+0x54>
 2008418:	18bffb04 	addi	r2,r3,-20
 200841c:	01000784 	movi	r4,30
 2008420:	0007883a 	mov	r3,zero
 2008424:	20800516 	blt	r4,r2,200843c <__ulp+0x4c>
 2008428:	010007c4 	movi	r4,31
 200842c:	2089c83a 	sub	r4,r4,r2
 2008430:	00800044 	movi	r2,1
 2008434:	1104983a 	sll	r2,r2,r4
 2008438:	f800283a 	ret
 200843c:	00800044 	movi	r2,1
 2008440:	f800283a 	ret
 2008444:	01400234 	movhi	r5,8
 2008448:	28c7d83a 	sra	r3,r5,r3
 200844c:	0005883a 	mov	r2,zero
 2008450:	f800283a 	ret

02008454 <__b2d>:
 2008454:	defffa04 	addi	sp,sp,-24
 2008458:	dc000015 	stw	r16,0(sp)
 200845c:	24000417 	ldw	r16,16(r4)
 2008460:	dc400115 	stw	r17,4(sp)
 2008464:	24400504 	addi	r17,r4,20
 2008468:	8421883a 	add	r16,r16,r16
 200846c:	8421883a 	add	r16,r16,r16
 2008470:	8c21883a 	add	r16,r17,r16
 2008474:	dc800215 	stw	r18,8(sp)
 2008478:	84bfff17 	ldw	r18,-4(r16)
 200847c:	dd000415 	stw	r20,16(sp)
 2008480:	dcc00315 	stw	r19,12(sp)
 2008484:	9009883a 	mov	r4,r18
 2008488:	2829883a 	mov	r20,r5
 200848c:	dfc00515 	stw	ra,20(sp)
 2008490:	2007b2c0 	call	2007b2c <__hi0bits>
 2008494:	00c00804 	movi	r3,32
 2008498:	1889c83a 	sub	r4,r3,r2
 200849c:	a1000015 	stw	r4,0(r20)
 20084a0:	01000284 	movi	r4,10
 20084a4:	84ffff04 	addi	r19,r16,-4
 20084a8:	20801216 	blt	r4,r2,20084f4 <__b2d+0xa0>
 20084ac:	018002c4 	movi	r6,11
 20084b0:	308dc83a 	sub	r6,r6,r2
 20084b4:	9186d83a 	srl	r3,r18,r6
 20084b8:	18cffc34 	orhi	r3,r3,16368
 20084bc:	8cc0212e 	bgeu	r17,r19,2008544 <__b2d+0xf0>
 20084c0:	813ffe17 	ldw	r4,-8(r16)
 20084c4:	218cd83a 	srl	r6,r4,r6
 20084c8:	10800544 	addi	r2,r2,21
 20084cc:	9084983a 	sll	r2,r18,r2
 20084d0:	1184b03a 	or	r2,r2,r6
 20084d4:	dfc00517 	ldw	ra,20(sp)
 20084d8:	dd000417 	ldw	r20,16(sp)
 20084dc:	dcc00317 	ldw	r19,12(sp)
 20084e0:	dc800217 	ldw	r18,8(sp)
 20084e4:	dc400117 	ldw	r17,4(sp)
 20084e8:	dc000017 	ldw	r16,0(sp)
 20084ec:	dec00604 	addi	sp,sp,24
 20084f0:	f800283a 	ret
 20084f4:	8cc00f2e 	bgeu	r17,r19,2008534 <__b2d+0xe0>
 20084f8:	117ffd44 	addi	r5,r2,-11
 20084fc:	80bffe17 	ldw	r2,-8(r16)
 2008500:	28000e26 	beq	r5,zero,200853c <__b2d+0xe8>
 2008504:	1949c83a 	sub	r4,r3,r5
 2008508:	9164983a 	sll	r18,r18,r5
 200850c:	1106d83a 	srl	r3,r2,r4
 2008510:	81bffe04 	addi	r6,r16,-8
 2008514:	948ffc34 	orhi	r18,r18,16368
 2008518:	90c6b03a 	or	r3,r18,r3
 200851c:	89800e2e 	bgeu	r17,r6,2008558 <__b2d+0x104>
 2008520:	81bffd17 	ldw	r6,-12(r16)
 2008524:	1144983a 	sll	r2,r2,r5
 2008528:	310ad83a 	srl	r5,r6,r4
 200852c:	2884b03a 	or	r2,r5,r2
 2008530:	003fe806 	br	20084d4 <__alt_data_end+0xff0084d4>
 2008534:	10bffd44 	addi	r2,r2,-11
 2008538:	1000041e 	bne	r2,zero,200854c <__b2d+0xf8>
 200853c:	90cffc34 	orhi	r3,r18,16368
 2008540:	003fe406 	br	20084d4 <__alt_data_end+0xff0084d4>
 2008544:	000d883a 	mov	r6,zero
 2008548:	003fdf06 	br	20084c8 <__alt_data_end+0xff0084c8>
 200854c:	90a4983a 	sll	r18,r18,r2
 2008550:	0005883a 	mov	r2,zero
 2008554:	003ff906 	br	200853c <__alt_data_end+0xff00853c>
 2008558:	1144983a 	sll	r2,r2,r5
 200855c:	003fdd06 	br	20084d4 <__alt_data_end+0xff0084d4>

02008560 <__d2b>:
 2008560:	defff804 	addi	sp,sp,-32
 2008564:	dc000215 	stw	r16,8(sp)
 2008568:	3021883a 	mov	r16,r6
 200856c:	dc400315 	stw	r17,12(sp)
 2008570:	8022907a 	slli	r17,r16,1
 2008574:	dd000615 	stw	r20,24(sp)
 2008578:	2829883a 	mov	r20,r5
 200857c:	01400044 	movi	r5,1
 2008580:	dcc00515 	stw	r19,20(sp)
 2008584:	dc800415 	stw	r18,16(sp)
 2008588:	dfc00715 	stw	ra,28(sp)
 200858c:	3825883a 	mov	r18,r7
 2008590:	8822d57a 	srli	r17,r17,21
 2008594:	20078100 	call	2007810 <_Balloc>
 2008598:	1027883a 	mov	r19,r2
 200859c:	00800434 	movhi	r2,16
 20085a0:	10bfffc4 	addi	r2,r2,-1
 20085a4:	808c703a 	and	r6,r16,r2
 20085a8:	88000126 	beq	r17,zero,20085b0 <__d2b+0x50>
 20085ac:	31800434 	orhi	r6,r6,16
 20085b0:	d9800015 	stw	r6,0(sp)
 20085b4:	a0002426 	beq	r20,zero,2008648 <__d2b+0xe8>
 20085b8:	d9000104 	addi	r4,sp,4
 20085bc:	dd000115 	stw	r20,4(sp)
 20085c0:	2007b940 	call	2007b94 <__lo0bits>
 20085c4:	d8c00017 	ldw	r3,0(sp)
 20085c8:	10002f1e 	bne	r2,zero,2008688 <__d2b+0x128>
 20085cc:	d9000117 	ldw	r4,4(sp)
 20085d0:	99000515 	stw	r4,20(r19)
 20085d4:	1821003a 	cmpeq	r16,r3,zero
 20085d8:	01000084 	movi	r4,2
 20085dc:	2421c83a 	sub	r16,r4,r16
 20085e0:	98c00615 	stw	r3,24(r19)
 20085e4:	9c000415 	stw	r16,16(r19)
 20085e8:	88001f1e 	bne	r17,zero,2008668 <__d2b+0x108>
 20085ec:	10bef384 	addi	r2,r2,-1074
 20085f0:	90800015 	stw	r2,0(r18)
 20085f4:	00900034 	movhi	r2,16384
 20085f8:	10bfffc4 	addi	r2,r2,-1
 20085fc:	8085883a 	add	r2,r16,r2
 2008600:	1085883a 	add	r2,r2,r2
 2008604:	1085883a 	add	r2,r2,r2
 2008608:	9885883a 	add	r2,r19,r2
 200860c:	11000517 	ldw	r4,20(r2)
 2008610:	8020917a 	slli	r16,r16,5
 2008614:	2007b2c0 	call	2007b2c <__hi0bits>
 2008618:	d8c00817 	ldw	r3,32(sp)
 200861c:	8085c83a 	sub	r2,r16,r2
 2008620:	18800015 	stw	r2,0(r3)
 2008624:	9805883a 	mov	r2,r19
 2008628:	dfc00717 	ldw	ra,28(sp)
 200862c:	dd000617 	ldw	r20,24(sp)
 2008630:	dcc00517 	ldw	r19,20(sp)
 2008634:	dc800417 	ldw	r18,16(sp)
 2008638:	dc400317 	ldw	r17,12(sp)
 200863c:	dc000217 	ldw	r16,8(sp)
 2008640:	dec00804 	addi	sp,sp,32
 2008644:	f800283a 	ret
 2008648:	d809883a 	mov	r4,sp
 200864c:	2007b940 	call	2007b94 <__lo0bits>
 2008650:	d8c00017 	ldw	r3,0(sp)
 2008654:	04000044 	movi	r16,1
 2008658:	9c000415 	stw	r16,16(r19)
 200865c:	98c00515 	stw	r3,20(r19)
 2008660:	10800804 	addi	r2,r2,32
 2008664:	883fe126 	beq	r17,zero,20085ec <__alt_data_end+0xff0085ec>
 2008668:	00c00d44 	movi	r3,53
 200866c:	8c7ef344 	addi	r17,r17,-1075
 2008670:	88a3883a 	add	r17,r17,r2
 2008674:	1885c83a 	sub	r2,r3,r2
 2008678:	d8c00817 	ldw	r3,32(sp)
 200867c:	94400015 	stw	r17,0(r18)
 2008680:	18800015 	stw	r2,0(r3)
 2008684:	003fe706 	br	2008624 <__alt_data_end+0xff008624>
 2008688:	01000804 	movi	r4,32
 200868c:	2089c83a 	sub	r4,r4,r2
 2008690:	1908983a 	sll	r4,r3,r4
 2008694:	d9400117 	ldw	r5,4(sp)
 2008698:	1886d83a 	srl	r3,r3,r2
 200869c:	2148b03a 	or	r4,r4,r5
 20086a0:	99000515 	stw	r4,20(r19)
 20086a4:	d8c00015 	stw	r3,0(sp)
 20086a8:	003fca06 	br	20085d4 <__alt_data_end+0xff0085d4>

020086ac <__ratio>:
 20086ac:	defff904 	addi	sp,sp,-28
 20086b0:	dc400315 	stw	r17,12(sp)
 20086b4:	2823883a 	mov	r17,r5
 20086b8:	d9400104 	addi	r5,sp,4
 20086bc:	dfc00615 	stw	ra,24(sp)
 20086c0:	dcc00515 	stw	r19,20(sp)
 20086c4:	dc800415 	stw	r18,16(sp)
 20086c8:	2027883a 	mov	r19,r4
 20086cc:	dc000215 	stw	r16,8(sp)
 20086d0:	20084540 	call	2008454 <__b2d>
 20086d4:	d80b883a 	mov	r5,sp
 20086d8:	8809883a 	mov	r4,r17
 20086dc:	1025883a 	mov	r18,r2
 20086e0:	1821883a 	mov	r16,r3
 20086e4:	20084540 	call	2008454 <__b2d>
 20086e8:	8a000417 	ldw	r8,16(r17)
 20086ec:	99000417 	ldw	r4,16(r19)
 20086f0:	d9400117 	ldw	r5,4(sp)
 20086f4:	2209c83a 	sub	r4,r4,r8
 20086f8:	2010917a 	slli	r8,r4,5
 20086fc:	d9000017 	ldw	r4,0(sp)
 2008700:	2909c83a 	sub	r4,r5,r4
 2008704:	4109883a 	add	r4,r8,r4
 2008708:	01000e0e 	bge	zero,r4,2008744 <__ratio+0x98>
 200870c:	2008953a 	slli	r4,r4,20
 2008710:	2421883a 	add	r16,r4,r16
 2008714:	100d883a 	mov	r6,r2
 2008718:	180f883a 	mov	r7,r3
 200871c:	9009883a 	mov	r4,r18
 2008720:	800b883a 	mov	r5,r16
 2008724:	200c7700 	call	200c770 <__divdf3>
 2008728:	dfc00617 	ldw	ra,24(sp)
 200872c:	dcc00517 	ldw	r19,20(sp)
 2008730:	dc800417 	ldw	r18,16(sp)
 2008734:	dc400317 	ldw	r17,12(sp)
 2008738:	dc000217 	ldw	r16,8(sp)
 200873c:	dec00704 	addi	sp,sp,28
 2008740:	f800283a 	ret
 2008744:	2008953a 	slli	r4,r4,20
 2008748:	1907c83a 	sub	r3,r3,r4
 200874c:	003ff106 	br	2008714 <__alt_data_end+0xff008714>

02008750 <_mprec_log10>:
 2008750:	defffe04 	addi	sp,sp,-8
 2008754:	dc000015 	stw	r16,0(sp)
 2008758:	dfc00115 	stw	ra,4(sp)
 200875c:	008005c4 	movi	r2,23
 2008760:	2021883a 	mov	r16,r4
 2008764:	11000d0e 	bge	r2,r4,200879c <_mprec_log10+0x4c>
 2008768:	0005883a 	mov	r2,zero
 200876c:	00cffc34 	movhi	r3,16368
 2008770:	843fffc4 	addi	r16,r16,-1
 2008774:	000d883a 	mov	r6,zero
 2008778:	01d00934 	movhi	r7,16420
 200877c:	1009883a 	mov	r4,r2
 2008780:	180b883a 	mov	r5,r3
 2008784:	200d3980 	call	200d398 <__muldf3>
 2008788:	803ff91e 	bne	r16,zero,2008770 <__alt_data_end+0xff008770>
 200878c:	dfc00117 	ldw	ra,4(sp)
 2008790:	dc000017 	ldw	r16,0(sp)
 2008794:	dec00204 	addi	sp,sp,8
 2008798:	f800283a 	ret
 200879c:	202090fa 	slli	r16,r4,3
 20087a0:	00808074 	movhi	r2,513
 20087a4:	10843904 	addi	r2,r2,4324
 20087a8:	1421883a 	add	r16,r2,r16
 20087ac:	80800017 	ldw	r2,0(r16)
 20087b0:	80c00117 	ldw	r3,4(r16)
 20087b4:	dfc00117 	ldw	ra,4(sp)
 20087b8:	dc000017 	ldw	r16,0(sp)
 20087bc:	dec00204 	addi	sp,sp,8
 20087c0:	f800283a 	ret

020087c4 <__copybits>:
 20087c4:	297fffc4 	addi	r5,r5,-1
 20087c8:	280fd17a 	srai	r7,r5,5
 20087cc:	30c00417 	ldw	r3,16(r6)
 20087d0:	30800504 	addi	r2,r6,20
 20087d4:	39c00044 	addi	r7,r7,1
 20087d8:	18c7883a 	add	r3,r3,r3
 20087dc:	39cf883a 	add	r7,r7,r7
 20087e0:	18c7883a 	add	r3,r3,r3
 20087e4:	39cf883a 	add	r7,r7,r7
 20087e8:	10c7883a 	add	r3,r2,r3
 20087ec:	21cf883a 	add	r7,r4,r7
 20087f0:	10c00d2e 	bgeu	r2,r3,2008828 <__copybits+0x64>
 20087f4:	200b883a 	mov	r5,r4
 20087f8:	12000017 	ldw	r8,0(r2)
 20087fc:	29400104 	addi	r5,r5,4
 2008800:	10800104 	addi	r2,r2,4
 2008804:	2a3fff15 	stw	r8,-4(r5)
 2008808:	10fffb36 	bltu	r2,r3,20087f8 <__alt_data_end+0xff0087f8>
 200880c:	1985c83a 	sub	r2,r3,r6
 2008810:	10bffac4 	addi	r2,r2,-21
 2008814:	1004d0ba 	srli	r2,r2,2
 2008818:	10800044 	addi	r2,r2,1
 200881c:	1085883a 	add	r2,r2,r2
 2008820:	1085883a 	add	r2,r2,r2
 2008824:	2089883a 	add	r4,r4,r2
 2008828:	21c0032e 	bgeu	r4,r7,2008838 <__copybits+0x74>
 200882c:	20000015 	stw	zero,0(r4)
 2008830:	21000104 	addi	r4,r4,4
 2008834:	21fffd36 	bltu	r4,r7,200882c <__alt_data_end+0xff00882c>
 2008838:	f800283a 	ret

0200883c <__any_on>:
 200883c:	20c00417 	ldw	r3,16(r4)
 2008840:	2805d17a 	srai	r2,r5,5
 2008844:	21000504 	addi	r4,r4,20
 2008848:	18800d0e 	bge	r3,r2,2008880 <__any_on+0x44>
 200884c:	18c7883a 	add	r3,r3,r3
 2008850:	18c7883a 	add	r3,r3,r3
 2008854:	20c7883a 	add	r3,r4,r3
 2008858:	20c0192e 	bgeu	r4,r3,20088c0 <__any_on+0x84>
 200885c:	18bfff17 	ldw	r2,-4(r3)
 2008860:	18ffff04 	addi	r3,r3,-4
 2008864:	1000041e 	bne	r2,zero,2008878 <__any_on+0x3c>
 2008868:	20c0142e 	bgeu	r4,r3,20088bc <__any_on+0x80>
 200886c:	18ffff04 	addi	r3,r3,-4
 2008870:	19400017 	ldw	r5,0(r3)
 2008874:	283ffc26 	beq	r5,zero,2008868 <__alt_data_end+0xff008868>
 2008878:	00800044 	movi	r2,1
 200887c:	f800283a 	ret
 2008880:	10c00a0e 	bge	r2,r3,20088ac <__any_on+0x70>
 2008884:	1085883a 	add	r2,r2,r2
 2008888:	1085883a 	add	r2,r2,r2
 200888c:	294007cc 	andi	r5,r5,31
 2008890:	2087883a 	add	r3,r4,r2
 2008894:	283ff026 	beq	r5,zero,2008858 <__alt_data_end+0xff008858>
 2008898:	19800017 	ldw	r6,0(r3)
 200889c:	3144d83a 	srl	r2,r6,r5
 20088a0:	114a983a 	sll	r5,r2,r5
 20088a4:	317ff41e 	bne	r6,r5,2008878 <__alt_data_end+0xff008878>
 20088a8:	003feb06 	br	2008858 <__alt_data_end+0xff008858>
 20088ac:	1085883a 	add	r2,r2,r2
 20088b0:	1085883a 	add	r2,r2,r2
 20088b4:	2087883a 	add	r3,r4,r2
 20088b8:	003fe706 	br	2008858 <__alt_data_end+0xff008858>
 20088bc:	f800283a 	ret
 20088c0:	0005883a 	mov	r2,zero
 20088c4:	f800283a 	ret

020088c8 <_realloc_r>:
 20088c8:	defff604 	addi	sp,sp,-40
 20088cc:	dc800215 	stw	r18,8(sp)
 20088d0:	dfc00915 	stw	ra,36(sp)
 20088d4:	df000815 	stw	fp,32(sp)
 20088d8:	ddc00715 	stw	r23,28(sp)
 20088dc:	dd800615 	stw	r22,24(sp)
 20088e0:	dd400515 	stw	r21,20(sp)
 20088e4:	dd000415 	stw	r20,16(sp)
 20088e8:	dcc00315 	stw	r19,12(sp)
 20088ec:	dc400115 	stw	r17,4(sp)
 20088f0:	dc000015 	stw	r16,0(sp)
 20088f4:	3025883a 	mov	r18,r6
 20088f8:	2800b726 	beq	r5,zero,2008bd8 <_realloc_r+0x310>
 20088fc:	282b883a 	mov	r21,r5
 2008900:	2029883a 	mov	r20,r4
 2008904:	200ed040 	call	200ed04 <__malloc_lock>
 2008908:	a8bfff17 	ldw	r2,-4(r21)
 200890c:	043fff04 	movi	r16,-4
 2008910:	90c002c4 	addi	r3,r18,11
 2008914:	01000584 	movi	r4,22
 2008918:	acfffe04 	addi	r19,r21,-8
 200891c:	1420703a 	and	r16,r2,r16
 2008920:	20c0332e 	bgeu	r4,r3,20089f0 <_realloc_r+0x128>
 2008924:	047ffe04 	movi	r17,-8
 2008928:	1c62703a 	and	r17,r3,r17
 200892c:	8807883a 	mov	r3,r17
 2008930:	88005816 	blt	r17,zero,2008a94 <_realloc_r+0x1cc>
 2008934:	8c805736 	bltu	r17,r18,2008a94 <_realloc_r+0x1cc>
 2008938:	80c0300e 	bge	r16,r3,20089fc <_realloc_r+0x134>
 200893c:	07008074 	movhi	fp,513
 2008940:	e705e704 	addi	fp,fp,6044
 2008944:	e1c00217 	ldw	r7,8(fp)
 2008948:	9c09883a 	add	r4,r19,r16
 200894c:	22000117 	ldw	r8,4(r4)
 2008950:	21c06326 	beq	r4,r7,2008ae0 <_realloc_r+0x218>
 2008954:	017fff84 	movi	r5,-2
 2008958:	414a703a 	and	r5,r8,r5
 200895c:	214b883a 	add	r5,r4,r5
 2008960:	29800117 	ldw	r6,4(r5)
 2008964:	3180004c 	andi	r6,r6,1
 2008968:	30003f26 	beq	r6,zero,2008a68 <_realloc_r+0x1a0>
 200896c:	1080004c 	andi	r2,r2,1
 2008970:	10008326 	beq	r2,zero,2008b80 <_realloc_r+0x2b8>
 2008974:	900b883a 	mov	r5,r18
 2008978:	a009883a 	mov	r4,r20
 200897c:	2006b540 	call	2006b54 <_malloc_r>
 2008980:	1025883a 	mov	r18,r2
 2008984:	10011e26 	beq	r2,zero,2008e00 <_realloc_r+0x538>
 2008988:	a93fff17 	ldw	r4,-4(r21)
 200898c:	10fffe04 	addi	r3,r2,-8
 2008990:	00bfff84 	movi	r2,-2
 2008994:	2084703a 	and	r2,r4,r2
 2008998:	9885883a 	add	r2,r19,r2
 200899c:	1880ee26 	beq	r3,r2,2008d58 <_realloc_r+0x490>
 20089a0:	81bfff04 	addi	r6,r16,-4
 20089a4:	00800904 	movi	r2,36
 20089a8:	1180b836 	bltu	r2,r6,2008c8c <_realloc_r+0x3c4>
 20089ac:	00c004c4 	movi	r3,19
 20089b0:	19809636 	bltu	r3,r6,2008c0c <_realloc_r+0x344>
 20089b4:	9005883a 	mov	r2,r18
 20089b8:	a807883a 	mov	r3,r21
 20089bc:	19000017 	ldw	r4,0(r3)
 20089c0:	11000015 	stw	r4,0(r2)
 20089c4:	19000117 	ldw	r4,4(r3)
 20089c8:	11000115 	stw	r4,4(r2)
 20089cc:	18c00217 	ldw	r3,8(r3)
 20089d0:	10c00215 	stw	r3,8(r2)
 20089d4:	a80b883a 	mov	r5,r21
 20089d8:	a009883a 	mov	r4,r20
 20089dc:	2005f5c0 	call	2005f5c <_free_r>
 20089e0:	a009883a 	mov	r4,r20
 20089e4:	200ed280 	call	200ed28 <__malloc_unlock>
 20089e8:	9005883a 	mov	r2,r18
 20089ec:	00001206 	br	2008a38 <_realloc_r+0x170>
 20089f0:	00c00404 	movi	r3,16
 20089f4:	1823883a 	mov	r17,r3
 20089f8:	003fce06 	br	2008934 <__alt_data_end+0xff008934>
 20089fc:	a825883a 	mov	r18,r21
 2008a00:	8445c83a 	sub	r2,r16,r17
 2008a04:	00c003c4 	movi	r3,15
 2008a08:	18802636 	bltu	r3,r2,2008aa4 <_realloc_r+0x1dc>
 2008a0c:	99800117 	ldw	r6,4(r19)
 2008a10:	9c07883a 	add	r3,r19,r16
 2008a14:	3180004c 	andi	r6,r6,1
 2008a18:	3420b03a 	or	r16,r6,r16
 2008a1c:	9c000115 	stw	r16,4(r19)
 2008a20:	18800117 	ldw	r2,4(r3)
 2008a24:	10800054 	ori	r2,r2,1
 2008a28:	18800115 	stw	r2,4(r3)
 2008a2c:	a009883a 	mov	r4,r20
 2008a30:	200ed280 	call	200ed28 <__malloc_unlock>
 2008a34:	9005883a 	mov	r2,r18
 2008a38:	dfc00917 	ldw	ra,36(sp)
 2008a3c:	df000817 	ldw	fp,32(sp)
 2008a40:	ddc00717 	ldw	r23,28(sp)
 2008a44:	dd800617 	ldw	r22,24(sp)
 2008a48:	dd400517 	ldw	r21,20(sp)
 2008a4c:	dd000417 	ldw	r20,16(sp)
 2008a50:	dcc00317 	ldw	r19,12(sp)
 2008a54:	dc800217 	ldw	r18,8(sp)
 2008a58:	dc400117 	ldw	r17,4(sp)
 2008a5c:	dc000017 	ldw	r16,0(sp)
 2008a60:	dec00a04 	addi	sp,sp,40
 2008a64:	f800283a 	ret
 2008a68:	017fff04 	movi	r5,-4
 2008a6c:	414a703a 	and	r5,r8,r5
 2008a70:	814d883a 	add	r6,r16,r5
 2008a74:	30c01f16 	blt	r6,r3,2008af4 <_realloc_r+0x22c>
 2008a78:	20800317 	ldw	r2,12(r4)
 2008a7c:	20c00217 	ldw	r3,8(r4)
 2008a80:	a825883a 	mov	r18,r21
 2008a84:	3021883a 	mov	r16,r6
 2008a88:	18800315 	stw	r2,12(r3)
 2008a8c:	10c00215 	stw	r3,8(r2)
 2008a90:	003fdb06 	br	2008a00 <__alt_data_end+0xff008a00>
 2008a94:	00800304 	movi	r2,12
 2008a98:	a0800015 	stw	r2,0(r20)
 2008a9c:	0005883a 	mov	r2,zero
 2008aa0:	003fe506 	br	2008a38 <__alt_data_end+0xff008a38>
 2008aa4:	98c00117 	ldw	r3,4(r19)
 2008aa8:	9c4b883a 	add	r5,r19,r17
 2008aac:	11000054 	ori	r4,r2,1
 2008ab0:	18c0004c 	andi	r3,r3,1
 2008ab4:	1c62b03a 	or	r17,r3,r17
 2008ab8:	9c400115 	stw	r17,4(r19)
 2008abc:	29000115 	stw	r4,4(r5)
 2008ac0:	2885883a 	add	r2,r5,r2
 2008ac4:	10c00117 	ldw	r3,4(r2)
 2008ac8:	29400204 	addi	r5,r5,8
 2008acc:	a009883a 	mov	r4,r20
 2008ad0:	18c00054 	ori	r3,r3,1
 2008ad4:	10c00115 	stw	r3,4(r2)
 2008ad8:	2005f5c0 	call	2005f5c <_free_r>
 2008adc:	003fd306 	br	2008a2c <__alt_data_end+0xff008a2c>
 2008ae0:	017fff04 	movi	r5,-4
 2008ae4:	414a703a 	and	r5,r8,r5
 2008ae8:	89800404 	addi	r6,r17,16
 2008aec:	8151883a 	add	r8,r16,r5
 2008af0:	4180590e 	bge	r8,r6,2008c58 <_realloc_r+0x390>
 2008af4:	1080004c 	andi	r2,r2,1
 2008af8:	103f9e1e 	bne	r2,zero,2008974 <__alt_data_end+0xff008974>
 2008afc:	adbffe17 	ldw	r22,-8(r21)
 2008b00:	00bfff04 	movi	r2,-4
 2008b04:	9dadc83a 	sub	r22,r19,r22
 2008b08:	b1800117 	ldw	r6,4(r22)
 2008b0c:	3084703a 	and	r2,r6,r2
 2008b10:	20002026 	beq	r4,zero,2008b94 <_realloc_r+0x2cc>
 2008b14:	80af883a 	add	r23,r16,r2
 2008b18:	b96f883a 	add	r23,r23,r5
 2008b1c:	21c05f26 	beq	r4,r7,2008c9c <_realloc_r+0x3d4>
 2008b20:	b8c01c16 	blt	r23,r3,2008b94 <_realloc_r+0x2cc>
 2008b24:	20800317 	ldw	r2,12(r4)
 2008b28:	20c00217 	ldw	r3,8(r4)
 2008b2c:	81bfff04 	addi	r6,r16,-4
 2008b30:	01000904 	movi	r4,36
 2008b34:	18800315 	stw	r2,12(r3)
 2008b38:	10c00215 	stw	r3,8(r2)
 2008b3c:	b0c00217 	ldw	r3,8(r22)
 2008b40:	b0800317 	ldw	r2,12(r22)
 2008b44:	b4800204 	addi	r18,r22,8
 2008b48:	18800315 	stw	r2,12(r3)
 2008b4c:	10c00215 	stw	r3,8(r2)
 2008b50:	21801b36 	bltu	r4,r6,2008bc0 <_realloc_r+0x2f8>
 2008b54:	008004c4 	movi	r2,19
 2008b58:	1180352e 	bgeu	r2,r6,2008c30 <_realloc_r+0x368>
 2008b5c:	a8800017 	ldw	r2,0(r21)
 2008b60:	b0800215 	stw	r2,8(r22)
 2008b64:	a8800117 	ldw	r2,4(r21)
 2008b68:	b0800315 	stw	r2,12(r22)
 2008b6c:	008006c4 	movi	r2,27
 2008b70:	11807f36 	bltu	r2,r6,2008d70 <_realloc_r+0x4a8>
 2008b74:	b0800404 	addi	r2,r22,16
 2008b78:	ad400204 	addi	r21,r21,8
 2008b7c:	00002d06 	br	2008c34 <_realloc_r+0x36c>
 2008b80:	adbffe17 	ldw	r22,-8(r21)
 2008b84:	00bfff04 	movi	r2,-4
 2008b88:	9dadc83a 	sub	r22,r19,r22
 2008b8c:	b1000117 	ldw	r4,4(r22)
 2008b90:	2084703a 	and	r2,r4,r2
 2008b94:	b03f7726 	beq	r22,zero,2008974 <__alt_data_end+0xff008974>
 2008b98:	80af883a 	add	r23,r16,r2
 2008b9c:	b8ff7516 	blt	r23,r3,2008974 <__alt_data_end+0xff008974>
 2008ba0:	b0800317 	ldw	r2,12(r22)
 2008ba4:	b0c00217 	ldw	r3,8(r22)
 2008ba8:	81bfff04 	addi	r6,r16,-4
 2008bac:	01000904 	movi	r4,36
 2008bb0:	18800315 	stw	r2,12(r3)
 2008bb4:	10c00215 	stw	r3,8(r2)
 2008bb8:	b4800204 	addi	r18,r22,8
 2008bbc:	21bfe52e 	bgeu	r4,r6,2008b54 <__alt_data_end+0xff008b54>
 2008bc0:	a80b883a 	mov	r5,r21
 2008bc4:	9009883a 	mov	r4,r18
 2008bc8:	200758c0 	call	200758c <memmove>
 2008bcc:	b821883a 	mov	r16,r23
 2008bd0:	b027883a 	mov	r19,r22
 2008bd4:	003f8a06 	br	2008a00 <__alt_data_end+0xff008a00>
 2008bd8:	300b883a 	mov	r5,r6
 2008bdc:	dfc00917 	ldw	ra,36(sp)
 2008be0:	df000817 	ldw	fp,32(sp)
 2008be4:	ddc00717 	ldw	r23,28(sp)
 2008be8:	dd800617 	ldw	r22,24(sp)
 2008bec:	dd400517 	ldw	r21,20(sp)
 2008bf0:	dd000417 	ldw	r20,16(sp)
 2008bf4:	dcc00317 	ldw	r19,12(sp)
 2008bf8:	dc800217 	ldw	r18,8(sp)
 2008bfc:	dc400117 	ldw	r17,4(sp)
 2008c00:	dc000017 	ldw	r16,0(sp)
 2008c04:	dec00a04 	addi	sp,sp,40
 2008c08:	2006b541 	jmpi	2006b54 <_malloc_r>
 2008c0c:	a8c00017 	ldw	r3,0(r21)
 2008c10:	90c00015 	stw	r3,0(r18)
 2008c14:	a8c00117 	ldw	r3,4(r21)
 2008c18:	90c00115 	stw	r3,4(r18)
 2008c1c:	00c006c4 	movi	r3,27
 2008c20:	19804536 	bltu	r3,r6,2008d38 <_realloc_r+0x470>
 2008c24:	90800204 	addi	r2,r18,8
 2008c28:	a8c00204 	addi	r3,r21,8
 2008c2c:	003f6306 	br	20089bc <__alt_data_end+0xff0089bc>
 2008c30:	9005883a 	mov	r2,r18
 2008c34:	a8c00017 	ldw	r3,0(r21)
 2008c38:	b821883a 	mov	r16,r23
 2008c3c:	b027883a 	mov	r19,r22
 2008c40:	10c00015 	stw	r3,0(r2)
 2008c44:	a8c00117 	ldw	r3,4(r21)
 2008c48:	10c00115 	stw	r3,4(r2)
 2008c4c:	a8c00217 	ldw	r3,8(r21)
 2008c50:	10c00215 	stw	r3,8(r2)
 2008c54:	003f6a06 	br	2008a00 <__alt_data_end+0xff008a00>
 2008c58:	9c67883a 	add	r19,r19,r17
 2008c5c:	4445c83a 	sub	r2,r8,r17
 2008c60:	e4c00215 	stw	r19,8(fp)
 2008c64:	10800054 	ori	r2,r2,1
 2008c68:	98800115 	stw	r2,4(r19)
 2008c6c:	a8bfff17 	ldw	r2,-4(r21)
 2008c70:	a009883a 	mov	r4,r20
 2008c74:	1080004c 	andi	r2,r2,1
 2008c78:	1462b03a 	or	r17,r2,r17
 2008c7c:	ac7fff15 	stw	r17,-4(r21)
 2008c80:	200ed280 	call	200ed28 <__malloc_unlock>
 2008c84:	a805883a 	mov	r2,r21
 2008c88:	003f6b06 	br	2008a38 <__alt_data_end+0xff008a38>
 2008c8c:	a80b883a 	mov	r5,r21
 2008c90:	9009883a 	mov	r4,r18
 2008c94:	200758c0 	call	200758c <memmove>
 2008c98:	003f4e06 	br	20089d4 <__alt_data_end+0xff0089d4>
 2008c9c:	89000404 	addi	r4,r17,16
 2008ca0:	b93fbc16 	blt	r23,r4,2008b94 <__alt_data_end+0xff008b94>
 2008ca4:	b0800317 	ldw	r2,12(r22)
 2008ca8:	b0c00217 	ldw	r3,8(r22)
 2008cac:	81bfff04 	addi	r6,r16,-4
 2008cb0:	01000904 	movi	r4,36
 2008cb4:	18800315 	stw	r2,12(r3)
 2008cb8:	10c00215 	stw	r3,8(r2)
 2008cbc:	b4800204 	addi	r18,r22,8
 2008cc0:	21804336 	bltu	r4,r6,2008dd0 <_realloc_r+0x508>
 2008cc4:	008004c4 	movi	r2,19
 2008cc8:	11803f2e 	bgeu	r2,r6,2008dc8 <_realloc_r+0x500>
 2008ccc:	a8800017 	ldw	r2,0(r21)
 2008cd0:	b0800215 	stw	r2,8(r22)
 2008cd4:	a8800117 	ldw	r2,4(r21)
 2008cd8:	b0800315 	stw	r2,12(r22)
 2008cdc:	008006c4 	movi	r2,27
 2008ce0:	11803f36 	bltu	r2,r6,2008de0 <_realloc_r+0x518>
 2008ce4:	b0800404 	addi	r2,r22,16
 2008ce8:	ad400204 	addi	r21,r21,8
 2008cec:	a8c00017 	ldw	r3,0(r21)
 2008cf0:	10c00015 	stw	r3,0(r2)
 2008cf4:	a8c00117 	ldw	r3,4(r21)
 2008cf8:	10c00115 	stw	r3,4(r2)
 2008cfc:	a8c00217 	ldw	r3,8(r21)
 2008d00:	10c00215 	stw	r3,8(r2)
 2008d04:	b447883a 	add	r3,r22,r17
 2008d08:	bc45c83a 	sub	r2,r23,r17
 2008d0c:	e0c00215 	stw	r3,8(fp)
 2008d10:	10800054 	ori	r2,r2,1
 2008d14:	18800115 	stw	r2,4(r3)
 2008d18:	b0800117 	ldw	r2,4(r22)
 2008d1c:	a009883a 	mov	r4,r20
 2008d20:	1080004c 	andi	r2,r2,1
 2008d24:	1462b03a 	or	r17,r2,r17
 2008d28:	b4400115 	stw	r17,4(r22)
 2008d2c:	200ed280 	call	200ed28 <__malloc_unlock>
 2008d30:	9005883a 	mov	r2,r18
 2008d34:	003f4006 	br	2008a38 <__alt_data_end+0xff008a38>
 2008d38:	a8c00217 	ldw	r3,8(r21)
 2008d3c:	90c00215 	stw	r3,8(r18)
 2008d40:	a8c00317 	ldw	r3,12(r21)
 2008d44:	90c00315 	stw	r3,12(r18)
 2008d48:	30801126 	beq	r6,r2,2008d90 <_realloc_r+0x4c8>
 2008d4c:	90800404 	addi	r2,r18,16
 2008d50:	a8c00404 	addi	r3,r21,16
 2008d54:	003f1906 	br	20089bc <__alt_data_end+0xff0089bc>
 2008d58:	90ffff17 	ldw	r3,-4(r18)
 2008d5c:	00bfff04 	movi	r2,-4
 2008d60:	a825883a 	mov	r18,r21
 2008d64:	1884703a 	and	r2,r3,r2
 2008d68:	80a1883a 	add	r16,r16,r2
 2008d6c:	003f2406 	br	2008a00 <__alt_data_end+0xff008a00>
 2008d70:	a8800217 	ldw	r2,8(r21)
 2008d74:	b0800415 	stw	r2,16(r22)
 2008d78:	a8800317 	ldw	r2,12(r21)
 2008d7c:	b0800515 	stw	r2,20(r22)
 2008d80:	31000a26 	beq	r6,r4,2008dac <_realloc_r+0x4e4>
 2008d84:	b0800604 	addi	r2,r22,24
 2008d88:	ad400404 	addi	r21,r21,16
 2008d8c:	003fa906 	br	2008c34 <__alt_data_end+0xff008c34>
 2008d90:	a9000417 	ldw	r4,16(r21)
 2008d94:	90800604 	addi	r2,r18,24
 2008d98:	a8c00604 	addi	r3,r21,24
 2008d9c:	91000415 	stw	r4,16(r18)
 2008da0:	a9000517 	ldw	r4,20(r21)
 2008da4:	91000515 	stw	r4,20(r18)
 2008da8:	003f0406 	br	20089bc <__alt_data_end+0xff0089bc>
 2008dac:	a8c00417 	ldw	r3,16(r21)
 2008db0:	ad400604 	addi	r21,r21,24
 2008db4:	b0800804 	addi	r2,r22,32
 2008db8:	b0c00615 	stw	r3,24(r22)
 2008dbc:	a8ffff17 	ldw	r3,-4(r21)
 2008dc0:	b0c00715 	stw	r3,28(r22)
 2008dc4:	003f9b06 	br	2008c34 <__alt_data_end+0xff008c34>
 2008dc8:	9005883a 	mov	r2,r18
 2008dcc:	003fc706 	br	2008cec <__alt_data_end+0xff008cec>
 2008dd0:	a80b883a 	mov	r5,r21
 2008dd4:	9009883a 	mov	r4,r18
 2008dd8:	200758c0 	call	200758c <memmove>
 2008ddc:	003fc906 	br	2008d04 <__alt_data_end+0xff008d04>
 2008de0:	a8800217 	ldw	r2,8(r21)
 2008de4:	b0800415 	stw	r2,16(r22)
 2008de8:	a8800317 	ldw	r2,12(r21)
 2008dec:	b0800515 	stw	r2,20(r22)
 2008df0:	31000726 	beq	r6,r4,2008e10 <_realloc_r+0x548>
 2008df4:	b0800604 	addi	r2,r22,24
 2008df8:	ad400404 	addi	r21,r21,16
 2008dfc:	003fbb06 	br	2008cec <__alt_data_end+0xff008cec>
 2008e00:	a009883a 	mov	r4,r20
 2008e04:	200ed280 	call	200ed28 <__malloc_unlock>
 2008e08:	0005883a 	mov	r2,zero
 2008e0c:	003f0a06 	br	2008a38 <__alt_data_end+0xff008a38>
 2008e10:	a8c00417 	ldw	r3,16(r21)
 2008e14:	ad400604 	addi	r21,r21,24
 2008e18:	b0800804 	addi	r2,r22,32
 2008e1c:	b0c00615 	stw	r3,24(r22)
 2008e20:	a8ffff17 	ldw	r3,-4(r21)
 2008e24:	b0c00715 	stw	r3,28(r22)
 2008e28:	003fb006 	br	2008cec <__alt_data_end+0xff008cec>

02008e2c <__fpclassifyd>:
 2008e2c:	00a00034 	movhi	r2,32768
 2008e30:	10bfffc4 	addi	r2,r2,-1
 2008e34:	2884703a 	and	r2,r5,r2
 2008e38:	10000726 	beq	r2,zero,2008e58 <__fpclassifyd+0x2c>
 2008e3c:	00fffc34 	movhi	r3,65520
 2008e40:	019ff834 	movhi	r6,32736
 2008e44:	28c7883a 	add	r3,r5,r3
 2008e48:	31bfffc4 	addi	r6,r6,-1
 2008e4c:	30c00536 	bltu	r6,r3,2008e64 <__fpclassifyd+0x38>
 2008e50:	00800104 	movi	r2,4
 2008e54:	f800283a 	ret
 2008e58:	2000021e 	bne	r4,zero,2008e64 <__fpclassifyd+0x38>
 2008e5c:	00800084 	movi	r2,2
 2008e60:	f800283a 	ret
 2008e64:	00dffc34 	movhi	r3,32752
 2008e68:	019ff834 	movhi	r6,32736
 2008e6c:	28cb883a 	add	r5,r5,r3
 2008e70:	31bfffc4 	addi	r6,r6,-1
 2008e74:	317ff62e 	bgeu	r6,r5,2008e50 <__alt_data_end+0xff008e50>
 2008e78:	01400434 	movhi	r5,16
 2008e7c:	297fffc4 	addi	r5,r5,-1
 2008e80:	28800236 	bltu	r5,r2,2008e8c <__fpclassifyd+0x60>
 2008e84:	008000c4 	movi	r2,3
 2008e88:	f800283a 	ret
 2008e8c:	10c00226 	beq	r2,r3,2008e98 <__fpclassifyd+0x6c>
 2008e90:	0005883a 	mov	r2,zero
 2008e94:	f800283a 	ret
 2008e98:	2005003a 	cmpeq	r2,r4,zero
 2008e9c:	f800283a 	ret

02008ea0 <_sbrk_r>:
 2008ea0:	defffd04 	addi	sp,sp,-12
 2008ea4:	dc000015 	stw	r16,0(sp)
 2008ea8:	04008074 	movhi	r16,513
 2008eac:	dc400115 	stw	r17,4(sp)
 2008eb0:	84123d04 	addi	r16,r16,18676
 2008eb4:	2023883a 	mov	r17,r4
 2008eb8:	2809883a 	mov	r4,r5
 2008ebc:	dfc00215 	stw	ra,8(sp)
 2008ec0:	80000015 	stw	zero,0(r16)
 2008ec4:	200ef100 	call	200ef10 <sbrk>
 2008ec8:	00ffffc4 	movi	r3,-1
 2008ecc:	10c00526 	beq	r2,r3,2008ee4 <_sbrk_r+0x44>
 2008ed0:	dfc00217 	ldw	ra,8(sp)
 2008ed4:	dc400117 	ldw	r17,4(sp)
 2008ed8:	dc000017 	ldw	r16,0(sp)
 2008edc:	dec00304 	addi	sp,sp,12
 2008ee0:	f800283a 	ret
 2008ee4:	80c00017 	ldw	r3,0(r16)
 2008ee8:	183ff926 	beq	r3,zero,2008ed0 <__alt_data_end+0xff008ed0>
 2008eec:	88c00015 	stw	r3,0(r17)
 2008ef0:	003ff706 	br	2008ed0 <__alt_data_end+0xff008ed0>

02008ef4 <__sread>:
 2008ef4:	defffe04 	addi	sp,sp,-8
 2008ef8:	dc000015 	stw	r16,0(sp)
 2008efc:	2821883a 	mov	r16,r5
 2008f00:	2940038f 	ldh	r5,14(r5)
 2008f04:	dfc00115 	stw	ra,4(sp)
 2008f08:	200adb00 	call	200adb0 <_read_r>
 2008f0c:	10000716 	blt	r2,zero,2008f2c <__sread+0x38>
 2008f10:	80c01417 	ldw	r3,80(r16)
 2008f14:	1887883a 	add	r3,r3,r2
 2008f18:	80c01415 	stw	r3,80(r16)
 2008f1c:	dfc00117 	ldw	ra,4(sp)
 2008f20:	dc000017 	ldw	r16,0(sp)
 2008f24:	dec00204 	addi	sp,sp,8
 2008f28:	f800283a 	ret
 2008f2c:	80c0030b 	ldhu	r3,12(r16)
 2008f30:	18fbffcc 	andi	r3,r3,61439
 2008f34:	80c0030d 	sth	r3,12(r16)
 2008f38:	dfc00117 	ldw	ra,4(sp)
 2008f3c:	dc000017 	ldw	r16,0(sp)
 2008f40:	dec00204 	addi	sp,sp,8
 2008f44:	f800283a 	ret

02008f48 <__seofread>:
 2008f48:	0005883a 	mov	r2,zero
 2008f4c:	f800283a 	ret

02008f50 <__swrite>:
 2008f50:	2880030b 	ldhu	r2,12(r5)
 2008f54:	defffb04 	addi	sp,sp,-20
 2008f58:	dcc00315 	stw	r19,12(sp)
 2008f5c:	dc800215 	stw	r18,8(sp)
 2008f60:	dc400115 	stw	r17,4(sp)
 2008f64:	dc000015 	stw	r16,0(sp)
 2008f68:	dfc00415 	stw	ra,16(sp)
 2008f6c:	10c0400c 	andi	r3,r2,256
 2008f70:	2821883a 	mov	r16,r5
 2008f74:	2023883a 	mov	r17,r4
 2008f78:	3025883a 	mov	r18,r6
 2008f7c:	3827883a 	mov	r19,r7
 2008f80:	18000526 	beq	r3,zero,2008f98 <__swrite+0x48>
 2008f84:	2940038f 	ldh	r5,14(r5)
 2008f88:	01c00084 	movi	r7,2
 2008f8c:	000d883a 	mov	r6,zero
 2008f90:	200ad500 	call	200ad50 <_lseek_r>
 2008f94:	8080030b 	ldhu	r2,12(r16)
 2008f98:	8140038f 	ldh	r5,14(r16)
 2008f9c:	10bbffcc 	andi	r2,r2,61439
 2008fa0:	980f883a 	mov	r7,r19
 2008fa4:	900d883a 	mov	r6,r18
 2008fa8:	8809883a 	mov	r4,r17
 2008fac:	8080030d 	sth	r2,12(r16)
 2008fb0:	dfc00417 	ldw	ra,16(sp)
 2008fb4:	dcc00317 	ldw	r19,12(sp)
 2008fb8:	dc800217 	ldw	r18,8(sp)
 2008fbc:	dc400117 	ldw	r17,4(sp)
 2008fc0:	dc000017 	ldw	r16,0(sp)
 2008fc4:	dec00504 	addi	sp,sp,20
 2008fc8:	200a8041 	jmpi	200a804 <_write_r>

02008fcc <__sseek>:
 2008fcc:	defffe04 	addi	sp,sp,-8
 2008fd0:	dc000015 	stw	r16,0(sp)
 2008fd4:	2821883a 	mov	r16,r5
 2008fd8:	2940038f 	ldh	r5,14(r5)
 2008fdc:	dfc00115 	stw	ra,4(sp)
 2008fe0:	200ad500 	call	200ad50 <_lseek_r>
 2008fe4:	00ffffc4 	movi	r3,-1
 2008fe8:	10c00826 	beq	r2,r3,200900c <__sseek+0x40>
 2008fec:	80c0030b 	ldhu	r3,12(r16)
 2008ff0:	80801415 	stw	r2,80(r16)
 2008ff4:	18c40014 	ori	r3,r3,4096
 2008ff8:	80c0030d 	sth	r3,12(r16)
 2008ffc:	dfc00117 	ldw	ra,4(sp)
 2009000:	dc000017 	ldw	r16,0(sp)
 2009004:	dec00204 	addi	sp,sp,8
 2009008:	f800283a 	ret
 200900c:	80c0030b 	ldhu	r3,12(r16)
 2009010:	18fbffcc 	andi	r3,r3,61439
 2009014:	80c0030d 	sth	r3,12(r16)
 2009018:	dfc00117 	ldw	ra,4(sp)
 200901c:	dc000017 	ldw	r16,0(sp)
 2009020:	dec00204 	addi	sp,sp,8
 2009024:	f800283a 	ret

02009028 <__sclose>:
 2009028:	2940038f 	ldh	r5,14(r5)
 200902c:	200a8641 	jmpi	200a864 <_close_r>

02009030 <strcmp>:
 2009030:	2144b03a 	or	r2,r4,r5
 2009034:	108000cc 	andi	r2,r2,3
 2009038:	1000171e 	bne	r2,zero,2009098 <strcmp+0x68>
 200903c:	20800017 	ldw	r2,0(r4)
 2009040:	28c00017 	ldw	r3,0(r5)
 2009044:	10c0141e 	bne	r2,r3,2009098 <strcmp+0x68>
 2009048:	027fbff4 	movhi	r9,65279
 200904c:	4a7fbfc4 	addi	r9,r9,-257
 2009050:	0086303a 	nor	r3,zero,r2
 2009054:	02202074 	movhi	r8,32897
 2009058:	1245883a 	add	r2,r2,r9
 200905c:	42202004 	addi	r8,r8,-32640
 2009060:	10c4703a 	and	r2,r2,r3
 2009064:	1204703a 	and	r2,r2,r8
 2009068:	10000226 	beq	r2,zero,2009074 <strcmp+0x44>
 200906c:	00002306 	br	20090fc <strcmp+0xcc>
 2009070:	1000221e 	bne	r2,zero,20090fc <strcmp+0xcc>
 2009074:	21000104 	addi	r4,r4,4
 2009078:	20c00017 	ldw	r3,0(r4)
 200907c:	29400104 	addi	r5,r5,4
 2009080:	29800017 	ldw	r6,0(r5)
 2009084:	1a4f883a 	add	r7,r3,r9
 2009088:	00c4303a 	nor	r2,zero,r3
 200908c:	3884703a 	and	r2,r7,r2
 2009090:	1204703a 	and	r2,r2,r8
 2009094:	19bff626 	beq	r3,r6,2009070 <__alt_data_end+0xff009070>
 2009098:	20800003 	ldbu	r2,0(r4)
 200909c:	10c03fcc 	andi	r3,r2,255
 20090a0:	18c0201c 	xori	r3,r3,128
 20090a4:	18ffe004 	addi	r3,r3,-128
 20090a8:	18000c26 	beq	r3,zero,20090dc <strcmp+0xac>
 20090ac:	29800007 	ldb	r6,0(r5)
 20090b0:	19800326 	beq	r3,r6,20090c0 <strcmp+0x90>
 20090b4:	00001306 	br	2009104 <strcmp+0xd4>
 20090b8:	29800007 	ldb	r6,0(r5)
 20090bc:	11800b1e 	bne	r2,r6,20090ec <strcmp+0xbc>
 20090c0:	21000044 	addi	r4,r4,1
 20090c4:	20c00003 	ldbu	r3,0(r4)
 20090c8:	29400044 	addi	r5,r5,1
 20090cc:	18803fcc 	andi	r2,r3,255
 20090d0:	1080201c 	xori	r2,r2,128
 20090d4:	10bfe004 	addi	r2,r2,-128
 20090d8:	103ff71e 	bne	r2,zero,20090b8 <__alt_data_end+0xff0090b8>
 20090dc:	0007883a 	mov	r3,zero
 20090e0:	28800003 	ldbu	r2,0(r5)
 20090e4:	1885c83a 	sub	r2,r3,r2
 20090e8:	f800283a 	ret
 20090ec:	28800003 	ldbu	r2,0(r5)
 20090f0:	18c03fcc 	andi	r3,r3,255
 20090f4:	1885c83a 	sub	r2,r3,r2
 20090f8:	f800283a 	ret
 20090fc:	0005883a 	mov	r2,zero
 2009100:	f800283a 	ret
 2009104:	10c03fcc 	andi	r3,r2,255
 2009108:	003ff506 	br	20090e0 <__alt_data_end+0xff0090e0>

0200910c <__sprint_r.part.0>:
 200910c:	28801917 	ldw	r2,100(r5)
 2009110:	defff604 	addi	sp,sp,-40
 2009114:	dd400515 	stw	r21,20(sp)
 2009118:	dfc00915 	stw	ra,36(sp)
 200911c:	df000815 	stw	fp,32(sp)
 2009120:	ddc00715 	stw	r23,28(sp)
 2009124:	dd800615 	stw	r22,24(sp)
 2009128:	dd000415 	stw	r20,16(sp)
 200912c:	dcc00315 	stw	r19,12(sp)
 2009130:	dc800215 	stw	r18,8(sp)
 2009134:	dc400115 	stw	r17,4(sp)
 2009138:	dc000015 	stw	r16,0(sp)
 200913c:	1088000c 	andi	r2,r2,8192
 2009140:	302b883a 	mov	r21,r6
 2009144:	10002e26 	beq	r2,zero,2009200 <__sprint_r.part.0+0xf4>
 2009148:	30800217 	ldw	r2,8(r6)
 200914c:	35800017 	ldw	r22,0(r6)
 2009150:	10002926 	beq	r2,zero,20091f8 <__sprint_r.part.0+0xec>
 2009154:	2827883a 	mov	r19,r5
 2009158:	2029883a 	mov	r20,r4
 200915c:	b5c00104 	addi	r23,r22,4
 2009160:	04bfffc4 	movi	r18,-1
 2009164:	bc400017 	ldw	r17,0(r23)
 2009168:	b4000017 	ldw	r16,0(r22)
 200916c:	0039883a 	mov	fp,zero
 2009170:	8822d0ba 	srli	r17,r17,2
 2009174:	8800031e 	bne	r17,zero,2009184 <__sprint_r.part.0+0x78>
 2009178:	00001806 	br	20091dc <__sprint_r.part.0+0xd0>
 200917c:	84000104 	addi	r16,r16,4
 2009180:	8f001526 	beq	r17,fp,20091d8 <__sprint_r.part.0+0xcc>
 2009184:	81400017 	ldw	r5,0(r16)
 2009188:	980d883a 	mov	r6,r19
 200918c:	a009883a 	mov	r4,r20
 2009190:	200abfc0 	call	200abfc <_fputwc_r>
 2009194:	e7000044 	addi	fp,fp,1
 2009198:	14bff81e 	bne	r2,r18,200917c <__alt_data_end+0xff00917c>
 200919c:	9005883a 	mov	r2,r18
 20091a0:	a8000215 	stw	zero,8(r21)
 20091a4:	a8000115 	stw	zero,4(r21)
 20091a8:	dfc00917 	ldw	ra,36(sp)
 20091ac:	df000817 	ldw	fp,32(sp)
 20091b0:	ddc00717 	ldw	r23,28(sp)
 20091b4:	dd800617 	ldw	r22,24(sp)
 20091b8:	dd400517 	ldw	r21,20(sp)
 20091bc:	dd000417 	ldw	r20,16(sp)
 20091c0:	dcc00317 	ldw	r19,12(sp)
 20091c4:	dc800217 	ldw	r18,8(sp)
 20091c8:	dc400117 	ldw	r17,4(sp)
 20091cc:	dc000017 	ldw	r16,0(sp)
 20091d0:	dec00a04 	addi	sp,sp,40
 20091d4:	f800283a 	ret
 20091d8:	a8800217 	ldw	r2,8(r21)
 20091dc:	8c63883a 	add	r17,r17,r17
 20091e0:	8c63883a 	add	r17,r17,r17
 20091e4:	1445c83a 	sub	r2,r2,r17
 20091e8:	a8800215 	stw	r2,8(r21)
 20091ec:	b5800204 	addi	r22,r22,8
 20091f0:	bdc00204 	addi	r23,r23,8
 20091f4:	103fdb1e 	bne	r2,zero,2009164 <__alt_data_end+0xff009164>
 20091f8:	0005883a 	mov	r2,zero
 20091fc:	003fe806 	br	20091a0 <__alt_data_end+0xff0091a0>
 2009200:	200626c0 	call	200626c <__sfvwrite_r>
 2009204:	003fe606 	br	20091a0 <__alt_data_end+0xff0091a0>

02009208 <__sprint_r>:
 2009208:	30c00217 	ldw	r3,8(r6)
 200920c:	18000126 	beq	r3,zero,2009214 <__sprint_r+0xc>
 2009210:	200910c1 	jmpi	200910c <__sprint_r.part.0>
 2009214:	30000115 	stw	zero,4(r6)
 2009218:	0005883a 	mov	r2,zero
 200921c:	f800283a 	ret

02009220 <___vfiprintf_internal_r>:
 2009220:	deffca04 	addi	sp,sp,-216
 2009224:	dd403115 	stw	r21,196(sp)
 2009228:	dfc03515 	stw	ra,212(sp)
 200922c:	df003415 	stw	fp,208(sp)
 2009230:	ddc03315 	stw	r23,204(sp)
 2009234:	dd803215 	stw	r22,200(sp)
 2009238:	dd003015 	stw	r20,192(sp)
 200923c:	dcc02f15 	stw	r19,188(sp)
 2009240:	dc802e15 	stw	r18,184(sp)
 2009244:	dc402d15 	stw	r17,180(sp)
 2009248:	dc002c15 	stw	r16,176(sp)
 200924c:	d9002115 	stw	r4,132(sp)
 2009250:	d9402015 	stw	r5,128(sp)
 2009254:	d9c02215 	stw	r7,136(sp)
 2009258:	302b883a 	mov	r21,r6
 200925c:	20000226 	beq	r4,zero,2009268 <___vfiprintf_internal_r+0x48>
 2009260:	20800e17 	ldw	r2,56(r4)
 2009264:	1000cf26 	beq	r2,zero,20095a4 <___vfiprintf_internal_r+0x384>
 2009268:	d8c02017 	ldw	r3,128(sp)
 200926c:	1880030b 	ldhu	r2,12(r3)
 2009270:	10c8000c 	andi	r3,r2,8192
 2009274:	1800071e 	bne	r3,zero,2009294 <___vfiprintf_internal_r+0x74>
 2009278:	d9402017 	ldw	r5,128(sp)
 200927c:	00f7ffc4 	movi	r3,-8193
 2009280:	10880014 	ori	r2,r2,8192
 2009284:	29001917 	ldw	r4,100(r5)
 2009288:	2880030d 	sth	r2,12(r5)
 200928c:	20c6703a 	and	r3,r4,r3
 2009290:	28c01915 	stw	r3,100(r5)
 2009294:	10c0020c 	andi	r3,r2,8
 2009298:	1800a526 	beq	r3,zero,2009530 <___vfiprintf_internal_r+0x310>
 200929c:	d9002017 	ldw	r4,128(sp)
 20092a0:	20c00417 	ldw	r3,16(r4)
 20092a4:	1800a226 	beq	r3,zero,2009530 <___vfiprintf_internal_r+0x310>
 20092a8:	1080068c 	andi	r2,r2,26
 20092ac:	00c00284 	movi	r3,10
 20092b0:	10c0a826 	beq	r2,r3,2009554 <___vfiprintf_internal_r+0x334>
 20092b4:	d9001a04 	addi	r4,sp,104
 20092b8:	d94019c4 	addi	r5,sp,103
 20092bc:	04808074 	movhi	r18,513
 20092c0:	2145c83a 	sub	r2,r4,r5
 20092c4:	94846b04 	addi	r18,r18,4524
 20092c8:	d9001e15 	stw	r4,120(sp)
 20092cc:	d9401f15 	stw	r5,124(sp)
 20092d0:	dec01a15 	stw	sp,104(sp)
 20092d4:	d8001c15 	stw	zero,112(sp)
 20092d8:	d8001b15 	stw	zero,108(sp)
 20092dc:	d811883a 	mov	r8,sp
 20092e0:	d8002615 	stw	zero,152(sp)
 20092e4:	d8002415 	stw	zero,144(sp)
 20092e8:	d8802815 	stw	r2,160(sp)
 20092ec:	a82d883a 	mov	r22,r21
 20092f0:	b0800007 	ldb	r2,0(r22)
 20092f4:	10040d26 	beq	r2,zero,200a32c <___vfiprintf_internal_r+0x110c>
 20092f8:	00c00944 	movi	r3,37
 20092fc:	b029883a 	mov	r20,r22
 2009300:	10c0021e 	bne	r2,r3,200930c <___vfiprintf_internal_r+0xec>
 2009304:	00001606 	br	2009360 <___vfiprintf_internal_r+0x140>
 2009308:	10c00326 	beq	r2,r3,2009318 <___vfiprintf_internal_r+0xf8>
 200930c:	a5000044 	addi	r20,r20,1
 2009310:	a0800007 	ldb	r2,0(r20)
 2009314:	103ffc1e 	bne	r2,zero,2009308 <__alt_data_end+0xff009308>
 2009318:	a5a1c83a 	sub	r16,r20,r22
 200931c:	80001026 	beq	r16,zero,2009360 <___vfiprintf_internal_r+0x140>
 2009320:	d8c01c17 	ldw	r3,112(sp)
 2009324:	d8801b17 	ldw	r2,108(sp)
 2009328:	45800015 	stw	r22,0(r8)
 200932c:	80c7883a 	add	r3,r16,r3
 2009330:	10800044 	addi	r2,r2,1
 2009334:	44000115 	stw	r16,4(r8)
 2009338:	d8c01c15 	stw	r3,112(sp)
 200933c:	d8801b15 	stw	r2,108(sp)
 2009340:	010001c4 	movi	r4,7
 2009344:	2080750e 	bge	r4,r2,200951c <___vfiprintf_internal_r+0x2fc>
 2009348:	1803951e 	bne	r3,zero,200a1a0 <___vfiprintf_internal_r+0xf80>
 200934c:	d8c02417 	ldw	r3,144(sp)
 2009350:	d8001b15 	stw	zero,108(sp)
 2009354:	d811883a 	mov	r8,sp
 2009358:	1c07883a 	add	r3,r3,r16
 200935c:	d8c02415 	stw	r3,144(sp)
 2009360:	a0800007 	ldb	r2,0(r20)
 2009364:	1002e026 	beq	r2,zero,2009ee8 <___vfiprintf_internal_r+0xcc8>
 2009368:	a5800044 	addi	r22,r20,1
 200936c:	a0c00047 	ldb	r3,1(r20)
 2009370:	d8001d85 	stb	zero,118(sp)
 2009374:	0027883a 	mov	r19,zero
 2009378:	d8002305 	stb	zero,140(sp)
 200937c:	043fffc4 	movi	r16,-1
 2009380:	d8002515 	stw	zero,148(sp)
 2009384:	0023883a 	mov	r17,zero
 2009388:	05001604 	movi	r20,88
 200938c:	05400244 	movi	r21,9
 2009390:	402f883a 	mov	r23,r8
 2009394:	b5800044 	addi	r22,r22,1
 2009398:	18bff804 	addi	r2,r3,-32
 200939c:	a0827736 	bltu	r20,r2,2009d7c <___vfiprintf_internal_r+0xb5c>
 20093a0:	100490ba 	slli	r2,r2,2
 20093a4:	01008074 	movhi	r4,513
 20093a8:	2124ee04 	addi	r4,r4,-27720
 20093ac:	1105883a 	add	r2,r2,r4
 20093b0:	10800017 	ldw	r2,0(r2)
 20093b4:	1000683a 	jmp	r2
 20093b8:	02009a7c 	xorhi	r8,zero,617
 20093bc:	02009d7c 	xorhi	r8,zero,629
 20093c0:	02009d7c 	xorhi	r8,zero,629
 20093c4:	02009a98 	cmpnei	r8,zero,618
 20093c8:	02009d7c 	xorhi	r8,zero,629
 20093cc:	02009d7c 	xorhi	r8,zero,629
 20093d0:	02009d7c 	xorhi	r8,zero,629
 20093d4:	02009d7c 	xorhi	r8,zero,629
 20093d8:	02009d7c 	xorhi	r8,zero,629
 20093dc:	02009d7c 	xorhi	r8,zero,629
 20093e0:	02009ca0 	cmpeqi	r8,zero,626
 20093e4:	02009cc4 	movi	r8,627
 20093e8:	02009d7c 	xorhi	r8,zero,629
 20093ec:	020095bc 	xorhi	r8,zero,598
 20093f0:	02009cd8 	cmpnei	r8,zero,627
 20093f4:	02009d7c 	xorhi	r8,zero,629
 20093f8:	02009aa4 	muli	r8,zero,618
 20093fc:	02009ab0 	cmpltui	r8,zero,618
 2009400:	02009ab0 	cmpltui	r8,zero,618
 2009404:	02009ab0 	cmpltui	r8,zero,618
 2009408:	02009ab0 	cmpltui	r8,zero,618
 200940c:	02009ab0 	cmpltui	r8,zero,618
 2009410:	02009ab0 	cmpltui	r8,zero,618
 2009414:	02009ab0 	cmpltui	r8,zero,618
 2009418:	02009ab0 	cmpltui	r8,zero,618
 200941c:	02009ab0 	cmpltui	r8,zero,618
 2009420:	02009d7c 	xorhi	r8,zero,629
 2009424:	02009d7c 	xorhi	r8,zero,629
 2009428:	02009d7c 	xorhi	r8,zero,629
 200942c:	02009d7c 	xorhi	r8,zero,629
 2009430:	02009d7c 	xorhi	r8,zero,629
 2009434:	02009d7c 	xorhi	r8,zero,629
 2009438:	02009d7c 	xorhi	r8,zero,629
 200943c:	02009d7c 	xorhi	r8,zero,629
 2009440:	02009d7c 	xorhi	r8,zero,629
 2009444:	02009d7c 	xorhi	r8,zero,629
 2009448:	02009af0 	cmpltui	r8,zero,619
 200944c:	02009d7c 	xorhi	r8,zero,629
 2009450:	02009d7c 	xorhi	r8,zero,629
 2009454:	02009d7c 	xorhi	r8,zero,629
 2009458:	02009d7c 	xorhi	r8,zero,629
 200945c:	02009d7c 	xorhi	r8,zero,629
 2009460:	02009d7c 	xorhi	r8,zero,629
 2009464:	02009d7c 	xorhi	r8,zero,629
 2009468:	02009d7c 	xorhi	r8,zero,629
 200946c:	02009d7c 	xorhi	r8,zero,629
 2009470:	02009d7c 	xorhi	r8,zero,629
 2009474:	02009b2c 	andhi	r8,zero,620
 2009478:	02009d7c 	xorhi	r8,zero,629
 200947c:	02009d7c 	xorhi	r8,zero,629
 2009480:	02009d7c 	xorhi	r8,zero,629
 2009484:	02009d7c 	xorhi	r8,zero,629
 2009488:	02009d7c 	xorhi	r8,zero,629
 200948c:	02009b88 	cmpgei	r8,zero,622
 2009490:	02009d7c 	xorhi	r8,zero,629
 2009494:	02009d7c 	xorhi	r8,zero,629
 2009498:	02009bfc 	xorhi	r8,zero,623
 200949c:	02009d7c 	xorhi	r8,zero,629
 20094a0:	02009d7c 	xorhi	r8,zero,629
 20094a4:	02009d7c 	xorhi	r8,zero,629
 20094a8:	02009d7c 	xorhi	r8,zero,629
 20094ac:	02009d7c 	xorhi	r8,zero,629
 20094b0:	02009d7c 	xorhi	r8,zero,629
 20094b4:	02009d7c 	xorhi	r8,zero,629
 20094b8:	02009d7c 	xorhi	r8,zero,629
 20094bc:	02009d7c 	xorhi	r8,zero,629
 20094c0:	02009d7c 	xorhi	r8,zero,629
 20094c4:	020099a4 	muli	r8,zero,614
 20094c8:	020099d4 	movui	r8,615
 20094cc:	02009d7c 	xorhi	r8,zero,629
 20094d0:	02009d7c 	xorhi	r8,zero,629
 20094d4:	02009d7c 	xorhi	r8,zero,629
 20094d8:	02009d24 	muli	r8,zero,628
 20094dc:	020099d4 	movui	r8,615
 20094e0:	02009d7c 	xorhi	r8,zero,629
 20094e4:	02009d7c 	xorhi	r8,zero,629
 20094e8:	0200987c 	xorhi	r8,zero,609
 20094ec:	02009d7c 	xorhi	r8,zero,629
 20094f0:	02009890 	cmplti	r8,zero,610
 20094f4:	020098c8 	cmpgei	r8,zero,611
 20094f8:	020095c8 	cmpgei	r8,zero,599
 20094fc:	02009870 	cmpltui	r8,zero,609
 2009500:	02009d7c 	xorhi	r8,zero,629
 2009504:	02009c3c 	xorhi	r8,zero,624
 2009508:	02009d7c 	xorhi	r8,zero,629
 200950c:	02009c88 	cmpgei	r8,zero,626
 2009510:	02009d7c 	xorhi	r8,zero,629
 2009514:	02009d7c 	xorhi	r8,zero,629
 2009518:	0200994c 	andi	r8,zero,613
 200951c:	42000204 	addi	r8,r8,8
 2009520:	d8c02417 	ldw	r3,144(sp)
 2009524:	1c07883a 	add	r3,r3,r16
 2009528:	d8c02415 	stw	r3,144(sp)
 200952c:	003f8c06 	br	2009360 <__alt_data_end+0xff009360>
 2009530:	d9402017 	ldw	r5,128(sp)
 2009534:	d9002117 	ldw	r4,132(sp)
 2009538:	2003ddc0 	call	2003ddc <__swsetup_r>
 200953c:	1003c11e 	bne	r2,zero,200a444 <___vfiprintf_internal_r+0x1224>
 2009540:	d9402017 	ldw	r5,128(sp)
 2009544:	00c00284 	movi	r3,10
 2009548:	2880030b 	ldhu	r2,12(r5)
 200954c:	1080068c 	andi	r2,r2,26
 2009550:	10ff581e 	bne	r2,r3,20092b4 <__alt_data_end+0xff0092b4>
 2009554:	d8c02017 	ldw	r3,128(sp)
 2009558:	1880038f 	ldh	r2,14(r3)
 200955c:	103f5516 	blt	r2,zero,20092b4 <__alt_data_end+0xff0092b4>
 2009560:	d9c02217 	ldw	r7,136(sp)
 2009564:	d9002117 	ldw	r4,132(sp)
 2009568:	a80d883a 	mov	r6,r21
 200956c:	180b883a 	mov	r5,r3
 2009570:	200a7480 	call	200a748 <__sbprintf>
 2009574:	dfc03517 	ldw	ra,212(sp)
 2009578:	df003417 	ldw	fp,208(sp)
 200957c:	ddc03317 	ldw	r23,204(sp)
 2009580:	dd803217 	ldw	r22,200(sp)
 2009584:	dd403117 	ldw	r21,196(sp)
 2009588:	dd003017 	ldw	r20,192(sp)
 200958c:	dcc02f17 	ldw	r19,188(sp)
 2009590:	dc802e17 	ldw	r18,184(sp)
 2009594:	dc402d17 	ldw	r17,180(sp)
 2009598:	dc002c17 	ldw	r16,176(sp)
 200959c:	dec03604 	addi	sp,sp,216
 20095a0:	f800283a 	ret
 20095a4:	2005de80 	call	2005de8 <__sinit>
 20095a8:	003f2f06 	br	2009268 <__alt_data_end+0xff009268>
 20095ac:	d8c02517 	ldw	r3,148(sp)
 20095b0:	d8802215 	stw	r2,136(sp)
 20095b4:	00c7c83a 	sub	r3,zero,r3
 20095b8:	d8c02515 	stw	r3,148(sp)
 20095bc:	8c400114 	ori	r17,r17,4
 20095c0:	b0c00007 	ldb	r3,0(r22)
 20095c4:	003f7306 	br	2009394 <__alt_data_end+0xff009394>
 20095c8:	00800c04 	movi	r2,48
 20095cc:	d9402217 	ldw	r5,136(sp)
 20095d0:	d8801d05 	stb	r2,116(sp)
 20095d4:	00801e04 	movi	r2,120
 20095d8:	d8801d45 	stb	r2,117(sp)
 20095dc:	d8001d85 	stb	zero,118(sp)
 20095e0:	b811883a 	mov	r8,r23
 20095e4:	28c00104 	addi	r3,r5,4
 20095e8:	2cc00017 	ldw	r19,0(r5)
 20095ec:	0029883a 	mov	r20,zero
 20095f0:	88800094 	ori	r2,r17,2
 20095f4:	80032516 	blt	r16,zero,200a28c <___vfiprintf_internal_r+0x106c>
 20095f8:	00bfdfc4 	movi	r2,-129
 20095fc:	88a2703a 	and	r17,r17,r2
 2009600:	d8c02215 	stw	r3,136(sp)
 2009604:	8c400094 	ori	r17,r17,2
 2009608:	98032a1e 	bne	r19,zero,200a2b4 <___vfiprintf_internal_r+0x1094>
 200960c:	00808074 	movhi	r2,513
 2009610:	10840a04 	addi	r2,r2,4136
 2009614:	d8802615 	stw	r2,152(sp)
 2009618:	002b883a 	mov	r21,zero
 200961c:	8001741e 	bne	r16,zero,2009bf0 <___vfiprintf_internal_r+0x9d0>
 2009620:	0021883a 	mov	r16,zero
 2009624:	0029883a 	mov	r20,zero
 2009628:	ddc01a04 	addi	r23,sp,104
 200962c:	8027883a 	mov	r19,r16
 2009630:	8500010e 	bge	r16,r20,2009638 <___vfiprintf_internal_r+0x418>
 2009634:	a027883a 	mov	r19,r20
 2009638:	ad403fcc 	andi	r21,r21,255
 200963c:	ad40201c 	xori	r21,r21,128
 2009640:	ad7fe004 	addi	r21,r21,-128
 2009644:	a8000126 	beq	r21,zero,200964c <___vfiprintf_internal_r+0x42c>
 2009648:	9cc00044 	addi	r19,r19,1
 200964c:	89c0008c 	andi	r7,r17,2
 2009650:	38000126 	beq	r7,zero,2009658 <___vfiprintf_internal_r+0x438>
 2009654:	9cc00084 	addi	r19,r19,2
 2009658:	88c0210c 	andi	r3,r17,132
 200965c:	1801dd1e 	bne	r3,zero,2009dd4 <___vfiprintf_internal_r+0xbb4>
 2009660:	d9402517 	ldw	r5,148(sp)
 2009664:	2cebc83a 	sub	r21,r5,r19
 2009668:	0541da0e 	bge	zero,r21,2009dd4 <___vfiprintf_internal_r+0xbb4>
 200966c:	07000404 	movi	fp,16
 2009670:	d8801c17 	ldw	r2,112(sp)
 2009674:	e543be0e 	bge	fp,r21,200a570 <___vfiprintf_internal_r+0x1350>
 2009678:	01408074 	movhi	r5,513
 200967c:	29446f04 	addi	r5,r5,4540
 2009680:	dc002715 	stw	r16,156(sp)
 2009684:	d9801b17 	ldw	r6,108(sp)
 2009688:	a821883a 	mov	r16,r21
 200968c:	d9402315 	stw	r5,140(sp)
 2009690:	028001c4 	movi	r10,7
 2009694:	d9c02915 	stw	r7,164(sp)
 2009698:	182b883a 	mov	r21,r3
 200969c:	00000506 	br	20096b4 <___vfiprintf_internal_r+0x494>
 20096a0:	31000084 	addi	r4,r6,2
 20096a4:	42000204 	addi	r8,r8,8
 20096a8:	180d883a 	mov	r6,r3
 20096ac:	843ffc04 	addi	r16,r16,-16
 20096b0:	e4000f0e 	bge	fp,r16,20096f0 <___vfiprintf_internal_r+0x4d0>
 20096b4:	01008074 	movhi	r4,513
 20096b8:	10800404 	addi	r2,r2,16
 20096bc:	30c00044 	addi	r3,r6,1
 20096c0:	21046f04 	addi	r4,r4,4540
 20096c4:	41000015 	stw	r4,0(r8)
 20096c8:	47000115 	stw	fp,4(r8)
 20096cc:	d8801c15 	stw	r2,112(sp)
 20096d0:	d8c01b15 	stw	r3,108(sp)
 20096d4:	50fff20e 	bge	r10,r3,20096a0 <__alt_data_end+0xff0096a0>
 20096d8:	1001b21e 	bne	r2,zero,2009da4 <___vfiprintf_internal_r+0xb84>
 20096dc:	843ffc04 	addi	r16,r16,-16
 20096e0:	000d883a 	mov	r6,zero
 20096e4:	01000044 	movi	r4,1
 20096e8:	d811883a 	mov	r8,sp
 20096ec:	e43ff116 	blt	fp,r16,20096b4 <__alt_data_end+0xff0096b4>
 20096f0:	a807883a 	mov	r3,r21
 20096f4:	d9c02917 	ldw	r7,164(sp)
 20096f8:	802b883a 	mov	r21,r16
 20096fc:	dc002717 	ldw	r16,156(sp)
 2009700:	d9402317 	ldw	r5,140(sp)
 2009704:	a885883a 	add	r2,r21,r2
 2009708:	45400115 	stw	r21,4(r8)
 200970c:	41400015 	stw	r5,0(r8)
 2009710:	d8801c15 	stw	r2,112(sp)
 2009714:	d9001b15 	stw	r4,108(sp)
 2009718:	014001c4 	movi	r5,7
 200971c:	29026216 	blt	r5,r4,200a0a8 <___vfiprintf_internal_r+0xe88>
 2009720:	d9801d87 	ldb	r6,118(sp)
 2009724:	42000204 	addi	r8,r8,8
 2009728:	21400044 	addi	r5,r4,1
 200972c:	3001ae1e 	bne	r6,zero,2009de8 <___vfiprintf_internal_r+0xbc8>
 2009730:	3801bb26 	beq	r7,zero,2009e20 <___vfiprintf_internal_r+0xc00>
 2009734:	d9001d04 	addi	r4,sp,116
 2009738:	10800084 	addi	r2,r2,2
 200973c:	41000015 	stw	r4,0(r8)
 2009740:	01000084 	movi	r4,2
 2009744:	41000115 	stw	r4,4(r8)
 2009748:	d8801c15 	stw	r2,112(sp)
 200974c:	d9401b15 	stw	r5,108(sp)
 2009750:	010001c4 	movi	r4,7
 2009754:	2142680e 	bge	r4,r5,200a0f8 <___vfiprintf_internal_r+0xed8>
 2009758:	1002b11e 	bne	r2,zero,200a220 <___vfiprintf_internal_r+0x1000>
 200975c:	01802004 	movi	r6,128
 2009760:	01400044 	movi	r5,1
 2009764:	0009883a 	mov	r4,zero
 2009768:	d811883a 	mov	r8,sp
 200976c:	1981ae1e 	bne	r3,r6,2009e28 <___vfiprintf_internal_r+0xc08>
 2009770:	d8c02517 	ldw	r3,148(sp)
 2009774:	1cf9c83a 	sub	fp,r3,r19
 2009778:	0701ab0e 	bge	zero,fp,2009e28 <___vfiprintf_internal_r+0xc08>
 200977c:	05400404 	movi	r21,16
 2009780:	af03a90e 	bge	r21,fp,200a628 <___vfiprintf_internal_r+0x1408>
 2009784:	01408074 	movhi	r5,513
 2009788:	29446b04 	addi	r5,r5,4524
 200978c:	d9402315 	stw	r5,140(sp)
 2009790:	01c001c4 	movi	r7,7
 2009794:	00000506 	br	20097ac <___vfiprintf_internal_r+0x58c>
 2009798:	21800084 	addi	r6,r4,2
 200979c:	42000204 	addi	r8,r8,8
 20097a0:	1809883a 	mov	r4,r3
 20097a4:	e73ffc04 	addi	fp,fp,-16
 20097a8:	af000d0e 	bge	r21,fp,20097e0 <___vfiprintf_internal_r+0x5c0>
 20097ac:	10800404 	addi	r2,r2,16
 20097b0:	20c00044 	addi	r3,r4,1
 20097b4:	44800015 	stw	r18,0(r8)
 20097b8:	45400115 	stw	r21,4(r8)
 20097bc:	d8801c15 	stw	r2,112(sp)
 20097c0:	d8c01b15 	stw	r3,108(sp)
 20097c4:	38fff40e 	bge	r7,r3,2009798 <__alt_data_end+0xff009798>
 20097c8:	10022b1e 	bne	r2,zero,200a078 <___vfiprintf_internal_r+0xe58>
 20097cc:	e73ffc04 	addi	fp,fp,-16
 20097d0:	01800044 	movi	r6,1
 20097d4:	0009883a 	mov	r4,zero
 20097d8:	d811883a 	mov	r8,sp
 20097dc:	af3ff316 	blt	r21,fp,20097ac <__alt_data_end+0xff0097ac>
 20097e0:	d8c02317 	ldw	r3,140(sp)
 20097e4:	1705883a 	add	r2,r2,fp
 20097e8:	47000115 	stw	fp,4(r8)
 20097ec:	40c00015 	stw	r3,0(r8)
 20097f0:	d8801c15 	stw	r2,112(sp)
 20097f4:	d9801b15 	stw	r6,108(sp)
 20097f8:	00c001c4 	movi	r3,7
 20097fc:	19829416 	blt	r3,r6,200a250 <___vfiprintf_internal_r+0x1030>
 2009800:	8521c83a 	sub	r16,r16,r20
 2009804:	42000204 	addi	r8,r8,8
 2009808:	31400044 	addi	r5,r6,1
 200980c:	3009883a 	mov	r4,r6
 2009810:	04018716 	blt	zero,r16,2009e30 <___vfiprintf_internal_r+0xc10>
 2009814:	a085883a 	add	r2,r20,r2
 2009818:	45c00015 	stw	r23,0(r8)
 200981c:	45000115 	stw	r20,4(r8)
 2009820:	d8801c15 	stw	r2,112(sp)
 2009824:	d9401b15 	stw	r5,108(sp)
 2009828:	00c001c4 	movi	r3,7
 200982c:	1941c20e 	bge	r3,r5,2009f38 <___vfiprintf_internal_r+0xd18>
 2009830:	1002531e 	bne	r2,zero,200a180 <___vfiprintf_internal_r+0xf60>
 2009834:	d8001b15 	stw	zero,108(sp)
 2009838:	8c40010c 	andi	r17,r17,4
 200983c:	88023226 	beq	r17,zero,200a108 <___vfiprintf_internal_r+0xee8>
 2009840:	d9002517 	ldw	r4,148(sp)
 2009844:	24e3c83a 	sub	r17,r4,r19
 2009848:	04432916 	blt	zero,r17,200a4f0 <___vfiprintf_internal_r+0x12d0>
 200984c:	d8802517 	ldw	r2,148(sp)
 2009850:	14c0010e 	bge	r2,r19,2009858 <___vfiprintf_internal_r+0x638>
 2009854:	9805883a 	mov	r2,r19
 2009858:	d8c02417 	ldw	r3,144(sp)
 200985c:	1887883a 	add	r3,r3,r2
 2009860:	d8c02415 	stw	r3,144(sp)
 2009864:	d8001b15 	stw	zero,108(sp)
 2009868:	d811883a 	mov	r8,sp
 200986c:	003ea006 	br	20092f0 <__alt_data_end+0xff0092f0>
 2009870:	8c400814 	ori	r17,r17,32
 2009874:	b0c00007 	ldb	r3,0(r22)
 2009878:	003ec606 	br	2009394 <__alt_data_end+0xff009394>
 200987c:	b0c00007 	ldb	r3,0(r22)
 2009880:	00801b04 	movi	r2,108
 2009884:	18832026 	beq	r3,r2,200a508 <___vfiprintf_internal_r+0x12e8>
 2009888:	8c400414 	ori	r17,r17,16
 200988c:	003ec106 	br	2009394 <__alt_data_end+0xff009394>
 2009890:	9cc03fcc 	andi	r19,r19,255
 2009894:	b811883a 	mov	r8,r23
 2009898:	9803981e 	bne	r19,zero,200a6fc <___vfiprintf_internal_r+0x14dc>
 200989c:	8880080c 	andi	r2,r17,32
 20098a0:	1002be26 	beq	r2,zero,200a39c <___vfiprintf_internal_r+0x117c>
 20098a4:	d9002217 	ldw	r4,136(sp)
 20098a8:	d9402417 	ldw	r5,144(sp)
 20098ac:	20800017 	ldw	r2,0(r4)
 20098b0:	2807d7fa 	srai	r3,r5,31
 20098b4:	21000104 	addi	r4,r4,4
 20098b8:	d9002215 	stw	r4,136(sp)
 20098bc:	11400015 	stw	r5,0(r2)
 20098c0:	10c00115 	stw	r3,4(r2)
 20098c4:	003e8a06 	br	20092f0 <__alt_data_end+0xff0092f0>
 20098c8:	9cc03fcc 	andi	r19,r19,255
 20098cc:	b811883a 	mov	r8,r23
 20098d0:	9803871e 	bne	r19,zero,200a6f0 <___vfiprintf_internal_r+0x14d0>
 20098d4:	8880080c 	andi	r2,r17,32
 20098d8:	10009a26 	beq	r2,zero,2009b44 <___vfiprintf_internal_r+0x924>
 20098dc:	d9002217 	ldw	r4,136(sp)
 20098e0:	d8001d85 	stb	zero,118(sp)
 20098e4:	20800204 	addi	r2,r4,8
 20098e8:	24c00017 	ldw	r19,0(r4)
 20098ec:	25000117 	ldw	r20,4(r4)
 20098f0:	8002a416 	blt	r16,zero,200a384 <___vfiprintf_internal_r+0x1164>
 20098f4:	013fdfc4 	movi	r4,-129
 20098f8:	9d06b03a 	or	r3,r19,r20
 20098fc:	d8802215 	stw	r2,136(sp)
 2009900:	8922703a 	and	r17,r17,r4
 2009904:	18009b26 	beq	r3,zero,2009b74 <___vfiprintf_internal_r+0x954>
 2009908:	002b883a 	mov	r21,zero
 200990c:	ddc01a04 	addi	r23,sp,104
 2009910:	9806d0fa 	srli	r3,r19,3
 2009914:	a008977a 	slli	r4,r20,29
 2009918:	a028d0fa 	srli	r20,r20,3
 200991c:	9cc001cc 	andi	r19,r19,7
 2009920:	98800c04 	addi	r2,r19,48
 2009924:	bdffffc4 	addi	r23,r23,-1
 2009928:	20e6b03a 	or	r19,r4,r3
 200992c:	b8800005 	stb	r2,0(r23)
 2009930:	9d06b03a 	or	r3,r19,r20
 2009934:	183ff61e 	bne	r3,zero,2009910 <__alt_data_end+0xff009910>
 2009938:	88c0004c 	andi	r3,r17,1
 200993c:	18021f1e 	bne	r3,zero,200a1bc <___vfiprintf_internal_r+0xf9c>
 2009940:	d9401e17 	ldw	r5,120(sp)
 2009944:	2de9c83a 	sub	r20,r5,r23
 2009948:	003f3806 	br	200962c <__alt_data_end+0xff00962c>
 200994c:	9cc03fcc 	andi	r19,r19,255
 2009950:	b811883a 	mov	r8,r23
 2009954:	98034f1e 	bne	r19,zero,200a694 <___vfiprintf_internal_r+0x1474>
 2009958:	00808074 	movhi	r2,513
 200995c:	10840a04 	addi	r2,r2,4136
 2009960:	d8802615 	stw	r2,152(sp)
 2009964:	8880080c 	andi	r2,r17,32
 2009968:	1000ac26 	beq	r2,zero,2009c1c <___vfiprintf_internal_r+0x9fc>
 200996c:	d9002217 	ldw	r4,136(sp)
 2009970:	24c00017 	ldw	r19,0(r4)
 2009974:	25000117 	ldw	r20,4(r4)
 2009978:	21000204 	addi	r4,r4,8
 200997c:	d9002215 	stw	r4,136(sp)
 2009980:	8880004c 	andi	r2,r17,1
 2009984:	1001e726 	beq	r2,zero,200a124 <___vfiprintf_internal_r+0xf04>
 2009988:	9d04b03a 	or	r2,r19,r20
 200998c:	10025c1e 	bne	r2,zero,200a300 <___vfiprintf_internal_r+0x10e0>
 2009990:	d8001d85 	stb	zero,118(sp)
 2009994:	80024416 	blt	r16,zero,200a2a8 <___vfiprintf_internal_r+0x1088>
 2009998:	00bfdfc4 	movi	r2,-129
 200999c:	88a2703a 	and	r17,r17,r2
 20099a0:	003f1d06 	br	2009618 <__alt_data_end+0xff009618>
 20099a4:	d8c02217 	ldw	r3,136(sp)
 20099a8:	04c00044 	movi	r19,1
 20099ac:	b811883a 	mov	r8,r23
 20099b0:	18800017 	ldw	r2,0(r3)
 20099b4:	18c00104 	addi	r3,r3,4
 20099b8:	d8001d85 	stb	zero,118(sp)
 20099bc:	d8801005 	stb	r2,64(sp)
 20099c0:	d8c02215 	stw	r3,136(sp)
 20099c4:	9829883a 	mov	r20,r19
 20099c8:	ddc01004 	addi	r23,sp,64
 20099cc:	0021883a 	mov	r16,zero
 20099d0:	003f1e06 	br	200964c <__alt_data_end+0xff00964c>
 20099d4:	9cc03fcc 	andi	r19,r19,255
 20099d8:	b811883a 	mov	r8,r23
 20099dc:	9803331e 	bne	r19,zero,200a6ac <___vfiprintf_internal_r+0x148c>
 20099e0:	8880080c 	andi	r2,r17,32
 20099e4:	10004826 	beq	r2,zero,2009b08 <___vfiprintf_internal_r+0x8e8>
 20099e8:	d9002217 	ldw	r4,136(sp)
 20099ec:	20800117 	ldw	r2,4(r4)
 20099f0:	24c00017 	ldw	r19,0(r4)
 20099f4:	21000204 	addi	r4,r4,8
 20099f8:	d9002215 	stw	r4,136(sp)
 20099fc:	1029883a 	mov	r20,r2
 2009a00:	10024c16 	blt	r2,zero,200a334 <___vfiprintf_internal_r+0x1114>
 2009a04:	dd401d83 	ldbu	r21,118(sp)
 2009a08:	80007116 	blt	r16,zero,2009bd0 <___vfiprintf_internal_r+0x9b0>
 2009a0c:	00ffdfc4 	movi	r3,-129
 2009a10:	9d04b03a 	or	r2,r19,r20
 2009a14:	88e2703a 	and	r17,r17,r3
 2009a18:	1000d126 	beq	r2,zero,2009d60 <___vfiprintf_internal_r+0xb40>
 2009a1c:	a0023526 	beq	r20,zero,200a2f4 <___vfiprintf_internal_r+0x10d4>
 2009a20:	ddc01a04 	addi	r23,sp,104
 2009a24:	4039883a 	mov	fp,r8
 2009a28:	9809883a 	mov	r4,r19
 2009a2c:	a00b883a 	mov	r5,r20
 2009a30:	01800284 	movi	r6,10
 2009a34:	000f883a 	mov	r7,zero
 2009a38:	200b74c0 	call	200b74c <__umoddi3>
 2009a3c:	10800c04 	addi	r2,r2,48
 2009a40:	bdffffc4 	addi	r23,r23,-1
 2009a44:	9809883a 	mov	r4,r19
 2009a48:	a00b883a 	mov	r5,r20
 2009a4c:	b8800005 	stb	r2,0(r23)
 2009a50:	01800284 	movi	r6,10
 2009a54:	000f883a 	mov	r7,zero
 2009a58:	200b1500 	call	200b150 <__udivdi3>
 2009a5c:	1027883a 	mov	r19,r2
 2009a60:	10c4b03a 	or	r2,r2,r3
 2009a64:	1829883a 	mov	r20,r3
 2009a68:	103fef1e 	bne	r2,zero,2009a28 <__alt_data_end+0xff009a28>
 2009a6c:	d9001e17 	ldw	r4,120(sp)
 2009a70:	e011883a 	mov	r8,fp
 2009a74:	25e9c83a 	sub	r20,r4,r23
 2009a78:	003eec06 	br	200962c <__alt_data_end+0xff00962c>
 2009a7c:	d8802307 	ldb	r2,140(sp)
 2009a80:	1002361e 	bne	r2,zero,200a35c <___vfiprintf_internal_r+0x113c>
 2009a84:	00c00804 	movi	r3,32
 2009a88:	d8c02305 	stb	r3,140(sp)
 2009a8c:	04c00044 	movi	r19,1
 2009a90:	b0c00007 	ldb	r3,0(r22)
 2009a94:	003e3f06 	br	2009394 <__alt_data_end+0xff009394>
 2009a98:	8c400054 	ori	r17,r17,1
 2009a9c:	b0c00007 	ldb	r3,0(r22)
 2009aa0:	003e3c06 	br	2009394 <__alt_data_end+0xff009394>
 2009aa4:	8c402014 	ori	r17,r17,128
 2009aa8:	b0c00007 	ldb	r3,0(r22)
 2009aac:	003e3906 	br	2009394 <__alt_data_end+0xff009394>
 2009ab0:	dc002715 	stw	r16,156(sp)
 2009ab4:	d8002515 	stw	zero,148(sp)
 2009ab8:	1f3ff404 	addi	fp,r3,-48
 2009abc:	0009883a 	mov	r4,zero
 2009ac0:	b021883a 	mov	r16,r22
 2009ac4:	01400284 	movi	r5,10
 2009ac8:	20018280 	call	2001828 <__mulsi3>
 2009acc:	80c00007 	ldb	r3,0(r16)
 2009ad0:	e089883a 	add	r4,fp,r2
 2009ad4:	b5800044 	addi	r22,r22,1
 2009ad8:	1f3ff404 	addi	fp,r3,-48
 2009adc:	b021883a 	mov	r16,r22
 2009ae0:	af3ff82e 	bgeu	r21,fp,2009ac4 <__alt_data_end+0xff009ac4>
 2009ae4:	d9002515 	stw	r4,148(sp)
 2009ae8:	dc002717 	ldw	r16,156(sp)
 2009aec:	003e2a06 	br	2009398 <__alt_data_end+0xff009398>
 2009af0:	9cc03fcc 	andi	r19,r19,255
 2009af4:	b811883a 	mov	r8,r23
 2009af8:	9802e91e 	bne	r19,zero,200a6a0 <___vfiprintf_internal_r+0x1480>
 2009afc:	8c400414 	ori	r17,r17,16
 2009b00:	8880080c 	andi	r2,r17,32
 2009b04:	103fb81e 	bne	r2,zero,20099e8 <__alt_data_end+0xff0099e8>
 2009b08:	8880040c 	andi	r2,r17,16
 2009b0c:	10022e26 	beq	r2,zero,200a3c8 <___vfiprintf_internal_r+0x11a8>
 2009b10:	d9402217 	ldw	r5,136(sp)
 2009b14:	2cc00017 	ldw	r19,0(r5)
 2009b18:	29400104 	addi	r5,r5,4
 2009b1c:	d9402215 	stw	r5,136(sp)
 2009b20:	9829d7fa 	srai	r20,r19,31
 2009b24:	a005883a 	mov	r2,r20
 2009b28:	003fb506 	br	2009a00 <__alt_data_end+0xff009a00>
 2009b2c:	9cc03fcc 	andi	r19,r19,255
 2009b30:	b811883a 	mov	r8,r23
 2009b34:	9802fa1e 	bne	r19,zero,200a720 <___vfiprintf_internal_r+0x1500>
 2009b38:	8c400414 	ori	r17,r17,16
 2009b3c:	8880080c 	andi	r2,r17,32
 2009b40:	103f661e 	bne	r2,zero,20098dc <__alt_data_end+0xff0098dc>
 2009b44:	8880040c 	andi	r2,r17,16
 2009b48:	10020626 	beq	r2,zero,200a364 <___vfiprintf_internal_r+0x1144>
 2009b4c:	d9402217 	ldw	r5,136(sp)
 2009b50:	d8001d85 	stb	zero,118(sp)
 2009b54:	0029883a 	mov	r20,zero
 2009b58:	28800104 	addi	r2,r5,4
 2009b5c:	2cc00017 	ldw	r19,0(r5)
 2009b60:	80020816 	blt	r16,zero,200a384 <___vfiprintf_internal_r+0x1164>
 2009b64:	00ffdfc4 	movi	r3,-129
 2009b68:	d8802215 	stw	r2,136(sp)
 2009b6c:	88e2703a 	and	r17,r17,r3
 2009b70:	983f651e 	bne	r19,zero,2009908 <__alt_data_end+0xff009908>
 2009b74:	002b883a 	mov	r21,zero
 2009b78:	8002cf26 	beq	r16,zero,200a6b8 <___vfiprintf_internal_r+0x1498>
 2009b7c:	0027883a 	mov	r19,zero
 2009b80:	0029883a 	mov	r20,zero
 2009b84:	003f6106 	br	200990c <__alt_data_end+0xff00990c>
 2009b88:	9cc03fcc 	andi	r19,r19,255
 2009b8c:	b811883a 	mov	r8,r23
 2009b90:	9802e01e 	bne	r19,zero,200a714 <___vfiprintf_internal_r+0x14f4>
 2009b94:	8c400414 	ori	r17,r17,16
 2009b98:	8880080c 	andi	r2,r17,32
 2009b9c:	1000641e 	bne	r2,zero,2009d30 <___vfiprintf_internal_r+0xb10>
 2009ba0:	8880040c 	andi	r2,r17,16
 2009ba4:	1001c81e 	bne	r2,zero,200a2c8 <___vfiprintf_internal_r+0x10a8>
 2009ba8:	8880100c 	andi	r2,r17,64
 2009bac:	d8001d85 	stb	zero,118(sp)
 2009bb0:	1002281e 	bne	r2,zero,200a454 <___vfiprintf_internal_r+0x1234>
 2009bb4:	d9002217 	ldw	r4,136(sp)
 2009bb8:	0029883a 	mov	r20,zero
 2009bbc:	20800104 	addi	r2,r4,4
 2009bc0:	24c00017 	ldw	r19,0(r4)
 2009bc4:	8001c60e 	bge	r16,zero,200a2e0 <___vfiprintf_internal_r+0x10c0>
 2009bc8:	d8802215 	stw	r2,136(sp)
 2009bcc:	002b883a 	mov	r21,zero
 2009bd0:	9d04b03a 	or	r2,r19,r20
 2009bd4:	103f911e 	bne	r2,zero,2009a1c <__alt_data_end+0xff009a1c>
 2009bd8:	00800044 	movi	r2,1
 2009bdc:	10803fcc 	andi	r2,r2,255
 2009be0:	00c00044 	movi	r3,1
 2009be4:	10c05f26 	beq	r2,r3,2009d64 <___vfiprintf_internal_r+0xb44>
 2009be8:	00c00084 	movi	r3,2
 2009bec:	10ffe31e 	bne	r2,r3,2009b7c <__alt_data_end+0xff009b7c>
 2009bf0:	0027883a 	mov	r19,zero
 2009bf4:	0029883a 	mov	r20,zero
 2009bf8:	00015106 	br	200a140 <___vfiprintf_internal_r+0xf20>
 2009bfc:	9cc03fcc 	andi	r19,r19,255
 2009c00:	b811883a 	mov	r8,r23
 2009c04:	9802c01e 	bne	r19,zero,200a708 <___vfiprintf_internal_r+0x14e8>
 2009c08:	01408074 	movhi	r5,513
 2009c0c:	29440504 	addi	r5,r5,4116
 2009c10:	d9402615 	stw	r5,152(sp)
 2009c14:	8880080c 	andi	r2,r17,32
 2009c18:	103f541e 	bne	r2,zero,200996c <__alt_data_end+0xff00996c>
 2009c1c:	8880040c 	andi	r2,r17,16
 2009c20:	1001f226 	beq	r2,zero,200a3ec <___vfiprintf_internal_r+0x11cc>
 2009c24:	d9402217 	ldw	r5,136(sp)
 2009c28:	0029883a 	mov	r20,zero
 2009c2c:	2cc00017 	ldw	r19,0(r5)
 2009c30:	29400104 	addi	r5,r5,4
 2009c34:	d9402215 	stw	r5,136(sp)
 2009c38:	003f5106 	br	2009980 <__alt_data_end+0xff009980>
 2009c3c:	d8c02217 	ldw	r3,136(sp)
 2009c40:	b811883a 	mov	r8,r23
 2009c44:	d8001d85 	stb	zero,118(sp)
 2009c48:	1dc00017 	ldw	r23,0(r3)
 2009c4c:	1f000104 	addi	fp,r3,4
 2009c50:	b8025926 	beq	r23,zero,200a5b8 <___vfiprintf_internal_r+0x1398>
 2009c54:	80023316 	blt	r16,zero,200a524 <___vfiprintf_internal_r+0x1304>
 2009c58:	800d883a 	mov	r6,r16
 2009c5c:	000b883a 	mov	r5,zero
 2009c60:	b809883a 	mov	r4,r23
 2009c64:	da002a15 	stw	r8,168(sp)
 2009c68:	20073600 	call	2007360 <memchr>
 2009c6c:	da002a17 	ldw	r8,168(sp)
 2009c70:	10026826 	beq	r2,zero,200a614 <___vfiprintf_internal_r+0x13f4>
 2009c74:	15e9c83a 	sub	r20,r2,r23
 2009c78:	dd401d83 	ldbu	r21,118(sp)
 2009c7c:	df002215 	stw	fp,136(sp)
 2009c80:	0021883a 	mov	r16,zero
 2009c84:	003e6906 	br	200962c <__alt_data_end+0xff00962c>
 2009c88:	9cc03fcc 	andi	r19,r19,255
 2009c8c:	b811883a 	mov	r8,r23
 2009c90:	983fc126 	beq	r19,zero,2009b98 <__alt_data_end+0xff009b98>
 2009c94:	d8c02303 	ldbu	r3,140(sp)
 2009c98:	d8c01d85 	stb	r3,118(sp)
 2009c9c:	003fbe06 	br	2009b98 <__alt_data_end+0xff009b98>
 2009ca0:	d9002217 	ldw	r4,136(sp)
 2009ca4:	d9402217 	ldw	r5,136(sp)
 2009ca8:	21000017 	ldw	r4,0(r4)
 2009cac:	28800104 	addi	r2,r5,4
 2009cb0:	d9002515 	stw	r4,148(sp)
 2009cb4:	203e3d16 	blt	r4,zero,20095ac <__alt_data_end+0xff0095ac>
 2009cb8:	d8802215 	stw	r2,136(sp)
 2009cbc:	b0c00007 	ldb	r3,0(r22)
 2009cc0:	003db406 	br	2009394 <__alt_data_end+0xff009394>
 2009cc4:	00c00ac4 	movi	r3,43
 2009cc8:	d8c02305 	stb	r3,140(sp)
 2009ccc:	04c00044 	movi	r19,1
 2009cd0:	b0c00007 	ldb	r3,0(r22)
 2009cd4:	003daf06 	br	2009394 <__alt_data_end+0xff009394>
 2009cd8:	b0c00007 	ldb	r3,0(r22)
 2009cdc:	01000a84 	movi	r4,42
 2009ce0:	b4000044 	addi	r16,r22,1
 2009ce4:	19025e26 	beq	r3,r4,200a660 <___vfiprintf_internal_r+0x1440>
 2009ce8:	1f3ff404 	addi	fp,r3,-48
 2009cec:	0009883a 	mov	r4,zero
 2009cf0:	af025236 	bltu	r21,fp,200a63c <___vfiprintf_internal_r+0x141c>
 2009cf4:	01400284 	movi	r5,10
 2009cf8:	20018280 	call	2001828 <__mulsi3>
 2009cfc:	80c00007 	ldb	r3,0(r16)
 2009d00:	1709883a 	add	r4,r2,fp
 2009d04:	85800044 	addi	r22,r16,1
 2009d08:	1f3ff404 	addi	fp,r3,-48
 2009d0c:	b021883a 	mov	r16,r22
 2009d10:	af3ff82e 	bgeu	r21,fp,2009cf4 <__alt_data_end+0xff009cf4>
 2009d14:	2021883a 	mov	r16,r4
 2009d18:	203d9f0e 	bge	r4,zero,2009398 <__alt_data_end+0xff009398>
 2009d1c:	043fffc4 	movi	r16,-1
 2009d20:	003d9d06 	br	2009398 <__alt_data_end+0xff009398>
 2009d24:	8c401014 	ori	r17,r17,64
 2009d28:	b0c00007 	ldb	r3,0(r22)
 2009d2c:	003d9906 	br	2009394 <__alt_data_end+0xff009394>
 2009d30:	d9002217 	ldw	r4,136(sp)
 2009d34:	d8001d85 	stb	zero,118(sp)
 2009d38:	20c00204 	addi	r3,r4,8
 2009d3c:	24c00017 	ldw	r19,0(r4)
 2009d40:	25000117 	ldw	r20,4(r4)
 2009d44:	8001e716 	blt	r16,zero,200a4e4 <___vfiprintf_internal_r+0x12c4>
 2009d48:	013fdfc4 	movi	r4,-129
 2009d4c:	9d04b03a 	or	r2,r19,r20
 2009d50:	d8c02215 	stw	r3,136(sp)
 2009d54:	8922703a 	and	r17,r17,r4
 2009d58:	002b883a 	mov	r21,zero
 2009d5c:	103f2f1e 	bne	r2,zero,2009a1c <__alt_data_end+0xff009a1c>
 2009d60:	803e2f26 	beq	r16,zero,2009620 <__alt_data_end+0xff009620>
 2009d64:	0027883a 	mov	r19,zero
 2009d68:	9cc00c04 	addi	r19,r19,48
 2009d6c:	dcc019c5 	stb	r19,103(sp)
 2009d70:	dd002817 	ldw	r20,160(sp)
 2009d74:	ddc019c4 	addi	r23,sp,103
 2009d78:	003e2c06 	br	200962c <__alt_data_end+0xff00962c>
 2009d7c:	9cc03fcc 	andi	r19,r19,255
 2009d80:	b811883a 	mov	r8,r23
 2009d84:	9802571e 	bne	r19,zero,200a6e4 <___vfiprintf_internal_r+0x14c4>
 2009d88:	18005726 	beq	r3,zero,2009ee8 <___vfiprintf_internal_r+0xcc8>
 2009d8c:	04c00044 	movi	r19,1
 2009d90:	d8c01005 	stb	r3,64(sp)
 2009d94:	d8001d85 	stb	zero,118(sp)
 2009d98:	9829883a 	mov	r20,r19
 2009d9c:	ddc01004 	addi	r23,sp,64
 2009da0:	003f0a06 	br	20099cc <__alt_data_end+0xff0099cc>
 2009da4:	d9402017 	ldw	r5,128(sp)
 2009da8:	d9002117 	ldw	r4,132(sp)
 2009dac:	d9801a04 	addi	r6,sp,104
 2009db0:	da802a15 	stw	r10,168(sp)
 2009db4:	200910c0 	call	200910c <__sprint_r.part.0>
 2009db8:	da802a17 	ldw	r10,168(sp)
 2009dbc:	1000501e 	bne	r2,zero,2009f00 <___vfiprintf_internal_r+0xce0>
 2009dc0:	d9801b17 	ldw	r6,108(sp)
 2009dc4:	d8801c17 	ldw	r2,112(sp)
 2009dc8:	d811883a 	mov	r8,sp
 2009dcc:	31000044 	addi	r4,r6,1
 2009dd0:	003e3606 	br	20096ac <__alt_data_end+0xff0096ac>
 2009dd4:	d9001b17 	ldw	r4,108(sp)
 2009dd8:	d8801c17 	ldw	r2,112(sp)
 2009ddc:	21400044 	addi	r5,r4,1
 2009de0:	d9801d87 	ldb	r6,118(sp)
 2009de4:	303e5226 	beq	r6,zero,2009730 <__alt_data_end+0xff009730>
 2009de8:	01800044 	movi	r6,1
 2009dec:	d9001d84 	addi	r4,sp,118
 2009df0:	1185883a 	add	r2,r2,r6
 2009df4:	41000015 	stw	r4,0(r8)
 2009df8:	41800115 	stw	r6,4(r8)
 2009dfc:	d8801c15 	stw	r2,112(sp)
 2009e00:	d9401b15 	stw	r5,108(sp)
 2009e04:	010001c4 	movi	r4,7
 2009e08:	2140b00e 	bge	r4,r5,200a0cc <___vfiprintf_internal_r+0xeac>
 2009e0c:	1000f61e 	bne	r2,zero,200a1e8 <___vfiprintf_internal_r+0xfc8>
 2009e10:	3800b31e 	bne	r7,zero,200a0e0 <___vfiprintf_internal_r+0xec0>
 2009e14:	0009883a 	mov	r4,zero
 2009e18:	300b883a 	mov	r5,r6
 2009e1c:	d811883a 	mov	r8,sp
 2009e20:	01802004 	movi	r6,128
 2009e24:	19be5226 	beq	r3,r6,2009770 <__alt_data_end+0xff009770>
 2009e28:	8521c83a 	sub	r16,r16,r20
 2009e2c:	043e790e 	bge	zero,r16,2009814 <__alt_data_end+0xff009814>
 2009e30:	05400404 	movi	r21,16
 2009e34:	ac01b00e 	bge	r21,r16,200a4f8 <___vfiprintf_internal_r+0x12d8>
 2009e38:	01408074 	movhi	r5,513
 2009e3c:	29446b04 	addi	r5,r5,4524
 2009e40:	d9402315 	stw	r5,140(sp)
 2009e44:	070001c4 	movi	fp,7
 2009e48:	00000506 	br	2009e60 <___vfiprintf_internal_r+0xc40>
 2009e4c:	21400084 	addi	r5,r4,2
 2009e50:	42000204 	addi	r8,r8,8
 2009e54:	1809883a 	mov	r4,r3
 2009e58:	843ffc04 	addi	r16,r16,-16
 2009e5c:	ac000d0e 	bge	r21,r16,2009e94 <___vfiprintf_internal_r+0xc74>
 2009e60:	10800404 	addi	r2,r2,16
 2009e64:	20c00044 	addi	r3,r4,1
 2009e68:	44800015 	stw	r18,0(r8)
 2009e6c:	45400115 	stw	r21,4(r8)
 2009e70:	d8801c15 	stw	r2,112(sp)
 2009e74:	d8c01b15 	stw	r3,108(sp)
 2009e78:	e0fff40e 	bge	fp,r3,2009e4c <__alt_data_end+0xff009e4c>
 2009e7c:	1000101e 	bne	r2,zero,2009ec0 <___vfiprintf_internal_r+0xca0>
 2009e80:	843ffc04 	addi	r16,r16,-16
 2009e84:	01400044 	movi	r5,1
 2009e88:	0009883a 	mov	r4,zero
 2009e8c:	d811883a 	mov	r8,sp
 2009e90:	ac3ff316 	blt	r21,r16,2009e60 <__alt_data_end+0xff009e60>
 2009e94:	d8c02317 	ldw	r3,140(sp)
 2009e98:	1405883a 	add	r2,r2,r16
 2009e9c:	44000115 	stw	r16,4(r8)
 2009ea0:	40c00015 	stw	r3,0(r8)
 2009ea4:	d8801c15 	stw	r2,112(sp)
 2009ea8:	d9401b15 	stw	r5,108(sp)
 2009eac:	00c001c4 	movi	r3,7
 2009eb0:	19401916 	blt	r3,r5,2009f18 <___vfiprintf_internal_r+0xcf8>
 2009eb4:	42000204 	addi	r8,r8,8
 2009eb8:	29400044 	addi	r5,r5,1
 2009ebc:	003e5506 	br	2009814 <__alt_data_end+0xff009814>
 2009ec0:	d9402017 	ldw	r5,128(sp)
 2009ec4:	d9002117 	ldw	r4,132(sp)
 2009ec8:	d9801a04 	addi	r6,sp,104
 2009ecc:	200910c0 	call	200910c <__sprint_r.part.0>
 2009ed0:	10000b1e 	bne	r2,zero,2009f00 <___vfiprintf_internal_r+0xce0>
 2009ed4:	d9001b17 	ldw	r4,108(sp)
 2009ed8:	d8801c17 	ldw	r2,112(sp)
 2009edc:	d811883a 	mov	r8,sp
 2009ee0:	21400044 	addi	r5,r4,1
 2009ee4:	003fdc06 	br	2009e58 <__alt_data_end+0xff009e58>
 2009ee8:	d8801c17 	ldw	r2,112(sp)
 2009eec:	10000426 	beq	r2,zero,2009f00 <___vfiprintf_internal_r+0xce0>
 2009ef0:	d9402017 	ldw	r5,128(sp)
 2009ef4:	d9002117 	ldw	r4,132(sp)
 2009ef8:	d9801a04 	addi	r6,sp,104
 2009efc:	200910c0 	call	200910c <__sprint_r.part.0>
 2009f00:	d9402017 	ldw	r5,128(sp)
 2009f04:	2880030b 	ldhu	r2,12(r5)
 2009f08:	1080100c 	andi	r2,r2,64
 2009f0c:	10014d1e 	bne	r2,zero,200a444 <___vfiprintf_internal_r+0x1224>
 2009f10:	d8802417 	ldw	r2,144(sp)
 2009f14:	003d9706 	br	2009574 <__alt_data_end+0xff009574>
 2009f18:	1000d21e 	bne	r2,zero,200a264 <___vfiprintf_internal_r+0x1044>
 2009f1c:	00c00044 	movi	r3,1
 2009f20:	a005883a 	mov	r2,r20
 2009f24:	ddc00015 	stw	r23,0(sp)
 2009f28:	dd000115 	stw	r20,4(sp)
 2009f2c:	dd001c15 	stw	r20,112(sp)
 2009f30:	d8c01b15 	stw	r3,108(sp)
 2009f34:	d811883a 	mov	r8,sp
 2009f38:	42000204 	addi	r8,r8,8
 2009f3c:	8c40010c 	andi	r17,r17,4
 2009f40:	88004026 	beq	r17,zero,200a044 <___vfiprintf_internal_r+0xe24>
 2009f44:	d9002517 	ldw	r4,148(sp)
 2009f48:	24e3c83a 	sub	r17,r4,r19
 2009f4c:	04403d0e 	bge	zero,r17,200a044 <___vfiprintf_internal_r+0xe24>
 2009f50:	04000404 	movi	r16,16
 2009f54:	8441a90e 	bge	r16,r17,200a5fc <___vfiprintf_internal_r+0x13dc>
 2009f58:	00c08074 	movhi	r3,513
 2009f5c:	18c46f04 	addi	r3,r3,4540
 2009f60:	d9001b17 	ldw	r4,108(sp)
 2009f64:	d8c02315 	stw	r3,140(sp)
 2009f68:	050001c4 	movi	r20,7
 2009f6c:	dd402117 	ldw	r21,132(sp)
 2009f70:	ddc02017 	ldw	r23,128(sp)
 2009f74:	00000506 	br	2009f8c <___vfiprintf_internal_r+0xd6c>
 2009f78:	21400084 	addi	r5,r4,2
 2009f7c:	42000204 	addi	r8,r8,8
 2009f80:	1809883a 	mov	r4,r3
 2009f84:	8c7ffc04 	addi	r17,r17,-16
 2009f88:	84400f0e 	bge	r16,r17,2009fc8 <___vfiprintf_internal_r+0xda8>
 2009f8c:	01408074 	movhi	r5,513
 2009f90:	10800404 	addi	r2,r2,16
 2009f94:	20c00044 	addi	r3,r4,1
 2009f98:	29446f04 	addi	r5,r5,4540
 2009f9c:	41400015 	stw	r5,0(r8)
 2009fa0:	44000115 	stw	r16,4(r8)
 2009fa4:	d8801c15 	stw	r2,112(sp)
 2009fa8:	d8c01b15 	stw	r3,108(sp)
 2009fac:	a0fff20e 	bge	r20,r3,2009f78 <__alt_data_end+0xff009f78>
 2009fb0:	1000141e 	bne	r2,zero,200a004 <___vfiprintf_internal_r+0xde4>
 2009fb4:	8c7ffc04 	addi	r17,r17,-16
 2009fb8:	01400044 	movi	r5,1
 2009fbc:	0009883a 	mov	r4,zero
 2009fc0:	d811883a 	mov	r8,sp
 2009fc4:	847ff116 	blt	r16,r17,2009f8c <__alt_data_end+0xff009f8c>
 2009fc8:	d8c02317 	ldw	r3,140(sp)
 2009fcc:	1445883a 	add	r2,r2,r17
 2009fd0:	44400115 	stw	r17,4(r8)
 2009fd4:	40c00015 	stw	r3,0(r8)
 2009fd8:	d8801c15 	stw	r2,112(sp)
 2009fdc:	d9401b15 	stw	r5,108(sp)
 2009fe0:	00c001c4 	movi	r3,7
 2009fe4:	1940170e 	bge	r3,r5,200a044 <___vfiprintf_internal_r+0xe24>
 2009fe8:	1000101e 	bne	r2,zero,200a02c <___vfiprintf_internal_r+0xe0c>
 2009fec:	d8802517 	ldw	r2,148(sp)
 2009ff0:	14c11616 	blt	r2,r19,200a44c <___vfiprintf_internal_r+0x122c>
 2009ff4:	d9002417 	ldw	r4,144(sp)
 2009ff8:	2089883a 	add	r4,r4,r2
 2009ffc:	d9002415 	stw	r4,144(sp)
 200a000:	003e1806 	br	2009864 <__alt_data_end+0xff009864>
 200a004:	d9801a04 	addi	r6,sp,104
 200a008:	b80b883a 	mov	r5,r23
 200a00c:	a809883a 	mov	r4,r21
 200a010:	200910c0 	call	200910c <__sprint_r.part.0>
 200a014:	103fba1e 	bne	r2,zero,2009f00 <__alt_data_end+0xff009f00>
 200a018:	d9001b17 	ldw	r4,108(sp)
 200a01c:	d8801c17 	ldw	r2,112(sp)
 200a020:	d811883a 	mov	r8,sp
 200a024:	21400044 	addi	r5,r4,1
 200a028:	003fd606 	br	2009f84 <__alt_data_end+0xff009f84>
 200a02c:	d9402017 	ldw	r5,128(sp)
 200a030:	d9002117 	ldw	r4,132(sp)
 200a034:	d9801a04 	addi	r6,sp,104
 200a038:	200910c0 	call	200910c <__sprint_r.part.0>
 200a03c:	103fb01e 	bne	r2,zero,2009f00 <__alt_data_end+0xff009f00>
 200a040:	d8801c17 	ldw	r2,112(sp)
 200a044:	d8c02517 	ldw	r3,148(sp)
 200a048:	1cc0010e 	bge	r3,r19,200a050 <___vfiprintf_internal_r+0xe30>
 200a04c:	9807883a 	mov	r3,r19
 200a050:	d9002417 	ldw	r4,144(sp)
 200a054:	20c9883a 	add	r4,r4,r3
 200a058:	d9002415 	stw	r4,144(sp)
 200a05c:	103e0126 	beq	r2,zero,2009864 <__alt_data_end+0xff009864>
 200a060:	d9402017 	ldw	r5,128(sp)
 200a064:	d9002117 	ldw	r4,132(sp)
 200a068:	d9801a04 	addi	r6,sp,104
 200a06c:	200910c0 	call	200910c <__sprint_r.part.0>
 200a070:	103dfc26 	beq	r2,zero,2009864 <__alt_data_end+0xff009864>
 200a074:	003fa206 	br	2009f00 <__alt_data_end+0xff009f00>
 200a078:	d9402017 	ldw	r5,128(sp)
 200a07c:	d9002117 	ldw	r4,132(sp)
 200a080:	d9801a04 	addi	r6,sp,104
 200a084:	d9c02b15 	stw	r7,172(sp)
 200a088:	200910c0 	call	200910c <__sprint_r.part.0>
 200a08c:	d9c02b17 	ldw	r7,172(sp)
 200a090:	103f9b1e 	bne	r2,zero,2009f00 <__alt_data_end+0xff009f00>
 200a094:	d9001b17 	ldw	r4,108(sp)
 200a098:	d8801c17 	ldw	r2,112(sp)
 200a09c:	d811883a 	mov	r8,sp
 200a0a0:	21800044 	addi	r6,r4,1
 200a0a4:	003dbf06 	br	20097a4 <__alt_data_end+0xff0097a4>
 200a0a8:	1000d81e 	bne	r2,zero,200a40c <___vfiprintf_internal_r+0x11ec>
 200a0ac:	d9001d87 	ldb	r4,118(sp)
 200a0b0:	20000a26 	beq	r4,zero,200a0dc <___vfiprintf_internal_r+0xebc>
 200a0b4:	00800044 	movi	r2,1
 200a0b8:	d9001d84 	addi	r4,sp,118
 200a0bc:	100b883a 	mov	r5,r2
 200a0c0:	d9000015 	stw	r4,0(sp)
 200a0c4:	d8800115 	stw	r2,4(sp)
 200a0c8:	d811883a 	mov	r8,sp
 200a0cc:	2809883a 	mov	r4,r5
 200a0d0:	42000204 	addi	r8,r8,8
 200a0d4:	29400044 	addi	r5,r5,1
 200a0d8:	003d9506 	br	2009730 <__alt_data_end+0xff009730>
 200a0dc:	3800fd26 	beq	r7,zero,200a4d4 <___vfiprintf_internal_r+0x12b4>
 200a0e0:	00800084 	movi	r2,2
 200a0e4:	d9001d04 	addi	r4,sp,116
 200a0e8:	d9000015 	stw	r4,0(sp)
 200a0ec:	d8800115 	stw	r2,4(sp)
 200a0f0:	01400044 	movi	r5,1
 200a0f4:	d811883a 	mov	r8,sp
 200a0f8:	2809883a 	mov	r4,r5
 200a0fc:	42000204 	addi	r8,r8,8
 200a100:	29400044 	addi	r5,r5,1
 200a104:	003f4606 	br	2009e20 <__alt_data_end+0xff009e20>
 200a108:	d8802517 	ldw	r2,148(sp)
 200a10c:	14c0010e 	bge	r2,r19,200a114 <___vfiprintf_internal_r+0xef4>
 200a110:	9805883a 	mov	r2,r19
 200a114:	d9402417 	ldw	r5,144(sp)
 200a118:	288b883a 	add	r5,r5,r2
 200a11c:	d9402415 	stw	r5,144(sp)
 200a120:	003dd006 	br	2009864 <__alt_data_end+0xff009864>
 200a124:	d8001d85 	stb	zero,118(sp)
 200a128:	80005d16 	blt	r16,zero,200a2a0 <___vfiprintf_internal_r+0x1080>
 200a12c:	00ffdfc4 	movi	r3,-129
 200a130:	9d04b03a 	or	r2,r19,r20
 200a134:	88e2703a 	and	r17,r17,r3
 200a138:	103d3726 	beq	r2,zero,2009618 <__alt_data_end+0xff009618>
 200a13c:	002b883a 	mov	r21,zero
 200a140:	d9002617 	ldw	r4,152(sp)
 200a144:	ddc01a04 	addi	r23,sp,104
 200a148:	988003cc 	andi	r2,r19,15
 200a14c:	a006973a 	slli	r3,r20,28
 200a150:	2085883a 	add	r2,r4,r2
 200a154:	9826d13a 	srli	r19,r19,4
 200a158:	10800003 	ldbu	r2,0(r2)
 200a15c:	a028d13a 	srli	r20,r20,4
 200a160:	bdffffc4 	addi	r23,r23,-1
 200a164:	1ce6b03a 	or	r19,r3,r19
 200a168:	b8800005 	stb	r2,0(r23)
 200a16c:	9d04b03a 	or	r2,r19,r20
 200a170:	103ff51e 	bne	r2,zero,200a148 <__alt_data_end+0xff00a148>
 200a174:	d8801e17 	ldw	r2,120(sp)
 200a178:	15e9c83a 	sub	r20,r2,r23
 200a17c:	003d2b06 	br	200962c <__alt_data_end+0xff00962c>
 200a180:	d9402017 	ldw	r5,128(sp)
 200a184:	d9002117 	ldw	r4,132(sp)
 200a188:	d9801a04 	addi	r6,sp,104
 200a18c:	200910c0 	call	200910c <__sprint_r.part.0>
 200a190:	103f5b1e 	bne	r2,zero,2009f00 <__alt_data_end+0xff009f00>
 200a194:	d8801c17 	ldw	r2,112(sp)
 200a198:	d811883a 	mov	r8,sp
 200a19c:	003f6706 	br	2009f3c <__alt_data_end+0xff009f3c>
 200a1a0:	d9402017 	ldw	r5,128(sp)
 200a1a4:	d9002117 	ldw	r4,132(sp)
 200a1a8:	d9801a04 	addi	r6,sp,104
 200a1ac:	200910c0 	call	200910c <__sprint_r.part.0>
 200a1b0:	103f531e 	bne	r2,zero,2009f00 <__alt_data_end+0xff009f00>
 200a1b4:	d811883a 	mov	r8,sp
 200a1b8:	003cd906 	br	2009520 <__alt_data_end+0xff009520>
 200a1bc:	10803fcc 	andi	r2,r2,255
 200a1c0:	1080201c 	xori	r2,r2,128
 200a1c4:	10bfe004 	addi	r2,r2,-128
 200a1c8:	00c00c04 	movi	r3,48
 200a1cc:	10ffe926 	beq	r2,r3,200a174 <__alt_data_end+0xff00a174>
 200a1d0:	b8ffffc5 	stb	r3,-1(r23)
 200a1d4:	d8c01e17 	ldw	r3,120(sp)
 200a1d8:	b8bfffc4 	addi	r2,r23,-1
 200a1dc:	102f883a 	mov	r23,r2
 200a1e0:	18a9c83a 	sub	r20,r3,r2
 200a1e4:	003d1106 	br	200962c <__alt_data_end+0xff00962c>
 200a1e8:	d9402017 	ldw	r5,128(sp)
 200a1ec:	d9002117 	ldw	r4,132(sp)
 200a1f0:	d9801a04 	addi	r6,sp,104
 200a1f4:	d8c02a15 	stw	r3,168(sp)
 200a1f8:	d9c02b15 	stw	r7,172(sp)
 200a1fc:	200910c0 	call	200910c <__sprint_r.part.0>
 200a200:	d8c02a17 	ldw	r3,168(sp)
 200a204:	d9c02b17 	ldw	r7,172(sp)
 200a208:	103f3d1e 	bne	r2,zero,2009f00 <__alt_data_end+0xff009f00>
 200a20c:	d9001b17 	ldw	r4,108(sp)
 200a210:	d8801c17 	ldw	r2,112(sp)
 200a214:	d811883a 	mov	r8,sp
 200a218:	21400044 	addi	r5,r4,1
 200a21c:	003d4406 	br	2009730 <__alt_data_end+0xff009730>
 200a220:	d9402017 	ldw	r5,128(sp)
 200a224:	d9002117 	ldw	r4,132(sp)
 200a228:	d9801a04 	addi	r6,sp,104
 200a22c:	d8c02a15 	stw	r3,168(sp)
 200a230:	200910c0 	call	200910c <__sprint_r.part.0>
 200a234:	d8c02a17 	ldw	r3,168(sp)
 200a238:	103f311e 	bne	r2,zero,2009f00 <__alt_data_end+0xff009f00>
 200a23c:	d9001b17 	ldw	r4,108(sp)
 200a240:	d8801c17 	ldw	r2,112(sp)
 200a244:	d811883a 	mov	r8,sp
 200a248:	21400044 	addi	r5,r4,1
 200a24c:	003ef406 	br	2009e20 <__alt_data_end+0xff009e20>
 200a250:	1000bd1e 	bne	r2,zero,200a548 <___vfiprintf_internal_r+0x1328>
 200a254:	01400044 	movi	r5,1
 200a258:	0009883a 	mov	r4,zero
 200a25c:	d811883a 	mov	r8,sp
 200a260:	003ef106 	br	2009e28 <__alt_data_end+0xff009e28>
 200a264:	d9402017 	ldw	r5,128(sp)
 200a268:	d9002117 	ldw	r4,132(sp)
 200a26c:	d9801a04 	addi	r6,sp,104
 200a270:	200910c0 	call	200910c <__sprint_r.part.0>
 200a274:	103f221e 	bne	r2,zero,2009f00 <__alt_data_end+0xff009f00>
 200a278:	d9401b17 	ldw	r5,108(sp)
 200a27c:	d8801c17 	ldw	r2,112(sp)
 200a280:	d811883a 	mov	r8,sp
 200a284:	29400044 	addi	r5,r5,1
 200a288:	003d6206 	br	2009814 <__alt_data_end+0xff009814>
 200a28c:	01408074 	movhi	r5,513
 200a290:	29440a04 	addi	r5,r5,4136
 200a294:	d9402615 	stw	r5,152(sp)
 200a298:	d8c02215 	stw	r3,136(sp)
 200a29c:	1023883a 	mov	r17,r2
 200a2a0:	9d04b03a 	or	r2,r19,r20
 200a2a4:	103fa51e 	bne	r2,zero,200a13c <__alt_data_end+0xff00a13c>
 200a2a8:	002b883a 	mov	r21,zero
 200a2ac:	00800084 	movi	r2,2
 200a2b0:	003e4a06 	br	2009bdc <__alt_data_end+0xff009bdc>
 200a2b4:	01408074 	movhi	r5,513
 200a2b8:	29440a04 	addi	r5,r5,4136
 200a2bc:	002b883a 	mov	r21,zero
 200a2c0:	d9402615 	stw	r5,152(sp)
 200a2c4:	003f9e06 	br	200a140 <__alt_data_end+0xff00a140>
 200a2c8:	d9402217 	ldw	r5,136(sp)
 200a2cc:	d8001d85 	stb	zero,118(sp)
 200a2d0:	0029883a 	mov	r20,zero
 200a2d4:	28800104 	addi	r2,r5,4
 200a2d8:	2cc00017 	ldw	r19,0(r5)
 200a2dc:	803e3a16 	blt	r16,zero,2009bc8 <__alt_data_end+0xff009bc8>
 200a2e0:	00ffdfc4 	movi	r3,-129
 200a2e4:	d8802215 	stw	r2,136(sp)
 200a2e8:	88e2703a 	and	r17,r17,r3
 200a2ec:	002b883a 	mov	r21,zero
 200a2f0:	983e9b26 	beq	r19,zero,2009d60 <__alt_data_end+0xff009d60>
 200a2f4:	00800244 	movi	r2,9
 200a2f8:	14fdc936 	bltu	r2,r19,2009a20 <__alt_data_end+0xff009a20>
 200a2fc:	003e9a06 	br	2009d68 <__alt_data_end+0xff009d68>
 200a300:	00800c04 	movi	r2,48
 200a304:	d8c01d45 	stb	r3,117(sp)
 200a308:	d8801d05 	stb	r2,116(sp)
 200a30c:	d8001d85 	stb	zero,118(sp)
 200a310:	88c00094 	ori	r3,r17,2
 200a314:	80009c16 	blt	r16,zero,200a588 <___vfiprintf_internal_r+0x1368>
 200a318:	00bfdfc4 	movi	r2,-129
 200a31c:	88a2703a 	and	r17,r17,r2
 200a320:	8c400094 	ori	r17,r17,2
 200a324:	002b883a 	mov	r21,zero
 200a328:	003f8506 	br	200a140 <__alt_data_end+0xff00a140>
 200a32c:	b029883a 	mov	r20,r22
 200a330:	003c0b06 	br	2009360 <__alt_data_end+0xff009360>
 200a334:	04e7c83a 	sub	r19,zero,r19
 200a338:	05400b44 	movi	r21,45
 200a33c:	9804c03a 	cmpne	r2,r19,zero
 200a340:	0529c83a 	sub	r20,zero,r20
 200a344:	dd401d85 	stb	r21,118(sp)
 200a348:	a0a9c83a 	sub	r20,r20,r2
 200a34c:	80009716 	blt	r16,zero,200a5ac <___vfiprintf_internal_r+0x138c>
 200a350:	00bfdfc4 	movi	r2,-129
 200a354:	88a2703a 	and	r17,r17,r2
 200a358:	003db006 	br	2009a1c <__alt_data_end+0xff009a1c>
 200a35c:	b0c00007 	ldb	r3,0(r22)
 200a360:	003c0c06 	br	2009394 <__alt_data_end+0xff009394>
 200a364:	8880100c 	andi	r2,r17,64
 200a368:	d8001d85 	stb	zero,118(sp)
 200a36c:	1000461e 	bne	r2,zero,200a488 <___vfiprintf_internal_r+0x1268>
 200a370:	d9002217 	ldw	r4,136(sp)
 200a374:	0029883a 	mov	r20,zero
 200a378:	20800104 	addi	r2,r4,4
 200a37c:	24c00017 	ldw	r19,0(r4)
 200a380:	803df80e 	bge	r16,zero,2009b64 <__alt_data_end+0xff009b64>
 200a384:	9d06b03a 	or	r3,r19,r20
 200a388:	d8802215 	stw	r2,136(sp)
 200a38c:	183d5e1e 	bne	r3,zero,2009908 <__alt_data_end+0xff009908>
 200a390:	002b883a 	mov	r21,zero
 200a394:	0005883a 	mov	r2,zero
 200a398:	003e1006 	br	2009bdc <__alt_data_end+0xff009bdc>
 200a39c:	8880040c 	andi	r2,r17,16
 200a3a0:	1000321e 	bne	r2,zero,200a46c <___vfiprintf_internal_r+0x124c>
 200a3a4:	8c40100c 	andi	r17,r17,64
 200a3a8:	88008d26 	beq	r17,zero,200a5e0 <___vfiprintf_internal_r+0x13c0>
 200a3ac:	d9402217 	ldw	r5,136(sp)
 200a3b0:	d8c02417 	ldw	r3,144(sp)
 200a3b4:	28800017 	ldw	r2,0(r5)
 200a3b8:	29400104 	addi	r5,r5,4
 200a3bc:	d9402215 	stw	r5,136(sp)
 200a3c0:	10c0000d 	sth	r3,0(r2)
 200a3c4:	003bca06 	br	20092f0 <__alt_data_end+0xff0092f0>
 200a3c8:	8880100c 	andi	r2,r17,64
 200a3cc:	10003a26 	beq	r2,zero,200a4b8 <___vfiprintf_internal_r+0x1298>
 200a3d0:	d8802217 	ldw	r2,136(sp)
 200a3d4:	14c0000f 	ldh	r19,0(r2)
 200a3d8:	10800104 	addi	r2,r2,4
 200a3dc:	d8802215 	stw	r2,136(sp)
 200a3e0:	9829d7fa 	srai	r20,r19,31
 200a3e4:	a005883a 	mov	r2,r20
 200a3e8:	003d8506 	br	2009a00 <__alt_data_end+0xff009a00>
 200a3ec:	8880100c 	andi	r2,r17,64
 200a3f0:	10002b26 	beq	r2,zero,200a4a0 <___vfiprintf_internal_r+0x1280>
 200a3f4:	d8802217 	ldw	r2,136(sp)
 200a3f8:	0029883a 	mov	r20,zero
 200a3fc:	14c0000b 	ldhu	r19,0(r2)
 200a400:	10800104 	addi	r2,r2,4
 200a404:	d8802215 	stw	r2,136(sp)
 200a408:	003d5d06 	br	2009980 <__alt_data_end+0xff009980>
 200a40c:	d9402017 	ldw	r5,128(sp)
 200a410:	d9002117 	ldw	r4,132(sp)
 200a414:	d9801a04 	addi	r6,sp,104
 200a418:	d8c02a15 	stw	r3,168(sp)
 200a41c:	d9c02b15 	stw	r7,172(sp)
 200a420:	200910c0 	call	200910c <__sprint_r.part.0>
 200a424:	d8c02a17 	ldw	r3,168(sp)
 200a428:	d9c02b17 	ldw	r7,172(sp)
 200a42c:	103eb41e 	bne	r2,zero,2009f00 <__alt_data_end+0xff009f00>
 200a430:	d9001b17 	ldw	r4,108(sp)
 200a434:	d8801c17 	ldw	r2,112(sp)
 200a438:	d811883a 	mov	r8,sp
 200a43c:	21400044 	addi	r5,r4,1
 200a440:	003e6706 	br	2009de0 <__alt_data_end+0xff009de0>
 200a444:	00bfffc4 	movi	r2,-1
 200a448:	003c4a06 	br	2009574 <__alt_data_end+0xff009574>
 200a44c:	9805883a 	mov	r2,r19
 200a450:	003ee806 	br	2009ff4 <__alt_data_end+0xff009ff4>
 200a454:	d8c02217 	ldw	r3,136(sp)
 200a458:	0029883a 	mov	r20,zero
 200a45c:	18800104 	addi	r2,r3,4
 200a460:	1cc0000b 	ldhu	r19,0(r3)
 200a464:	803f9e0e 	bge	r16,zero,200a2e0 <__alt_data_end+0xff00a2e0>
 200a468:	003dd706 	br	2009bc8 <__alt_data_end+0xff009bc8>
 200a46c:	d8c02217 	ldw	r3,136(sp)
 200a470:	d9002417 	ldw	r4,144(sp)
 200a474:	18800017 	ldw	r2,0(r3)
 200a478:	18c00104 	addi	r3,r3,4
 200a47c:	d8c02215 	stw	r3,136(sp)
 200a480:	11000015 	stw	r4,0(r2)
 200a484:	003b9a06 	br	20092f0 <__alt_data_end+0xff0092f0>
 200a488:	d8c02217 	ldw	r3,136(sp)
 200a48c:	0029883a 	mov	r20,zero
 200a490:	18800104 	addi	r2,r3,4
 200a494:	1cc0000b 	ldhu	r19,0(r3)
 200a498:	803db20e 	bge	r16,zero,2009b64 <__alt_data_end+0xff009b64>
 200a49c:	003fb906 	br	200a384 <__alt_data_end+0xff00a384>
 200a4a0:	d9002217 	ldw	r4,136(sp)
 200a4a4:	0029883a 	mov	r20,zero
 200a4a8:	24c00017 	ldw	r19,0(r4)
 200a4ac:	21000104 	addi	r4,r4,4
 200a4b0:	d9002215 	stw	r4,136(sp)
 200a4b4:	003d3206 	br	2009980 <__alt_data_end+0xff009980>
 200a4b8:	d8c02217 	ldw	r3,136(sp)
 200a4bc:	1cc00017 	ldw	r19,0(r3)
 200a4c0:	18c00104 	addi	r3,r3,4
 200a4c4:	d8c02215 	stw	r3,136(sp)
 200a4c8:	9829d7fa 	srai	r20,r19,31
 200a4cc:	a005883a 	mov	r2,r20
 200a4d0:	003d4b06 	br	2009a00 <__alt_data_end+0xff009a00>
 200a4d4:	0009883a 	mov	r4,zero
 200a4d8:	01400044 	movi	r5,1
 200a4dc:	d811883a 	mov	r8,sp
 200a4e0:	003e4f06 	br	2009e20 <__alt_data_end+0xff009e20>
 200a4e4:	d8c02215 	stw	r3,136(sp)
 200a4e8:	002b883a 	mov	r21,zero
 200a4ec:	003db806 	br	2009bd0 <__alt_data_end+0xff009bd0>
 200a4f0:	d811883a 	mov	r8,sp
 200a4f4:	003e9606 	br	2009f50 <__alt_data_end+0xff009f50>
 200a4f8:	01008074 	movhi	r4,513
 200a4fc:	21046b04 	addi	r4,r4,4524
 200a500:	d9002315 	stw	r4,140(sp)
 200a504:	003e6306 	br	2009e94 <__alt_data_end+0xff009e94>
 200a508:	b0c00043 	ldbu	r3,1(r22)
 200a50c:	8c400814 	ori	r17,r17,32
 200a510:	b5800044 	addi	r22,r22,1
 200a514:	18c03fcc 	andi	r3,r3,255
 200a518:	18c0201c 	xori	r3,r3,128
 200a51c:	18ffe004 	addi	r3,r3,-128
 200a520:	003b9c06 	br	2009394 <__alt_data_end+0xff009394>
 200a524:	b809883a 	mov	r4,r23
 200a528:	da002a15 	stw	r8,168(sp)
 200a52c:	20019900 	call	2001990 <strlen>
 200a530:	1029883a 	mov	r20,r2
 200a534:	dd401d83 	ldbu	r21,118(sp)
 200a538:	df002215 	stw	fp,136(sp)
 200a53c:	0021883a 	mov	r16,zero
 200a540:	da002a17 	ldw	r8,168(sp)
 200a544:	003c3906 	br	200962c <__alt_data_end+0xff00962c>
 200a548:	d9402017 	ldw	r5,128(sp)
 200a54c:	d9002117 	ldw	r4,132(sp)
 200a550:	d9801a04 	addi	r6,sp,104
 200a554:	200910c0 	call	200910c <__sprint_r.part.0>
 200a558:	103e691e 	bne	r2,zero,2009f00 <__alt_data_end+0xff009f00>
 200a55c:	d9001b17 	ldw	r4,108(sp)
 200a560:	d8801c17 	ldw	r2,112(sp)
 200a564:	d811883a 	mov	r8,sp
 200a568:	21400044 	addi	r5,r4,1
 200a56c:	003e2e06 	br	2009e28 <__alt_data_end+0xff009e28>
 200a570:	01008074 	movhi	r4,513
 200a574:	21046f04 	addi	r4,r4,4540
 200a578:	d9002315 	stw	r4,140(sp)
 200a57c:	d9001b17 	ldw	r4,108(sp)
 200a580:	21000044 	addi	r4,r4,1
 200a584:	003c5e06 	br	2009700 <__alt_data_end+0xff009700>
 200a588:	002b883a 	mov	r21,zero
 200a58c:	00800084 	movi	r2,2
 200a590:	10803fcc 	andi	r2,r2,255
 200a594:	01000044 	movi	r4,1
 200a598:	11002b26 	beq	r2,r4,200a648 <___vfiprintf_internal_r+0x1428>
 200a59c:	01000084 	movi	r4,2
 200a5a0:	11002b1e 	bne	r2,r4,200a650 <___vfiprintf_internal_r+0x1430>
 200a5a4:	1823883a 	mov	r17,r3
 200a5a8:	003ee506 	br	200a140 <__alt_data_end+0xff00a140>
 200a5ac:	8807883a 	mov	r3,r17
 200a5b0:	00800044 	movi	r2,1
 200a5b4:	003ff606 	br	200a590 <__alt_data_end+0xff00a590>
 200a5b8:	00800184 	movi	r2,6
 200a5bc:	1400012e 	bgeu	r2,r16,200a5c4 <___vfiprintf_internal_r+0x13a4>
 200a5c0:	1021883a 	mov	r16,r2
 200a5c4:	8029883a 	mov	r20,r16
 200a5c8:	8027883a 	mov	r19,r16
 200a5cc:	80002216 	blt	r16,zero,200a658 <___vfiprintf_internal_r+0x1438>
 200a5d0:	05c08074 	movhi	r23,513
 200a5d4:	df002215 	stw	fp,136(sp)
 200a5d8:	bdc40f04 	addi	r23,r23,4156
 200a5dc:	003cfb06 	br	20099cc <__alt_data_end+0xff0099cc>
 200a5e0:	d9002217 	ldw	r4,136(sp)
 200a5e4:	d9402417 	ldw	r5,144(sp)
 200a5e8:	20800017 	ldw	r2,0(r4)
 200a5ec:	21000104 	addi	r4,r4,4
 200a5f0:	d9002215 	stw	r4,136(sp)
 200a5f4:	11400015 	stw	r5,0(r2)
 200a5f8:	003b3d06 	br	20092f0 <__alt_data_end+0xff0092f0>
 200a5fc:	01408074 	movhi	r5,513
 200a600:	29446f04 	addi	r5,r5,4540
 200a604:	d9402315 	stw	r5,140(sp)
 200a608:	d9401b17 	ldw	r5,108(sp)
 200a60c:	29400044 	addi	r5,r5,1
 200a610:	003e6d06 	br	2009fc8 <__alt_data_end+0xff009fc8>
 200a614:	8029883a 	mov	r20,r16
 200a618:	dd401d83 	ldbu	r21,118(sp)
 200a61c:	df002215 	stw	fp,136(sp)
 200a620:	0021883a 	mov	r16,zero
 200a624:	003c0106 	br	200962c <__alt_data_end+0xff00962c>
 200a628:	00c08074 	movhi	r3,513
 200a62c:	18c46b04 	addi	r3,r3,4524
 200a630:	d8c02315 	stw	r3,140(sp)
 200a634:	280d883a 	mov	r6,r5
 200a638:	003c6906 	br	20097e0 <__alt_data_end+0xff0097e0>
 200a63c:	802d883a 	mov	r22,r16
 200a640:	0021883a 	mov	r16,zero
 200a644:	003b5406 	br	2009398 <__alt_data_end+0xff009398>
 200a648:	1823883a 	mov	r17,r3
 200a64c:	003cf306 	br	2009a1c <__alt_data_end+0xff009a1c>
 200a650:	1823883a 	mov	r17,r3
 200a654:	003cad06 	br	200990c <__alt_data_end+0xff00990c>
 200a658:	0027883a 	mov	r19,zero
 200a65c:	003fdc06 	br	200a5d0 <__alt_data_end+0xff00a5d0>
 200a660:	d9402217 	ldw	r5,136(sp)
 200a664:	8005883a 	mov	r2,r16
 200a668:	b0c00043 	ldbu	r3,1(r22)
 200a66c:	2c000017 	ldw	r16,0(r5)
 200a670:	29000104 	addi	r4,r5,4
 200a674:	d9002215 	stw	r4,136(sp)
 200a678:	102d883a 	mov	r22,r2
 200a67c:	803fa50e 	bge	r16,zero,200a514 <__alt_data_end+0xff00a514>
 200a680:	18c03fcc 	andi	r3,r3,255
 200a684:	18c0201c 	xori	r3,r3,128
 200a688:	043fffc4 	movi	r16,-1
 200a68c:	18ffe004 	addi	r3,r3,-128
 200a690:	003b4006 	br	2009394 <__alt_data_end+0xff009394>
 200a694:	d9402303 	ldbu	r5,140(sp)
 200a698:	d9401d85 	stb	r5,118(sp)
 200a69c:	003cae06 	br	2009958 <__alt_data_end+0xff009958>
 200a6a0:	d8c02303 	ldbu	r3,140(sp)
 200a6a4:	d8c01d85 	stb	r3,118(sp)
 200a6a8:	003d1406 	br	2009afc <__alt_data_end+0xff009afc>
 200a6ac:	d8c02303 	ldbu	r3,140(sp)
 200a6b0:	d8c01d85 	stb	r3,118(sp)
 200a6b4:	003cca06 	br	20099e0 <__alt_data_end+0xff0099e0>
 200a6b8:	8880004c 	andi	r2,r17,1
 200a6bc:	002b883a 	mov	r21,zero
 200a6c0:	10000526 	beq	r2,zero,200a6d8 <___vfiprintf_internal_r+0x14b8>
 200a6c4:	00800c04 	movi	r2,48
 200a6c8:	d88019c5 	stb	r2,103(sp)
 200a6cc:	dd002817 	ldw	r20,160(sp)
 200a6d0:	ddc019c4 	addi	r23,sp,103
 200a6d4:	003bd506 	br	200962c <__alt_data_end+0xff00962c>
 200a6d8:	0029883a 	mov	r20,zero
 200a6dc:	ddc01a04 	addi	r23,sp,104
 200a6e0:	003bd206 	br	200962c <__alt_data_end+0xff00962c>
 200a6e4:	d9002303 	ldbu	r4,140(sp)
 200a6e8:	d9001d85 	stb	r4,118(sp)
 200a6ec:	003da606 	br	2009d88 <__alt_data_end+0xff009d88>
 200a6f0:	d8c02303 	ldbu	r3,140(sp)
 200a6f4:	d8c01d85 	stb	r3,118(sp)
 200a6f8:	003c7606 	br	20098d4 <__alt_data_end+0xff0098d4>
 200a6fc:	d8c02303 	ldbu	r3,140(sp)
 200a700:	d8c01d85 	stb	r3,118(sp)
 200a704:	003c6506 	br	200989c <__alt_data_end+0xff00989c>
 200a708:	d9002303 	ldbu	r4,140(sp)
 200a70c:	d9001d85 	stb	r4,118(sp)
 200a710:	003d3d06 	br	2009c08 <__alt_data_end+0xff009c08>
 200a714:	d8c02303 	ldbu	r3,140(sp)
 200a718:	d8c01d85 	stb	r3,118(sp)
 200a71c:	003d1d06 	br	2009b94 <__alt_data_end+0xff009b94>
 200a720:	d8c02303 	ldbu	r3,140(sp)
 200a724:	d8c01d85 	stb	r3,118(sp)
 200a728:	003d0306 	br	2009b38 <__alt_data_end+0xff009b38>

0200a72c <__vfiprintf_internal>:
 200a72c:	00808074 	movhi	r2,513
 200a730:	108b6c04 	addi	r2,r2,11696
 200a734:	300f883a 	mov	r7,r6
 200a738:	280d883a 	mov	r6,r5
 200a73c:	200b883a 	mov	r5,r4
 200a740:	11000017 	ldw	r4,0(r2)
 200a744:	20092201 	jmpi	2009220 <___vfiprintf_internal_r>

0200a748 <__sbprintf>:
 200a748:	2880030b 	ldhu	r2,12(r5)
 200a74c:	2ac01917 	ldw	r11,100(r5)
 200a750:	2a80038b 	ldhu	r10,14(r5)
 200a754:	2a400717 	ldw	r9,28(r5)
 200a758:	2a000917 	ldw	r8,36(r5)
 200a75c:	defee204 	addi	sp,sp,-1144
 200a760:	00c10004 	movi	r3,1024
 200a764:	dc011a15 	stw	r16,1128(sp)
 200a768:	10bfff4c 	andi	r2,r2,65533
 200a76c:	2821883a 	mov	r16,r5
 200a770:	d8cb883a 	add	r5,sp,r3
 200a774:	dc811c15 	stw	r18,1136(sp)
 200a778:	dc411b15 	stw	r17,1132(sp)
 200a77c:	dfc11d15 	stw	ra,1140(sp)
 200a780:	2025883a 	mov	r18,r4
 200a784:	d881030d 	sth	r2,1036(sp)
 200a788:	dac11915 	stw	r11,1124(sp)
 200a78c:	da81038d 	sth	r10,1038(sp)
 200a790:	da410715 	stw	r9,1052(sp)
 200a794:	da010915 	stw	r8,1060(sp)
 200a798:	dec10015 	stw	sp,1024(sp)
 200a79c:	dec10415 	stw	sp,1040(sp)
 200a7a0:	d8c10215 	stw	r3,1032(sp)
 200a7a4:	d8c10515 	stw	r3,1044(sp)
 200a7a8:	d8010615 	stw	zero,1048(sp)
 200a7ac:	20092200 	call	2009220 <___vfiprintf_internal_r>
 200a7b0:	1023883a 	mov	r17,r2
 200a7b4:	10000416 	blt	r2,zero,200a7c8 <__sbprintf+0x80>
 200a7b8:	d9410004 	addi	r5,sp,1024
 200a7bc:	9009883a 	mov	r4,r18
 200a7c0:	20059fc0 	call	20059fc <_fflush_r>
 200a7c4:	10000d1e 	bne	r2,zero,200a7fc <__sbprintf+0xb4>
 200a7c8:	d881030b 	ldhu	r2,1036(sp)
 200a7cc:	1080100c 	andi	r2,r2,64
 200a7d0:	10000326 	beq	r2,zero,200a7e0 <__sbprintf+0x98>
 200a7d4:	8080030b 	ldhu	r2,12(r16)
 200a7d8:	10801014 	ori	r2,r2,64
 200a7dc:	8080030d 	sth	r2,12(r16)
 200a7e0:	8805883a 	mov	r2,r17
 200a7e4:	dfc11d17 	ldw	ra,1140(sp)
 200a7e8:	dc811c17 	ldw	r18,1136(sp)
 200a7ec:	dc411b17 	ldw	r17,1132(sp)
 200a7f0:	dc011a17 	ldw	r16,1128(sp)
 200a7f4:	dec11e04 	addi	sp,sp,1144
 200a7f8:	f800283a 	ret
 200a7fc:	047fffc4 	movi	r17,-1
 200a800:	003ff106 	br	200a7c8 <__alt_data_end+0xff00a7c8>

0200a804 <_write_r>:
 200a804:	defffd04 	addi	sp,sp,-12
 200a808:	2805883a 	mov	r2,r5
 200a80c:	dc000015 	stw	r16,0(sp)
 200a810:	04008074 	movhi	r16,513
 200a814:	dc400115 	stw	r17,4(sp)
 200a818:	300b883a 	mov	r5,r6
 200a81c:	84123d04 	addi	r16,r16,18676
 200a820:	2023883a 	mov	r17,r4
 200a824:	380d883a 	mov	r6,r7
 200a828:	1009883a 	mov	r4,r2
 200a82c:	dfc00215 	stw	ra,8(sp)
 200a830:	80000015 	stw	zero,0(r16)
 200a834:	200f02c0 	call	200f02c <write>
 200a838:	00ffffc4 	movi	r3,-1
 200a83c:	10c00526 	beq	r2,r3,200a854 <_write_r+0x50>
 200a840:	dfc00217 	ldw	ra,8(sp)
 200a844:	dc400117 	ldw	r17,4(sp)
 200a848:	dc000017 	ldw	r16,0(sp)
 200a84c:	dec00304 	addi	sp,sp,12
 200a850:	f800283a 	ret
 200a854:	80c00017 	ldw	r3,0(r16)
 200a858:	183ff926 	beq	r3,zero,200a840 <__alt_data_end+0xff00a840>
 200a85c:	88c00015 	stw	r3,0(r17)
 200a860:	003ff706 	br	200a840 <__alt_data_end+0xff00a840>

0200a864 <_close_r>:
 200a864:	defffd04 	addi	sp,sp,-12
 200a868:	dc000015 	stw	r16,0(sp)
 200a86c:	04008074 	movhi	r16,513
 200a870:	dc400115 	stw	r17,4(sp)
 200a874:	84123d04 	addi	r16,r16,18676
 200a878:	2023883a 	mov	r17,r4
 200a87c:	2809883a 	mov	r4,r5
 200a880:	dfc00215 	stw	ra,8(sp)
 200a884:	80000015 	stw	zero,0(r16)
 200a888:	200e7a40 	call	200e7a4 <close>
 200a88c:	00ffffc4 	movi	r3,-1
 200a890:	10c00526 	beq	r2,r3,200a8a8 <_close_r+0x44>
 200a894:	dfc00217 	ldw	ra,8(sp)
 200a898:	dc400117 	ldw	r17,4(sp)
 200a89c:	dc000017 	ldw	r16,0(sp)
 200a8a0:	dec00304 	addi	sp,sp,12
 200a8a4:	f800283a 	ret
 200a8a8:	80c00017 	ldw	r3,0(r16)
 200a8ac:	183ff926 	beq	r3,zero,200a894 <__alt_data_end+0xff00a894>
 200a8b0:	88c00015 	stw	r3,0(r17)
 200a8b4:	003ff706 	br	200a894 <__alt_data_end+0xff00a894>

0200a8b8 <_calloc_r>:
 200a8b8:	defffe04 	addi	sp,sp,-8
 200a8bc:	2805883a 	mov	r2,r5
 200a8c0:	dc000015 	stw	r16,0(sp)
 200a8c4:	300b883a 	mov	r5,r6
 200a8c8:	2021883a 	mov	r16,r4
 200a8cc:	1009883a 	mov	r4,r2
 200a8d0:	dfc00115 	stw	ra,4(sp)
 200a8d4:	20018280 	call	2001828 <__mulsi3>
 200a8d8:	100b883a 	mov	r5,r2
 200a8dc:	8009883a 	mov	r4,r16
 200a8e0:	2006b540 	call	2006b54 <_malloc_r>
 200a8e4:	10002926 	beq	r2,zero,200a98c <_calloc_r+0xd4>
 200a8e8:	11bfff17 	ldw	r6,-4(r2)
 200a8ec:	1021883a 	mov	r16,r2
 200a8f0:	00bfff04 	movi	r2,-4
 200a8f4:	308c703a 	and	r6,r6,r2
 200a8f8:	00c00904 	movi	r3,36
 200a8fc:	308d883a 	add	r6,r6,r2
 200a900:	19801636 	bltu	r3,r6,200a95c <_calloc_r+0xa4>
 200a904:	008004c4 	movi	r2,19
 200a908:	11800b2e 	bgeu	r2,r6,200a938 <_calloc_r+0x80>
 200a90c:	80000015 	stw	zero,0(r16)
 200a910:	80000115 	stw	zero,4(r16)
 200a914:	008006c4 	movi	r2,27
 200a918:	11801a2e 	bgeu	r2,r6,200a984 <_calloc_r+0xcc>
 200a91c:	80000215 	stw	zero,8(r16)
 200a920:	80000315 	stw	zero,12(r16)
 200a924:	30c0151e 	bne	r6,r3,200a97c <_calloc_r+0xc4>
 200a928:	80000415 	stw	zero,16(r16)
 200a92c:	80800604 	addi	r2,r16,24
 200a930:	80000515 	stw	zero,20(r16)
 200a934:	00000106 	br	200a93c <_calloc_r+0x84>
 200a938:	8005883a 	mov	r2,r16
 200a93c:	10000015 	stw	zero,0(r2)
 200a940:	10000115 	stw	zero,4(r2)
 200a944:	10000215 	stw	zero,8(r2)
 200a948:	8005883a 	mov	r2,r16
 200a94c:	dfc00117 	ldw	ra,4(sp)
 200a950:	dc000017 	ldw	r16,0(sp)
 200a954:	dec00204 	addi	sp,sp,8
 200a958:	f800283a 	ret
 200a95c:	000b883a 	mov	r5,zero
 200a960:	8009883a 	mov	r4,r16
 200a964:	20076e80 	call	20076e8 <memset>
 200a968:	8005883a 	mov	r2,r16
 200a96c:	dfc00117 	ldw	ra,4(sp)
 200a970:	dc000017 	ldw	r16,0(sp)
 200a974:	dec00204 	addi	sp,sp,8
 200a978:	f800283a 	ret
 200a97c:	80800404 	addi	r2,r16,16
 200a980:	003fee06 	br	200a93c <__alt_data_end+0xff00a93c>
 200a984:	80800204 	addi	r2,r16,8
 200a988:	003fec06 	br	200a93c <__alt_data_end+0xff00a93c>
 200a98c:	0005883a 	mov	r2,zero
 200a990:	003fee06 	br	200a94c <__alt_data_end+0xff00a94c>

0200a994 <_fclose_r>:
 200a994:	28003926 	beq	r5,zero,200aa7c <_fclose_r+0xe8>
 200a998:	defffc04 	addi	sp,sp,-16
 200a99c:	dc400115 	stw	r17,4(sp)
 200a9a0:	dc000015 	stw	r16,0(sp)
 200a9a4:	dfc00315 	stw	ra,12(sp)
 200a9a8:	dc800215 	stw	r18,8(sp)
 200a9ac:	2023883a 	mov	r17,r4
 200a9b0:	2821883a 	mov	r16,r5
 200a9b4:	20000226 	beq	r4,zero,200a9c0 <_fclose_r+0x2c>
 200a9b8:	20800e17 	ldw	r2,56(r4)
 200a9bc:	10002726 	beq	r2,zero,200aa5c <_fclose_r+0xc8>
 200a9c0:	8080030f 	ldh	r2,12(r16)
 200a9c4:	1000071e 	bne	r2,zero,200a9e4 <_fclose_r+0x50>
 200a9c8:	0005883a 	mov	r2,zero
 200a9cc:	dfc00317 	ldw	ra,12(sp)
 200a9d0:	dc800217 	ldw	r18,8(sp)
 200a9d4:	dc400117 	ldw	r17,4(sp)
 200a9d8:	dc000017 	ldw	r16,0(sp)
 200a9dc:	dec00404 	addi	sp,sp,16
 200a9e0:	f800283a 	ret
 200a9e4:	800b883a 	mov	r5,r16
 200a9e8:	8809883a 	mov	r4,r17
 200a9ec:	20057e00 	call	20057e0 <__sflush_r>
 200a9f0:	1025883a 	mov	r18,r2
 200a9f4:	80800b17 	ldw	r2,44(r16)
 200a9f8:	10000426 	beq	r2,zero,200aa0c <_fclose_r+0x78>
 200a9fc:	81400717 	ldw	r5,28(r16)
 200aa00:	8809883a 	mov	r4,r17
 200aa04:	103ee83a 	callr	r2
 200aa08:	10001616 	blt	r2,zero,200aa64 <_fclose_r+0xd0>
 200aa0c:	8080030b 	ldhu	r2,12(r16)
 200aa10:	1080200c 	andi	r2,r2,128
 200aa14:	1000151e 	bne	r2,zero,200aa6c <_fclose_r+0xd8>
 200aa18:	81400c17 	ldw	r5,48(r16)
 200aa1c:	28000526 	beq	r5,zero,200aa34 <_fclose_r+0xa0>
 200aa20:	80801004 	addi	r2,r16,64
 200aa24:	28800226 	beq	r5,r2,200aa30 <_fclose_r+0x9c>
 200aa28:	8809883a 	mov	r4,r17
 200aa2c:	2005f5c0 	call	2005f5c <_free_r>
 200aa30:	80000c15 	stw	zero,48(r16)
 200aa34:	81401117 	ldw	r5,68(r16)
 200aa38:	28000326 	beq	r5,zero,200aa48 <_fclose_r+0xb4>
 200aa3c:	8809883a 	mov	r4,r17
 200aa40:	2005f5c0 	call	2005f5c <_free_r>
 200aa44:	80001115 	stw	zero,68(r16)
 200aa48:	2005df80 	call	2005df8 <__sfp_lock_acquire>
 200aa4c:	8000030d 	sth	zero,12(r16)
 200aa50:	2005dfc0 	call	2005dfc <__sfp_lock_release>
 200aa54:	9005883a 	mov	r2,r18
 200aa58:	003fdc06 	br	200a9cc <__alt_data_end+0xff00a9cc>
 200aa5c:	2005de80 	call	2005de8 <__sinit>
 200aa60:	003fd706 	br	200a9c0 <__alt_data_end+0xff00a9c0>
 200aa64:	04bfffc4 	movi	r18,-1
 200aa68:	003fe806 	br	200aa0c <__alt_data_end+0xff00aa0c>
 200aa6c:	81400417 	ldw	r5,16(r16)
 200aa70:	8809883a 	mov	r4,r17
 200aa74:	2005f5c0 	call	2005f5c <_free_r>
 200aa78:	003fe706 	br	200aa18 <__alt_data_end+0xff00aa18>
 200aa7c:	0005883a 	mov	r2,zero
 200aa80:	f800283a 	ret

0200aa84 <fclose>:
 200aa84:	00808074 	movhi	r2,513
 200aa88:	108b6c04 	addi	r2,r2,11696
 200aa8c:	200b883a 	mov	r5,r4
 200aa90:	11000017 	ldw	r4,0(r2)
 200aa94:	200a9941 	jmpi	200a994 <_fclose_r>

0200aa98 <__fputwc>:
 200aa98:	defff804 	addi	sp,sp,-32
 200aa9c:	dcc00415 	stw	r19,16(sp)
 200aaa0:	dc800315 	stw	r18,12(sp)
 200aaa4:	dc000115 	stw	r16,4(sp)
 200aaa8:	dfc00715 	stw	ra,28(sp)
 200aaac:	dd400615 	stw	r21,24(sp)
 200aab0:	dd000515 	stw	r20,20(sp)
 200aab4:	dc400215 	stw	r17,8(sp)
 200aab8:	2027883a 	mov	r19,r4
 200aabc:	2825883a 	mov	r18,r5
 200aac0:	3021883a 	mov	r16,r6
 200aac4:	20069440 	call	2006944 <__locale_mb_cur_max>
 200aac8:	00c00044 	movi	r3,1
 200aacc:	10c03e26 	beq	r2,r3,200abc8 <__fputwc+0x130>
 200aad0:	81c01704 	addi	r7,r16,92
 200aad4:	900d883a 	mov	r6,r18
 200aad8:	d80b883a 	mov	r5,sp
 200aadc:	9809883a 	mov	r4,r19
 200aae0:	200af680 	call	200af68 <_wcrtomb_r>
 200aae4:	1029883a 	mov	r20,r2
 200aae8:	00bfffc4 	movi	r2,-1
 200aaec:	a0802026 	beq	r20,r2,200ab70 <__fputwc+0xd8>
 200aaf0:	d9400003 	ldbu	r5,0(sp)
 200aaf4:	a0001c26 	beq	r20,zero,200ab68 <__fputwc+0xd0>
 200aaf8:	0023883a 	mov	r17,zero
 200aafc:	05400284 	movi	r21,10
 200ab00:	00000906 	br	200ab28 <__fputwc+0x90>
 200ab04:	80800017 	ldw	r2,0(r16)
 200ab08:	11400005 	stb	r5,0(r2)
 200ab0c:	80c00017 	ldw	r3,0(r16)
 200ab10:	18c00044 	addi	r3,r3,1
 200ab14:	80c00015 	stw	r3,0(r16)
 200ab18:	8c400044 	addi	r17,r17,1
 200ab1c:	dc45883a 	add	r2,sp,r17
 200ab20:	8d00112e 	bgeu	r17,r20,200ab68 <__fputwc+0xd0>
 200ab24:	11400003 	ldbu	r5,0(r2)
 200ab28:	80c00217 	ldw	r3,8(r16)
 200ab2c:	18ffffc4 	addi	r3,r3,-1
 200ab30:	80c00215 	stw	r3,8(r16)
 200ab34:	183ff30e 	bge	r3,zero,200ab04 <__alt_data_end+0xff00ab04>
 200ab38:	80800617 	ldw	r2,24(r16)
 200ab3c:	18801916 	blt	r3,r2,200aba4 <__fputwc+0x10c>
 200ab40:	80800017 	ldw	r2,0(r16)
 200ab44:	11400005 	stb	r5,0(r2)
 200ab48:	80800017 	ldw	r2,0(r16)
 200ab4c:	10c00003 	ldbu	r3,0(r2)
 200ab50:	10800044 	addi	r2,r2,1
 200ab54:	1d402326 	beq	r3,r21,200abe4 <__fputwc+0x14c>
 200ab58:	80800015 	stw	r2,0(r16)
 200ab5c:	8c400044 	addi	r17,r17,1
 200ab60:	dc45883a 	add	r2,sp,r17
 200ab64:	8d3fef36 	bltu	r17,r20,200ab24 <__alt_data_end+0xff00ab24>
 200ab68:	9005883a 	mov	r2,r18
 200ab6c:	00000406 	br	200ab80 <__fputwc+0xe8>
 200ab70:	80c0030b 	ldhu	r3,12(r16)
 200ab74:	a005883a 	mov	r2,r20
 200ab78:	18c01014 	ori	r3,r3,64
 200ab7c:	80c0030d 	sth	r3,12(r16)
 200ab80:	dfc00717 	ldw	ra,28(sp)
 200ab84:	dd400617 	ldw	r21,24(sp)
 200ab88:	dd000517 	ldw	r20,20(sp)
 200ab8c:	dcc00417 	ldw	r19,16(sp)
 200ab90:	dc800317 	ldw	r18,12(sp)
 200ab94:	dc400217 	ldw	r17,8(sp)
 200ab98:	dc000117 	ldw	r16,4(sp)
 200ab9c:	dec00804 	addi	sp,sp,32
 200aba0:	f800283a 	ret
 200aba4:	800d883a 	mov	r6,r16
 200aba8:	29403fcc 	andi	r5,r5,255
 200abac:	9809883a 	mov	r4,r19
 200abb0:	200ae100 	call	200ae10 <__swbuf_r>
 200abb4:	10bfffe0 	cmpeqi	r2,r2,-1
 200abb8:	10803fcc 	andi	r2,r2,255
 200abbc:	103fd626 	beq	r2,zero,200ab18 <__alt_data_end+0xff00ab18>
 200abc0:	00bfffc4 	movi	r2,-1
 200abc4:	003fee06 	br	200ab80 <__alt_data_end+0xff00ab80>
 200abc8:	90ffffc4 	addi	r3,r18,-1
 200abcc:	01003f84 	movi	r4,254
 200abd0:	20ffbf36 	bltu	r4,r3,200aad0 <__alt_data_end+0xff00aad0>
 200abd4:	900b883a 	mov	r5,r18
 200abd8:	dc800005 	stb	r18,0(sp)
 200abdc:	1029883a 	mov	r20,r2
 200abe0:	003fc506 	br	200aaf8 <__alt_data_end+0xff00aaf8>
 200abe4:	800d883a 	mov	r6,r16
 200abe8:	a80b883a 	mov	r5,r21
 200abec:	9809883a 	mov	r4,r19
 200abf0:	200ae100 	call	200ae10 <__swbuf_r>
 200abf4:	10bfffe0 	cmpeqi	r2,r2,-1
 200abf8:	003fef06 	br	200abb8 <__alt_data_end+0xff00abb8>

0200abfc <_fputwc_r>:
 200abfc:	3080030b 	ldhu	r2,12(r6)
 200ac00:	10c8000c 	andi	r3,r2,8192
 200ac04:	1800051e 	bne	r3,zero,200ac1c <_fputwc_r+0x20>
 200ac08:	30c01917 	ldw	r3,100(r6)
 200ac0c:	10880014 	ori	r2,r2,8192
 200ac10:	3080030d 	sth	r2,12(r6)
 200ac14:	18880014 	ori	r2,r3,8192
 200ac18:	30801915 	stw	r2,100(r6)
 200ac1c:	200aa981 	jmpi	200aa98 <__fputwc>

0200ac20 <fputwc>:
 200ac20:	00808074 	movhi	r2,513
 200ac24:	defffc04 	addi	sp,sp,-16
 200ac28:	108b6c04 	addi	r2,r2,11696
 200ac2c:	dc000115 	stw	r16,4(sp)
 200ac30:	14000017 	ldw	r16,0(r2)
 200ac34:	dc400215 	stw	r17,8(sp)
 200ac38:	dfc00315 	stw	ra,12(sp)
 200ac3c:	2023883a 	mov	r17,r4
 200ac40:	80000226 	beq	r16,zero,200ac4c <fputwc+0x2c>
 200ac44:	80800e17 	ldw	r2,56(r16)
 200ac48:	10001026 	beq	r2,zero,200ac8c <fputwc+0x6c>
 200ac4c:	2880030b 	ldhu	r2,12(r5)
 200ac50:	10c8000c 	andi	r3,r2,8192
 200ac54:	1800051e 	bne	r3,zero,200ac6c <fputwc+0x4c>
 200ac58:	28c01917 	ldw	r3,100(r5)
 200ac5c:	10880014 	ori	r2,r2,8192
 200ac60:	2880030d 	sth	r2,12(r5)
 200ac64:	18880014 	ori	r2,r3,8192
 200ac68:	28801915 	stw	r2,100(r5)
 200ac6c:	280d883a 	mov	r6,r5
 200ac70:	8009883a 	mov	r4,r16
 200ac74:	880b883a 	mov	r5,r17
 200ac78:	dfc00317 	ldw	ra,12(sp)
 200ac7c:	dc400217 	ldw	r17,8(sp)
 200ac80:	dc000117 	ldw	r16,4(sp)
 200ac84:	dec00404 	addi	sp,sp,16
 200ac88:	200aa981 	jmpi	200aa98 <__fputwc>
 200ac8c:	8009883a 	mov	r4,r16
 200ac90:	d9400015 	stw	r5,0(sp)
 200ac94:	2005de80 	call	2005de8 <__sinit>
 200ac98:	d9400017 	ldw	r5,0(sp)
 200ac9c:	003feb06 	br	200ac4c <__alt_data_end+0xff00ac4c>

0200aca0 <_fstat_r>:
 200aca0:	defffd04 	addi	sp,sp,-12
 200aca4:	2805883a 	mov	r2,r5
 200aca8:	dc000015 	stw	r16,0(sp)
 200acac:	04008074 	movhi	r16,513
 200acb0:	dc400115 	stw	r17,4(sp)
 200acb4:	84123d04 	addi	r16,r16,18676
 200acb8:	2023883a 	mov	r17,r4
 200acbc:	300b883a 	mov	r5,r6
 200acc0:	1009883a 	mov	r4,r2
 200acc4:	dfc00215 	stw	ra,8(sp)
 200acc8:	80000015 	stw	zero,0(r16)
 200accc:	200e8e40 	call	200e8e4 <fstat>
 200acd0:	00ffffc4 	movi	r3,-1
 200acd4:	10c00526 	beq	r2,r3,200acec <_fstat_r+0x4c>
 200acd8:	dfc00217 	ldw	ra,8(sp)
 200acdc:	dc400117 	ldw	r17,4(sp)
 200ace0:	dc000017 	ldw	r16,0(sp)
 200ace4:	dec00304 	addi	sp,sp,12
 200ace8:	f800283a 	ret
 200acec:	80c00017 	ldw	r3,0(r16)
 200acf0:	183ff926 	beq	r3,zero,200acd8 <__alt_data_end+0xff00acd8>
 200acf4:	88c00015 	stw	r3,0(r17)
 200acf8:	003ff706 	br	200acd8 <__alt_data_end+0xff00acd8>

0200acfc <_isatty_r>:
 200acfc:	defffd04 	addi	sp,sp,-12
 200ad00:	dc000015 	stw	r16,0(sp)
 200ad04:	04008074 	movhi	r16,513
 200ad08:	dc400115 	stw	r17,4(sp)
 200ad0c:	84123d04 	addi	r16,r16,18676
 200ad10:	2023883a 	mov	r17,r4
 200ad14:	2809883a 	mov	r4,r5
 200ad18:	dfc00215 	stw	ra,8(sp)
 200ad1c:	80000015 	stw	zero,0(r16)
 200ad20:	200e9d80 	call	200e9d8 <isatty>
 200ad24:	00ffffc4 	movi	r3,-1
 200ad28:	10c00526 	beq	r2,r3,200ad40 <_isatty_r+0x44>
 200ad2c:	dfc00217 	ldw	ra,8(sp)
 200ad30:	dc400117 	ldw	r17,4(sp)
 200ad34:	dc000017 	ldw	r16,0(sp)
 200ad38:	dec00304 	addi	sp,sp,12
 200ad3c:	f800283a 	ret
 200ad40:	80c00017 	ldw	r3,0(r16)
 200ad44:	183ff926 	beq	r3,zero,200ad2c <__alt_data_end+0xff00ad2c>
 200ad48:	88c00015 	stw	r3,0(r17)
 200ad4c:	003ff706 	br	200ad2c <__alt_data_end+0xff00ad2c>

0200ad50 <_lseek_r>:
 200ad50:	defffd04 	addi	sp,sp,-12
 200ad54:	2805883a 	mov	r2,r5
 200ad58:	dc000015 	stw	r16,0(sp)
 200ad5c:	04008074 	movhi	r16,513
 200ad60:	dc400115 	stw	r17,4(sp)
 200ad64:	300b883a 	mov	r5,r6
 200ad68:	84123d04 	addi	r16,r16,18676
 200ad6c:	2023883a 	mov	r17,r4
 200ad70:	380d883a 	mov	r6,r7
 200ad74:	1009883a 	mov	r4,r2
 200ad78:	dfc00215 	stw	ra,8(sp)
 200ad7c:	80000015 	stw	zero,0(r16)
 200ad80:	200ebac0 	call	200ebac <lseek>
 200ad84:	00ffffc4 	movi	r3,-1
 200ad88:	10c00526 	beq	r2,r3,200ada0 <_lseek_r+0x50>
 200ad8c:	dfc00217 	ldw	ra,8(sp)
 200ad90:	dc400117 	ldw	r17,4(sp)
 200ad94:	dc000017 	ldw	r16,0(sp)
 200ad98:	dec00304 	addi	sp,sp,12
 200ad9c:	f800283a 	ret
 200ada0:	80c00017 	ldw	r3,0(r16)
 200ada4:	183ff926 	beq	r3,zero,200ad8c <__alt_data_end+0xff00ad8c>
 200ada8:	88c00015 	stw	r3,0(r17)
 200adac:	003ff706 	br	200ad8c <__alt_data_end+0xff00ad8c>

0200adb0 <_read_r>:
 200adb0:	defffd04 	addi	sp,sp,-12
 200adb4:	2805883a 	mov	r2,r5
 200adb8:	dc000015 	stw	r16,0(sp)
 200adbc:	04008074 	movhi	r16,513
 200adc0:	dc400115 	stw	r17,4(sp)
 200adc4:	300b883a 	mov	r5,r6
 200adc8:	84123d04 	addi	r16,r16,18676
 200adcc:	2023883a 	mov	r17,r4
 200add0:	380d883a 	mov	r6,r7
 200add4:	1009883a 	mov	r4,r2
 200add8:	dfc00215 	stw	ra,8(sp)
 200addc:	80000015 	stw	zero,0(r16)
 200ade0:	200ed880 	call	200ed88 <read>
 200ade4:	00ffffc4 	movi	r3,-1
 200ade8:	10c00526 	beq	r2,r3,200ae00 <_read_r+0x50>
 200adec:	dfc00217 	ldw	ra,8(sp)
 200adf0:	dc400117 	ldw	r17,4(sp)
 200adf4:	dc000017 	ldw	r16,0(sp)
 200adf8:	dec00304 	addi	sp,sp,12
 200adfc:	f800283a 	ret
 200ae00:	80c00017 	ldw	r3,0(r16)
 200ae04:	183ff926 	beq	r3,zero,200adec <__alt_data_end+0xff00adec>
 200ae08:	88c00015 	stw	r3,0(r17)
 200ae0c:	003ff706 	br	200adec <__alt_data_end+0xff00adec>

0200ae10 <__swbuf_r>:
 200ae10:	defffb04 	addi	sp,sp,-20
 200ae14:	dcc00315 	stw	r19,12(sp)
 200ae18:	dc800215 	stw	r18,8(sp)
 200ae1c:	dc000015 	stw	r16,0(sp)
 200ae20:	dfc00415 	stw	ra,16(sp)
 200ae24:	dc400115 	stw	r17,4(sp)
 200ae28:	2025883a 	mov	r18,r4
 200ae2c:	2827883a 	mov	r19,r5
 200ae30:	3021883a 	mov	r16,r6
 200ae34:	20000226 	beq	r4,zero,200ae40 <__swbuf_r+0x30>
 200ae38:	20800e17 	ldw	r2,56(r4)
 200ae3c:	10004226 	beq	r2,zero,200af48 <__swbuf_r+0x138>
 200ae40:	80800617 	ldw	r2,24(r16)
 200ae44:	8100030b 	ldhu	r4,12(r16)
 200ae48:	80800215 	stw	r2,8(r16)
 200ae4c:	2080020c 	andi	r2,r4,8
 200ae50:	10003626 	beq	r2,zero,200af2c <__swbuf_r+0x11c>
 200ae54:	80c00417 	ldw	r3,16(r16)
 200ae58:	18003426 	beq	r3,zero,200af2c <__swbuf_r+0x11c>
 200ae5c:	2088000c 	andi	r2,r4,8192
 200ae60:	9c403fcc 	andi	r17,r19,255
 200ae64:	10001a26 	beq	r2,zero,200aed0 <__swbuf_r+0xc0>
 200ae68:	80800017 	ldw	r2,0(r16)
 200ae6c:	81000517 	ldw	r4,20(r16)
 200ae70:	10c7c83a 	sub	r3,r2,r3
 200ae74:	1900200e 	bge	r3,r4,200aef8 <__swbuf_r+0xe8>
 200ae78:	18c00044 	addi	r3,r3,1
 200ae7c:	81000217 	ldw	r4,8(r16)
 200ae80:	11400044 	addi	r5,r2,1
 200ae84:	81400015 	stw	r5,0(r16)
 200ae88:	213fffc4 	addi	r4,r4,-1
 200ae8c:	81000215 	stw	r4,8(r16)
 200ae90:	14c00005 	stb	r19,0(r2)
 200ae94:	80800517 	ldw	r2,20(r16)
 200ae98:	10c01e26 	beq	r2,r3,200af14 <__swbuf_r+0x104>
 200ae9c:	8080030b 	ldhu	r2,12(r16)
 200aea0:	1080004c 	andi	r2,r2,1
 200aea4:	10000226 	beq	r2,zero,200aeb0 <__swbuf_r+0xa0>
 200aea8:	00800284 	movi	r2,10
 200aeac:	88801926 	beq	r17,r2,200af14 <__swbuf_r+0x104>
 200aeb0:	8805883a 	mov	r2,r17
 200aeb4:	dfc00417 	ldw	ra,16(sp)
 200aeb8:	dcc00317 	ldw	r19,12(sp)
 200aebc:	dc800217 	ldw	r18,8(sp)
 200aec0:	dc400117 	ldw	r17,4(sp)
 200aec4:	dc000017 	ldw	r16,0(sp)
 200aec8:	dec00504 	addi	sp,sp,20
 200aecc:	f800283a 	ret
 200aed0:	81401917 	ldw	r5,100(r16)
 200aed4:	00b7ffc4 	movi	r2,-8193
 200aed8:	21080014 	ori	r4,r4,8192
 200aedc:	2884703a 	and	r2,r5,r2
 200aee0:	80801915 	stw	r2,100(r16)
 200aee4:	80800017 	ldw	r2,0(r16)
 200aee8:	8100030d 	sth	r4,12(r16)
 200aeec:	81000517 	ldw	r4,20(r16)
 200aef0:	10c7c83a 	sub	r3,r2,r3
 200aef4:	193fe016 	blt	r3,r4,200ae78 <__alt_data_end+0xff00ae78>
 200aef8:	800b883a 	mov	r5,r16
 200aefc:	9009883a 	mov	r4,r18
 200af00:	20059fc0 	call	20059fc <_fflush_r>
 200af04:	1000071e 	bne	r2,zero,200af24 <__swbuf_r+0x114>
 200af08:	80800017 	ldw	r2,0(r16)
 200af0c:	00c00044 	movi	r3,1
 200af10:	003fda06 	br	200ae7c <__alt_data_end+0xff00ae7c>
 200af14:	800b883a 	mov	r5,r16
 200af18:	9009883a 	mov	r4,r18
 200af1c:	20059fc0 	call	20059fc <_fflush_r>
 200af20:	103fe326 	beq	r2,zero,200aeb0 <__alt_data_end+0xff00aeb0>
 200af24:	00bfffc4 	movi	r2,-1
 200af28:	003fe206 	br	200aeb4 <__alt_data_end+0xff00aeb4>
 200af2c:	800b883a 	mov	r5,r16
 200af30:	9009883a 	mov	r4,r18
 200af34:	2003ddc0 	call	2003ddc <__swsetup_r>
 200af38:	103ffa1e 	bne	r2,zero,200af24 <__alt_data_end+0xff00af24>
 200af3c:	8100030b 	ldhu	r4,12(r16)
 200af40:	80c00417 	ldw	r3,16(r16)
 200af44:	003fc506 	br	200ae5c <__alt_data_end+0xff00ae5c>
 200af48:	2005de80 	call	2005de8 <__sinit>
 200af4c:	003fbc06 	br	200ae40 <__alt_data_end+0xff00ae40>

0200af50 <__swbuf>:
 200af50:	00808074 	movhi	r2,513
 200af54:	108b6c04 	addi	r2,r2,11696
 200af58:	280d883a 	mov	r6,r5
 200af5c:	200b883a 	mov	r5,r4
 200af60:	11000017 	ldw	r4,0(r2)
 200af64:	200ae101 	jmpi	200ae10 <__swbuf_r>

0200af68 <_wcrtomb_r>:
 200af68:	defff604 	addi	sp,sp,-40
 200af6c:	00808074 	movhi	r2,513
 200af70:	dc800815 	stw	r18,32(sp)
 200af74:	dc400715 	stw	r17,28(sp)
 200af78:	dc000615 	stw	r16,24(sp)
 200af7c:	108b7004 	addi	r2,r2,11712
 200af80:	dfc00915 	stw	ra,36(sp)
 200af84:	2021883a 	mov	r16,r4
 200af88:	3823883a 	mov	r17,r7
 200af8c:	14800017 	ldw	r18,0(r2)
 200af90:	28001426 	beq	r5,zero,200afe4 <_wcrtomb_r+0x7c>
 200af94:	d9400415 	stw	r5,16(sp)
 200af98:	d9800515 	stw	r6,20(sp)
 200af9c:	20069380 	call	2006938 <__locale_charset>
 200afa0:	d9800517 	ldw	r6,20(sp)
 200afa4:	d9400417 	ldw	r5,16(sp)
 200afa8:	100f883a 	mov	r7,r2
 200afac:	dc400015 	stw	r17,0(sp)
 200afb0:	8009883a 	mov	r4,r16
 200afb4:	903ee83a 	callr	r18
 200afb8:	00ffffc4 	movi	r3,-1
 200afbc:	10c0031e 	bne	r2,r3,200afcc <_wcrtomb_r+0x64>
 200afc0:	88000015 	stw	zero,0(r17)
 200afc4:	00c02284 	movi	r3,138
 200afc8:	80c00015 	stw	r3,0(r16)
 200afcc:	dfc00917 	ldw	ra,36(sp)
 200afd0:	dc800817 	ldw	r18,32(sp)
 200afd4:	dc400717 	ldw	r17,28(sp)
 200afd8:	dc000617 	ldw	r16,24(sp)
 200afdc:	dec00a04 	addi	sp,sp,40
 200afe0:	f800283a 	ret
 200afe4:	20069380 	call	2006938 <__locale_charset>
 200afe8:	100f883a 	mov	r7,r2
 200afec:	dc400015 	stw	r17,0(sp)
 200aff0:	000d883a 	mov	r6,zero
 200aff4:	d9400104 	addi	r5,sp,4
 200aff8:	8009883a 	mov	r4,r16
 200affc:	903ee83a 	callr	r18
 200b000:	003fed06 	br	200afb8 <__alt_data_end+0xff00afb8>

0200b004 <wcrtomb>:
 200b004:	defff604 	addi	sp,sp,-40
 200b008:	00808074 	movhi	r2,513
 200b00c:	dc800615 	stw	r18,24(sp)
 200b010:	dc400515 	stw	r17,20(sp)
 200b014:	108b6c04 	addi	r2,r2,11696
 200b018:	dfc00915 	stw	ra,36(sp)
 200b01c:	dd000815 	stw	r20,32(sp)
 200b020:	dcc00715 	stw	r19,28(sp)
 200b024:	dc000415 	stw	r16,16(sp)
 200b028:	3025883a 	mov	r18,r6
 200b02c:	14400017 	ldw	r17,0(r2)
 200b030:	20001926 	beq	r4,zero,200b098 <wcrtomb+0x94>
 200b034:	00808074 	movhi	r2,513
 200b038:	108b7004 	addi	r2,r2,11712
 200b03c:	15000017 	ldw	r20,0(r2)
 200b040:	2021883a 	mov	r16,r4
 200b044:	2827883a 	mov	r19,r5
 200b048:	20069380 	call	2006938 <__locale_charset>
 200b04c:	100f883a 	mov	r7,r2
 200b050:	dc800015 	stw	r18,0(sp)
 200b054:	980d883a 	mov	r6,r19
 200b058:	800b883a 	mov	r5,r16
 200b05c:	8809883a 	mov	r4,r17
 200b060:	a03ee83a 	callr	r20
 200b064:	00ffffc4 	movi	r3,-1
 200b068:	10c0031e 	bne	r2,r3,200b078 <wcrtomb+0x74>
 200b06c:	90000015 	stw	zero,0(r18)
 200b070:	00c02284 	movi	r3,138
 200b074:	88c00015 	stw	r3,0(r17)
 200b078:	dfc00917 	ldw	ra,36(sp)
 200b07c:	dd000817 	ldw	r20,32(sp)
 200b080:	dcc00717 	ldw	r19,28(sp)
 200b084:	dc800617 	ldw	r18,24(sp)
 200b088:	dc400517 	ldw	r17,20(sp)
 200b08c:	dc000417 	ldw	r16,16(sp)
 200b090:	dec00a04 	addi	sp,sp,40
 200b094:	f800283a 	ret
 200b098:	00808074 	movhi	r2,513
 200b09c:	108b7004 	addi	r2,r2,11712
 200b0a0:	14000017 	ldw	r16,0(r2)
 200b0a4:	20069380 	call	2006938 <__locale_charset>
 200b0a8:	100f883a 	mov	r7,r2
 200b0ac:	dc800015 	stw	r18,0(sp)
 200b0b0:	000d883a 	mov	r6,zero
 200b0b4:	d9400104 	addi	r5,sp,4
 200b0b8:	8809883a 	mov	r4,r17
 200b0bc:	803ee83a 	callr	r16
 200b0c0:	003fe806 	br	200b064 <__alt_data_end+0xff00b064>

0200b0c4 <__ascii_wctomb>:
 200b0c4:	28000526 	beq	r5,zero,200b0dc <__ascii_wctomb+0x18>
 200b0c8:	00803fc4 	movi	r2,255
 200b0cc:	11800536 	bltu	r2,r6,200b0e4 <__ascii_wctomb+0x20>
 200b0d0:	29800005 	stb	r6,0(r5)
 200b0d4:	00800044 	movi	r2,1
 200b0d8:	f800283a 	ret
 200b0dc:	0005883a 	mov	r2,zero
 200b0e0:	f800283a 	ret
 200b0e4:	00802284 	movi	r2,138
 200b0e8:	20800015 	stw	r2,0(r4)
 200b0ec:	00bfffc4 	movi	r2,-1
 200b0f0:	f800283a 	ret

0200b0f4 <_wctomb_r>:
 200b0f4:	00808074 	movhi	r2,513
 200b0f8:	defff904 	addi	sp,sp,-28
 200b0fc:	108b7004 	addi	r2,r2,11712
 200b100:	dfc00615 	stw	ra,24(sp)
 200b104:	dc400515 	stw	r17,20(sp)
 200b108:	dc000415 	stw	r16,16(sp)
 200b10c:	3823883a 	mov	r17,r7
 200b110:	14000017 	ldw	r16,0(r2)
 200b114:	d9000115 	stw	r4,4(sp)
 200b118:	d9400215 	stw	r5,8(sp)
 200b11c:	d9800315 	stw	r6,12(sp)
 200b120:	20069380 	call	2006938 <__locale_charset>
 200b124:	d9800317 	ldw	r6,12(sp)
 200b128:	d9400217 	ldw	r5,8(sp)
 200b12c:	d9000117 	ldw	r4,4(sp)
 200b130:	100f883a 	mov	r7,r2
 200b134:	dc400015 	stw	r17,0(sp)
 200b138:	803ee83a 	callr	r16
 200b13c:	dfc00617 	ldw	ra,24(sp)
 200b140:	dc400517 	ldw	r17,20(sp)
 200b144:	dc000417 	ldw	r16,16(sp)
 200b148:	dec00704 	addi	sp,sp,28
 200b14c:	f800283a 	ret

0200b150 <__udivdi3>:
 200b150:	defff404 	addi	sp,sp,-48
 200b154:	dcc00515 	stw	r19,20(sp)
 200b158:	dc000215 	stw	r16,8(sp)
 200b15c:	dfc00b15 	stw	ra,44(sp)
 200b160:	df000a15 	stw	fp,40(sp)
 200b164:	ddc00915 	stw	r23,36(sp)
 200b168:	dd800815 	stw	r22,32(sp)
 200b16c:	dd400715 	stw	r21,28(sp)
 200b170:	dd000615 	stw	r20,24(sp)
 200b174:	dc800415 	stw	r18,16(sp)
 200b178:	dc400315 	stw	r17,12(sp)
 200b17c:	2027883a 	mov	r19,r4
 200b180:	2821883a 	mov	r16,r5
 200b184:	3800461e 	bne	r7,zero,200b2a0 <__udivdi3+0x150>
 200b188:	3023883a 	mov	r17,r6
 200b18c:	2025883a 	mov	r18,r4
 200b190:	2980572e 	bgeu	r5,r6,200b2f0 <__udivdi3+0x1a0>
 200b194:	00bfffd4 	movui	r2,65535
 200b198:	282d883a 	mov	r22,r5
 200b19c:	1180b236 	bltu	r2,r6,200b468 <__udivdi3+0x318>
 200b1a0:	00803fc4 	movi	r2,255
 200b1a4:	1185803a 	cmpltu	r2,r2,r6
 200b1a8:	100490fa 	slli	r2,r2,3
 200b1ac:	3086d83a 	srl	r3,r6,r2
 200b1b0:	01008074 	movhi	r4,513
 200b1b4:	21047304 	addi	r4,r4,4556
 200b1b8:	20c7883a 	add	r3,r4,r3
 200b1bc:	18c00003 	ldbu	r3,0(r3)
 200b1c0:	1885883a 	add	r2,r3,r2
 200b1c4:	00c00804 	movi	r3,32
 200b1c8:	1887c83a 	sub	r3,r3,r2
 200b1cc:	18000526 	beq	r3,zero,200b1e4 <__udivdi3+0x94>
 200b1d0:	80e0983a 	sll	r16,r16,r3
 200b1d4:	9884d83a 	srl	r2,r19,r2
 200b1d8:	30e2983a 	sll	r17,r6,r3
 200b1dc:	98e4983a 	sll	r18,r19,r3
 200b1e0:	142cb03a 	or	r22,r2,r16
 200b1e4:	882ad43a 	srli	r21,r17,16
 200b1e8:	b009883a 	mov	r4,r22
 200b1ec:	8d3fffcc 	andi	r20,r17,65535
 200b1f0:	a80b883a 	mov	r5,r21
 200b1f4:	200be6c0 	call	200be6c <__umodsi3>
 200b1f8:	b009883a 	mov	r4,r22
 200b1fc:	a80b883a 	mov	r5,r21
 200b200:	1027883a 	mov	r19,r2
 200b204:	200be080 	call	200be08 <__udivsi3>
 200b208:	100b883a 	mov	r5,r2
 200b20c:	a009883a 	mov	r4,r20
 200b210:	102d883a 	mov	r22,r2
 200b214:	20018280 	call	2001828 <__mulsi3>
 200b218:	9826943a 	slli	r19,r19,16
 200b21c:	9006d43a 	srli	r3,r18,16
 200b220:	1cc6b03a 	or	r3,r3,r19
 200b224:	1880052e 	bgeu	r3,r2,200b23c <__udivdi3+0xec>
 200b228:	1c47883a 	add	r3,r3,r17
 200b22c:	b13fffc4 	addi	r4,r22,-1
 200b230:	1c400136 	bltu	r3,r17,200b238 <__udivdi3+0xe8>
 200b234:	18814236 	bltu	r3,r2,200b740 <__udivdi3+0x5f0>
 200b238:	202d883a 	mov	r22,r4
 200b23c:	18a1c83a 	sub	r16,r3,r2
 200b240:	8009883a 	mov	r4,r16
 200b244:	a80b883a 	mov	r5,r21
 200b248:	200be6c0 	call	200be6c <__umodsi3>
 200b24c:	1027883a 	mov	r19,r2
 200b250:	8009883a 	mov	r4,r16
 200b254:	a80b883a 	mov	r5,r21
 200b258:	9826943a 	slli	r19,r19,16
 200b25c:	200be080 	call	200be08 <__udivsi3>
 200b260:	100b883a 	mov	r5,r2
 200b264:	a009883a 	mov	r4,r20
 200b268:	94bfffcc 	andi	r18,r18,65535
 200b26c:	1021883a 	mov	r16,r2
 200b270:	94e4b03a 	or	r18,r18,r19
 200b274:	20018280 	call	2001828 <__mulsi3>
 200b278:	9080052e 	bgeu	r18,r2,200b290 <__udivdi3+0x140>
 200b27c:	8ca5883a 	add	r18,r17,r18
 200b280:	80ffffc4 	addi	r3,r16,-1
 200b284:	94410c36 	bltu	r18,r17,200b6b8 <__udivdi3+0x568>
 200b288:	90810b2e 	bgeu	r18,r2,200b6b8 <__udivdi3+0x568>
 200b28c:	843fff84 	addi	r16,r16,-2
 200b290:	b004943a 	slli	r2,r22,16
 200b294:	0007883a 	mov	r3,zero
 200b298:	1404b03a 	or	r2,r2,r16
 200b29c:	00005e06 	br	200b418 <__udivdi3+0x2c8>
 200b2a0:	29c05b36 	bltu	r5,r7,200b410 <__udivdi3+0x2c0>
 200b2a4:	00bfffd4 	movui	r2,65535
 200b2a8:	11c0672e 	bgeu	r2,r7,200b448 <__udivdi3+0x2f8>
 200b2ac:	00804034 	movhi	r2,256
 200b2b0:	10bfffc4 	addi	r2,r2,-1
 200b2b4:	11c10a36 	bltu	r2,r7,200b6e0 <__udivdi3+0x590>
 200b2b8:	00800404 	movi	r2,16
 200b2bc:	3886d83a 	srl	r3,r7,r2
 200b2c0:	01008074 	movhi	r4,513
 200b2c4:	21047304 	addi	r4,r4,4556
 200b2c8:	20c7883a 	add	r3,r4,r3
 200b2cc:	18c00003 	ldbu	r3,0(r3)
 200b2d0:	05c00804 	movi	r23,32
 200b2d4:	1885883a 	add	r2,r3,r2
 200b2d8:	b8afc83a 	sub	r23,r23,r2
 200b2dc:	b800671e 	bne	r23,zero,200b47c <__udivdi3+0x32c>
 200b2e0:	3c010536 	bltu	r7,r16,200b6f8 <__udivdi3+0x5a8>
 200b2e4:	9985403a 	cmpgeu	r2,r19,r6
 200b2e8:	0007883a 	mov	r3,zero
 200b2ec:	00004a06 	br	200b418 <__udivdi3+0x2c8>
 200b2f0:	3000041e 	bne	r6,zero,200b304 <__udivdi3+0x1b4>
 200b2f4:	000b883a 	mov	r5,zero
 200b2f8:	01000044 	movi	r4,1
 200b2fc:	200be080 	call	200be08 <__udivsi3>
 200b300:	1023883a 	mov	r17,r2
 200b304:	00bfffd4 	movui	r2,65535
 200b308:	1440532e 	bgeu	r2,r17,200b458 <__udivdi3+0x308>
 200b30c:	00804034 	movhi	r2,256
 200b310:	10bfffc4 	addi	r2,r2,-1
 200b314:	1440f436 	bltu	r2,r17,200b6e8 <__udivdi3+0x598>
 200b318:	00800404 	movi	r2,16
 200b31c:	8886d83a 	srl	r3,r17,r2
 200b320:	01008074 	movhi	r4,513
 200b324:	21047304 	addi	r4,r4,4556
 200b328:	20c7883a 	add	r3,r4,r3
 200b32c:	18c00003 	ldbu	r3,0(r3)
 200b330:	1885883a 	add	r2,r3,r2
 200b334:	00c00804 	movi	r3,32
 200b338:	1887c83a 	sub	r3,r3,r2
 200b33c:	1800a51e 	bne	r3,zero,200b5d4 <__udivdi3+0x484>
 200b340:	882ad43a 	srli	r21,r17,16
 200b344:	8461c83a 	sub	r16,r16,r17
 200b348:	8d3fffcc 	andi	r20,r17,65535
 200b34c:	00c00044 	movi	r3,1
 200b350:	a80b883a 	mov	r5,r21
 200b354:	8009883a 	mov	r4,r16
 200b358:	d8c00115 	stw	r3,4(sp)
 200b35c:	200be6c0 	call	200be6c <__umodsi3>
 200b360:	a80b883a 	mov	r5,r21
 200b364:	8009883a 	mov	r4,r16
 200b368:	1027883a 	mov	r19,r2
 200b36c:	200be080 	call	200be08 <__udivsi3>
 200b370:	a00b883a 	mov	r5,r20
 200b374:	1009883a 	mov	r4,r2
 200b378:	102d883a 	mov	r22,r2
 200b37c:	20018280 	call	2001828 <__mulsi3>
 200b380:	9826943a 	slli	r19,r19,16
 200b384:	900ed43a 	srli	r7,r18,16
 200b388:	d8c00117 	ldw	r3,4(sp)
 200b38c:	3cceb03a 	or	r7,r7,r19
 200b390:	3880052e 	bgeu	r7,r2,200b3a8 <__udivdi3+0x258>
 200b394:	3c4f883a 	add	r7,r7,r17
 200b398:	b13fffc4 	addi	r4,r22,-1
 200b39c:	3c400136 	bltu	r7,r17,200b3a4 <__udivdi3+0x254>
 200b3a0:	3880e436 	bltu	r7,r2,200b734 <__udivdi3+0x5e4>
 200b3a4:	202d883a 	mov	r22,r4
 200b3a8:	38a1c83a 	sub	r16,r7,r2
 200b3ac:	8009883a 	mov	r4,r16
 200b3b0:	a80b883a 	mov	r5,r21
 200b3b4:	d8c00115 	stw	r3,4(sp)
 200b3b8:	200be6c0 	call	200be6c <__umodsi3>
 200b3bc:	1027883a 	mov	r19,r2
 200b3c0:	8009883a 	mov	r4,r16
 200b3c4:	a80b883a 	mov	r5,r21
 200b3c8:	9826943a 	slli	r19,r19,16
 200b3cc:	200be080 	call	200be08 <__udivsi3>
 200b3d0:	a00b883a 	mov	r5,r20
 200b3d4:	1009883a 	mov	r4,r2
 200b3d8:	94bfffcc 	andi	r18,r18,65535
 200b3dc:	1021883a 	mov	r16,r2
 200b3e0:	94e4b03a 	or	r18,r18,r19
 200b3e4:	20018280 	call	2001828 <__mulsi3>
 200b3e8:	d8c00117 	ldw	r3,4(sp)
 200b3ec:	9080052e 	bgeu	r18,r2,200b404 <__udivdi3+0x2b4>
 200b3f0:	8ca5883a 	add	r18,r17,r18
 200b3f4:	813fffc4 	addi	r4,r16,-1
 200b3f8:	9440ad36 	bltu	r18,r17,200b6b0 <__udivdi3+0x560>
 200b3fc:	9080ac2e 	bgeu	r18,r2,200b6b0 <__udivdi3+0x560>
 200b400:	843fff84 	addi	r16,r16,-2
 200b404:	b004943a 	slli	r2,r22,16
 200b408:	1404b03a 	or	r2,r2,r16
 200b40c:	00000206 	br	200b418 <__udivdi3+0x2c8>
 200b410:	0007883a 	mov	r3,zero
 200b414:	0005883a 	mov	r2,zero
 200b418:	dfc00b17 	ldw	ra,44(sp)
 200b41c:	df000a17 	ldw	fp,40(sp)
 200b420:	ddc00917 	ldw	r23,36(sp)
 200b424:	dd800817 	ldw	r22,32(sp)
 200b428:	dd400717 	ldw	r21,28(sp)
 200b42c:	dd000617 	ldw	r20,24(sp)
 200b430:	dcc00517 	ldw	r19,20(sp)
 200b434:	dc800417 	ldw	r18,16(sp)
 200b438:	dc400317 	ldw	r17,12(sp)
 200b43c:	dc000217 	ldw	r16,8(sp)
 200b440:	dec00c04 	addi	sp,sp,48
 200b444:	f800283a 	ret
 200b448:	00803fc4 	movi	r2,255
 200b44c:	11c5803a 	cmpltu	r2,r2,r7
 200b450:	100490fa 	slli	r2,r2,3
 200b454:	003f9906 	br	200b2bc <__alt_data_end+0xff00b2bc>
 200b458:	00803fc4 	movi	r2,255
 200b45c:	1445803a 	cmpltu	r2,r2,r17
 200b460:	100490fa 	slli	r2,r2,3
 200b464:	003fad06 	br	200b31c <__alt_data_end+0xff00b31c>
 200b468:	00804034 	movhi	r2,256
 200b46c:	10bfffc4 	addi	r2,r2,-1
 200b470:	11809f36 	bltu	r2,r6,200b6f0 <__udivdi3+0x5a0>
 200b474:	00800404 	movi	r2,16
 200b478:	003f4c06 	br	200b1ac <__alt_data_end+0xff00b1ac>
 200b47c:	3dce983a 	sll	r7,r7,r23
 200b480:	30b8d83a 	srl	fp,r6,r2
 200b484:	80a2d83a 	srl	r17,r16,r2
 200b488:	35cc983a 	sll	r6,r6,r23
 200b48c:	3f38b03a 	or	fp,r7,fp
 200b490:	e024d43a 	srli	r18,fp,16
 200b494:	9884d83a 	srl	r2,r19,r2
 200b498:	85e0983a 	sll	r16,r16,r23
 200b49c:	8809883a 	mov	r4,r17
 200b4a0:	900b883a 	mov	r5,r18
 200b4a4:	d9800015 	stw	r6,0(sp)
 200b4a8:	1420b03a 	or	r16,r2,r16
 200b4ac:	200be6c0 	call	200be6c <__umodsi3>
 200b4b0:	900b883a 	mov	r5,r18
 200b4b4:	8809883a 	mov	r4,r17
 200b4b8:	1029883a 	mov	r20,r2
 200b4bc:	e5bfffcc 	andi	r22,fp,65535
 200b4c0:	200be080 	call	200be08 <__udivsi3>
 200b4c4:	100b883a 	mov	r5,r2
 200b4c8:	b009883a 	mov	r4,r22
 200b4cc:	102b883a 	mov	r21,r2
 200b4d0:	20018280 	call	2001828 <__mulsi3>
 200b4d4:	a028943a 	slli	r20,r20,16
 200b4d8:	8006d43a 	srli	r3,r16,16
 200b4dc:	1d06b03a 	or	r3,r3,r20
 200b4e0:	1880042e 	bgeu	r3,r2,200b4f4 <__udivdi3+0x3a4>
 200b4e4:	1f07883a 	add	r3,r3,fp
 200b4e8:	a93fffc4 	addi	r4,r21,-1
 200b4ec:	1f00892e 	bgeu	r3,fp,200b714 <__udivdi3+0x5c4>
 200b4f0:	202b883a 	mov	r21,r4
 200b4f4:	18a3c83a 	sub	r17,r3,r2
 200b4f8:	8809883a 	mov	r4,r17
 200b4fc:	900b883a 	mov	r5,r18
 200b500:	200be6c0 	call	200be6c <__umodsi3>
 200b504:	1029883a 	mov	r20,r2
 200b508:	8809883a 	mov	r4,r17
 200b50c:	900b883a 	mov	r5,r18
 200b510:	a028943a 	slli	r20,r20,16
 200b514:	200be080 	call	200be08 <__udivsi3>
 200b518:	100b883a 	mov	r5,r2
 200b51c:	b009883a 	mov	r4,r22
 200b520:	843fffcc 	andi	r16,r16,65535
 200b524:	1023883a 	mov	r17,r2
 200b528:	8520b03a 	or	r16,r16,r20
 200b52c:	20018280 	call	2001828 <__mulsi3>
 200b530:	8080042e 	bgeu	r16,r2,200b544 <__udivdi3+0x3f4>
 200b534:	8721883a 	add	r16,r16,fp
 200b538:	88ffffc4 	addi	r3,r17,-1
 200b53c:	8700712e 	bgeu	r16,fp,200b704 <__udivdi3+0x5b4>
 200b540:	1823883a 	mov	r17,r3
 200b544:	a80e943a 	slli	r7,r21,16
 200b548:	d8c00017 	ldw	r3,0(sp)
 200b54c:	80a1c83a 	sub	r16,r16,r2
 200b550:	3c64b03a 	or	r18,r7,r17
 200b554:	1d3fffcc 	andi	r20,r3,65535
 200b558:	9022d43a 	srli	r17,r18,16
 200b55c:	95bfffcc 	andi	r22,r18,65535
 200b560:	a00b883a 	mov	r5,r20
 200b564:	b009883a 	mov	r4,r22
 200b568:	182ad43a 	srli	r21,r3,16
 200b56c:	20018280 	call	2001828 <__mulsi3>
 200b570:	a00b883a 	mov	r5,r20
 200b574:	8809883a 	mov	r4,r17
 200b578:	1039883a 	mov	fp,r2
 200b57c:	20018280 	call	2001828 <__mulsi3>
 200b580:	8809883a 	mov	r4,r17
 200b584:	a80b883a 	mov	r5,r21
 200b588:	1029883a 	mov	r20,r2
 200b58c:	20018280 	call	2001828 <__mulsi3>
 200b590:	a80b883a 	mov	r5,r21
 200b594:	b009883a 	mov	r4,r22
 200b598:	1023883a 	mov	r17,r2
 200b59c:	20018280 	call	2001828 <__mulsi3>
 200b5a0:	e006d43a 	srli	r3,fp,16
 200b5a4:	1505883a 	add	r2,r2,r20
 200b5a8:	1887883a 	add	r3,r3,r2
 200b5ac:	1d00022e 	bgeu	r3,r20,200b5b8 <__udivdi3+0x468>
 200b5b0:	00800074 	movhi	r2,1
 200b5b4:	88a3883a 	add	r17,r17,r2
 200b5b8:	1804d43a 	srli	r2,r3,16
 200b5bc:	1463883a 	add	r17,r2,r17
 200b5c0:	84404436 	bltu	r16,r17,200b6d4 <__udivdi3+0x584>
 200b5c4:	84403e26 	beq	r16,r17,200b6c0 <__udivdi3+0x570>
 200b5c8:	9005883a 	mov	r2,r18
 200b5cc:	0007883a 	mov	r3,zero
 200b5d0:	003f9106 	br	200b418 <__alt_data_end+0xff00b418>
 200b5d4:	88e2983a 	sll	r17,r17,r3
 200b5d8:	80aed83a 	srl	r23,r16,r2
 200b5dc:	80e0983a 	sll	r16,r16,r3
 200b5e0:	882ad43a 	srli	r21,r17,16
 200b5e4:	9884d83a 	srl	r2,r19,r2
 200b5e8:	b809883a 	mov	r4,r23
 200b5ec:	a80b883a 	mov	r5,r21
 200b5f0:	98e4983a 	sll	r18,r19,r3
 200b5f4:	142cb03a 	or	r22,r2,r16
 200b5f8:	200be6c0 	call	200be6c <__umodsi3>
 200b5fc:	b809883a 	mov	r4,r23
 200b600:	a80b883a 	mov	r5,r21
 200b604:	1027883a 	mov	r19,r2
 200b608:	8d3fffcc 	andi	r20,r17,65535
 200b60c:	200be080 	call	200be08 <__udivsi3>
 200b610:	a009883a 	mov	r4,r20
 200b614:	100b883a 	mov	r5,r2
 200b618:	102f883a 	mov	r23,r2
 200b61c:	20018280 	call	2001828 <__mulsi3>
 200b620:	9826943a 	slli	r19,r19,16
 200b624:	b008d43a 	srli	r4,r22,16
 200b628:	24c8b03a 	or	r4,r4,r19
 200b62c:	2080062e 	bgeu	r4,r2,200b648 <__udivdi3+0x4f8>
 200b630:	2449883a 	add	r4,r4,r17
 200b634:	b8ffffc4 	addi	r3,r23,-1
 200b638:	24403c36 	bltu	r4,r17,200b72c <__udivdi3+0x5dc>
 200b63c:	20803b2e 	bgeu	r4,r2,200b72c <__udivdi3+0x5dc>
 200b640:	bdffff84 	addi	r23,r23,-2
 200b644:	2449883a 	add	r4,r4,r17
 200b648:	20a1c83a 	sub	r16,r4,r2
 200b64c:	a80b883a 	mov	r5,r21
 200b650:	8009883a 	mov	r4,r16
 200b654:	200be6c0 	call	200be6c <__umodsi3>
 200b658:	a80b883a 	mov	r5,r21
 200b65c:	8009883a 	mov	r4,r16
 200b660:	1027883a 	mov	r19,r2
 200b664:	200be080 	call	200be08 <__udivsi3>
 200b668:	a009883a 	mov	r4,r20
 200b66c:	100b883a 	mov	r5,r2
 200b670:	9826943a 	slli	r19,r19,16
 200b674:	1039883a 	mov	fp,r2
 200b678:	20018280 	call	2001828 <__mulsi3>
 200b67c:	b13fffcc 	andi	r4,r22,65535
 200b680:	24c8b03a 	or	r4,r4,r19
 200b684:	2080062e 	bgeu	r4,r2,200b6a0 <__udivdi3+0x550>
 200b688:	2449883a 	add	r4,r4,r17
 200b68c:	e0ffffc4 	addi	r3,fp,-1
 200b690:	24402436 	bltu	r4,r17,200b724 <__udivdi3+0x5d4>
 200b694:	2080232e 	bgeu	r4,r2,200b724 <__udivdi3+0x5d4>
 200b698:	e73fff84 	addi	fp,fp,-2
 200b69c:	2449883a 	add	r4,r4,r17
 200b6a0:	b82e943a 	slli	r23,r23,16
 200b6a4:	20a1c83a 	sub	r16,r4,r2
 200b6a8:	bf06b03a 	or	r3,r23,fp
 200b6ac:	003f2806 	br	200b350 <__alt_data_end+0xff00b350>
 200b6b0:	2021883a 	mov	r16,r4
 200b6b4:	003f5306 	br	200b404 <__alt_data_end+0xff00b404>
 200b6b8:	1821883a 	mov	r16,r3
 200b6bc:	003ef406 	br	200b290 <__alt_data_end+0xff00b290>
 200b6c0:	1806943a 	slli	r3,r3,16
 200b6c4:	9de6983a 	sll	r19,r19,r23
 200b6c8:	e73fffcc 	andi	fp,fp,65535
 200b6cc:	1f07883a 	add	r3,r3,fp
 200b6d0:	98ffbd2e 	bgeu	r19,r3,200b5c8 <__alt_data_end+0xff00b5c8>
 200b6d4:	90bfffc4 	addi	r2,r18,-1
 200b6d8:	0007883a 	mov	r3,zero
 200b6dc:	003f4e06 	br	200b418 <__alt_data_end+0xff00b418>
 200b6e0:	00800604 	movi	r2,24
 200b6e4:	003ef506 	br	200b2bc <__alt_data_end+0xff00b2bc>
 200b6e8:	00800604 	movi	r2,24
 200b6ec:	003f0b06 	br	200b31c <__alt_data_end+0xff00b31c>
 200b6f0:	00800604 	movi	r2,24
 200b6f4:	003ead06 	br	200b1ac <__alt_data_end+0xff00b1ac>
 200b6f8:	0007883a 	mov	r3,zero
 200b6fc:	00800044 	movi	r2,1
 200b700:	003f4506 	br	200b418 <__alt_data_end+0xff00b418>
 200b704:	80bf8e2e 	bgeu	r16,r2,200b540 <__alt_data_end+0xff00b540>
 200b708:	8c7fff84 	addi	r17,r17,-2
 200b70c:	8721883a 	add	r16,r16,fp
 200b710:	003f8c06 	br	200b544 <__alt_data_end+0xff00b544>
 200b714:	18bf762e 	bgeu	r3,r2,200b4f0 <__alt_data_end+0xff00b4f0>
 200b718:	ad7fff84 	addi	r21,r21,-2
 200b71c:	1f07883a 	add	r3,r3,fp
 200b720:	003f7406 	br	200b4f4 <__alt_data_end+0xff00b4f4>
 200b724:	1839883a 	mov	fp,r3
 200b728:	003fdd06 	br	200b6a0 <__alt_data_end+0xff00b6a0>
 200b72c:	182f883a 	mov	r23,r3
 200b730:	003fc506 	br	200b648 <__alt_data_end+0xff00b648>
 200b734:	b5bfff84 	addi	r22,r22,-2
 200b738:	3c4f883a 	add	r7,r7,r17
 200b73c:	003f1a06 	br	200b3a8 <__alt_data_end+0xff00b3a8>
 200b740:	b5bfff84 	addi	r22,r22,-2
 200b744:	1c47883a 	add	r3,r3,r17
 200b748:	003ebc06 	br	200b23c <__alt_data_end+0xff00b23c>

0200b74c <__umoddi3>:
 200b74c:	defff304 	addi	sp,sp,-52
 200b750:	df000b15 	stw	fp,44(sp)
 200b754:	dc400415 	stw	r17,16(sp)
 200b758:	dc000315 	stw	r16,12(sp)
 200b75c:	dfc00c15 	stw	ra,48(sp)
 200b760:	ddc00a15 	stw	r23,40(sp)
 200b764:	dd800915 	stw	r22,36(sp)
 200b768:	dd400815 	stw	r21,32(sp)
 200b76c:	dd000715 	stw	r20,28(sp)
 200b770:	dcc00615 	stw	r19,24(sp)
 200b774:	dc800515 	stw	r18,20(sp)
 200b778:	2021883a 	mov	r16,r4
 200b77c:	2823883a 	mov	r17,r5
 200b780:	2839883a 	mov	fp,r5
 200b784:	3800401e 	bne	r7,zero,200b888 <__umoddi3+0x13c>
 200b788:	3027883a 	mov	r19,r6
 200b78c:	2029883a 	mov	r20,r4
 200b790:	2980552e 	bgeu	r5,r6,200b8e8 <__umoddi3+0x19c>
 200b794:	00bfffd4 	movui	r2,65535
 200b798:	1180a236 	bltu	r2,r6,200ba24 <__umoddi3+0x2d8>
 200b79c:	01003fc4 	movi	r4,255
 200b7a0:	2189803a 	cmpltu	r4,r4,r6
 200b7a4:	200890fa 	slli	r4,r4,3
 200b7a8:	3104d83a 	srl	r2,r6,r4
 200b7ac:	00c08074 	movhi	r3,513
 200b7b0:	18c47304 	addi	r3,r3,4556
 200b7b4:	1885883a 	add	r2,r3,r2
 200b7b8:	10c00003 	ldbu	r3,0(r2)
 200b7bc:	00800804 	movi	r2,32
 200b7c0:	1909883a 	add	r4,r3,r4
 200b7c4:	1125c83a 	sub	r18,r2,r4
 200b7c8:	90000526 	beq	r18,zero,200b7e0 <__umoddi3+0x94>
 200b7cc:	8ca2983a 	sll	r17,r17,r18
 200b7d0:	8108d83a 	srl	r4,r16,r4
 200b7d4:	34a6983a 	sll	r19,r6,r18
 200b7d8:	84a8983a 	sll	r20,r16,r18
 200b7dc:	2478b03a 	or	fp,r4,r17
 200b7e0:	982cd43a 	srli	r22,r19,16
 200b7e4:	e009883a 	mov	r4,fp
 200b7e8:	9dffffcc 	andi	r23,r19,65535
 200b7ec:	b00b883a 	mov	r5,r22
 200b7f0:	200be6c0 	call	200be6c <__umodsi3>
 200b7f4:	b00b883a 	mov	r5,r22
 200b7f8:	e009883a 	mov	r4,fp
 200b7fc:	102b883a 	mov	r21,r2
 200b800:	200be080 	call	200be08 <__udivsi3>
 200b804:	100b883a 	mov	r5,r2
 200b808:	b809883a 	mov	r4,r23
 200b80c:	20018280 	call	2001828 <__mulsi3>
 200b810:	a82a943a 	slli	r21,r21,16
 200b814:	a006d43a 	srli	r3,r20,16
 200b818:	1d46b03a 	or	r3,r3,r21
 200b81c:	1880032e 	bgeu	r3,r2,200b82c <__umoddi3+0xe0>
 200b820:	1cc7883a 	add	r3,r3,r19
 200b824:	1cc00136 	bltu	r3,r19,200b82c <__umoddi3+0xe0>
 200b828:	18813136 	bltu	r3,r2,200bcf0 <__umoddi3+0x5a4>
 200b82c:	18a1c83a 	sub	r16,r3,r2
 200b830:	b00b883a 	mov	r5,r22
 200b834:	8009883a 	mov	r4,r16
 200b838:	200be6c0 	call	200be6c <__umodsi3>
 200b83c:	b00b883a 	mov	r5,r22
 200b840:	8009883a 	mov	r4,r16
 200b844:	1023883a 	mov	r17,r2
 200b848:	200be080 	call	200be08 <__udivsi3>
 200b84c:	100b883a 	mov	r5,r2
 200b850:	b809883a 	mov	r4,r23
 200b854:	8822943a 	slli	r17,r17,16
 200b858:	20018280 	call	2001828 <__mulsi3>
 200b85c:	a0ffffcc 	andi	r3,r20,65535
 200b860:	1c46b03a 	or	r3,r3,r17
 200b864:	1880042e 	bgeu	r3,r2,200b878 <__umoddi3+0x12c>
 200b868:	1cc7883a 	add	r3,r3,r19
 200b86c:	1cc00236 	bltu	r3,r19,200b878 <__umoddi3+0x12c>
 200b870:	1880012e 	bgeu	r3,r2,200b878 <__umoddi3+0x12c>
 200b874:	1cc7883a 	add	r3,r3,r19
 200b878:	1885c83a 	sub	r2,r3,r2
 200b87c:	1484d83a 	srl	r2,r2,r18
 200b880:	0007883a 	mov	r3,zero
 200b884:	00005306 	br	200b9d4 <__umoddi3+0x288>
 200b888:	29c05036 	bltu	r5,r7,200b9cc <__umoddi3+0x280>
 200b88c:	00bfffd4 	movui	r2,65535
 200b890:	11c05c2e 	bgeu	r2,r7,200ba04 <__umoddi3+0x2b8>
 200b894:	00804034 	movhi	r2,256
 200b898:	10bfffc4 	addi	r2,r2,-1
 200b89c:	11c10636 	bltu	r2,r7,200bcb8 <__umoddi3+0x56c>
 200b8a0:	01000404 	movi	r4,16
 200b8a4:	3904d83a 	srl	r2,r7,r4
 200b8a8:	00c08074 	movhi	r3,513
 200b8ac:	18c47304 	addi	r3,r3,4556
 200b8b0:	1885883a 	add	r2,r3,r2
 200b8b4:	14c00003 	ldbu	r19,0(r2)
 200b8b8:	00c00804 	movi	r3,32
 200b8bc:	9927883a 	add	r19,r19,r4
 200b8c0:	1ce9c83a 	sub	r20,r3,r19
 200b8c4:	a0005c1e 	bne	r20,zero,200ba38 <__umoddi3+0x2ec>
 200b8c8:	3c400136 	bltu	r7,r17,200b8d0 <__umoddi3+0x184>
 200b8cc:	81810a36 	bltu	r16,r6,200bcf8 <__umoddi3+0x5ac>
 200b8d0:	8185c83a 	sub	r2,r16,r6
 200b8d4:	89e3c83a 	sub	r17,r17,r7
 200b8d8:	8089803a 	cmpltu	r4,r16,r2
 200b8dc:	8939c83a 	sub	fp,r17,r4
 200b8e0:	e007883a 	mov	r3,fp
 200b8e4:	00003b06 	br	200b9d4 <__umoddi3+0x288>
 200b8e8:	3000041e 	bne	r6,zero,200b8fc <__umoddi3+0x1b0>
 200b8ec:	000b883a 	mov	r5,zero
 200b8f0:	01000044 	movi	r4,1
 200b8f4:	200be080 	call	200be08 <__udivsi3>
 200b8f8:	1027883a 	mov	r19,r2
 200b8fc:	00bfffd4 	movui	r2,65535
 200b900:	14c0442e 	bgeu	r2,r19,200ba14 <__umoddi3+0x2c8>
 200b904:	00804034 	movhi	r2,256
 200b908:	10bfffc4 	addi	r2,r2,-1
 200b90c:	14c0ec36 	bltu	r2,r19,200bcc0 <__umoddi3+0x574>
 200b910:	00800404 	movi	r2,16
 200b914:	9886d83a 	srl	r3,r19,r2
 200b918:	01008074 	movhi	r4,513
 200b91c:	21047304 	addi	r4,r4,4556
 200b920:	20c7883a 	add	r3,r4,r3
 200b924:	18c00003 	ldbu	r3,0(r3)
 200b928:	1887883a 	add	r3,r3,r2
 200b92c:	00800804 	movi	r2,32
 200b930:	10e5c83a 	sub	r18,r2,r3
 200b934:	9000ab1e 	bne	r18,zero,200bbe4 <__umoddi3+0x498>
 200b938:	982cd43a 	srli	r22,r19,16
 200b93c:	8ce3c83a 	sub	r17,r17,r19
 200b940:	9dffffcc 	andi	r23,r19,65535
 200b944:	b00b883a 	mov	r5,r22
 200b948:	8809883a 	mov	r4,r17
 200b94c:	200be6c0 	call	200be6c <__umodsi3>
 200b950:	b00b883a 	mov	r5,r22
 200b954:	8809883a 	mov	r4,r17
 200b958:	102b883a 	mov	r21,r2
 200b95c:	200be080 	call	200be08 <__udivsi3>
 200b960:	b80b883a 	mov	r5,r23
 200b964:	1009883a 	mov	r4,r2
 200b968:	20018280 	call	2001828 <__mulsi3>
 200b96c:	a82a943a 	slli	r21,r21,16
 200b970:	a006d43a 	srli	r3,r20,16
 200b974:	1d46b03a 	or	r3,r3,r21
 200b978:	1880042e 	bgeu	r3,r2,200b98c <__umoddi3+0x240>
 200b97c:	1cc7883a 	add	r3,r3,r19
 200b980:	1cc00236 	bltu	r3,r19,200b98c <__umoddi3+0x240>
 200b984:	1880012e 	bgeu	r3,r2,200b98c <__umoddi3+0x240>
 200b988:	1cc7883a 	add	r3,r3,r19
 200b98c:	18a1c83a 	sub	r16,r3,r2
 200b990:	b00b883a 	mov	r5,r22
 200b994:	8009883a 	mov	r4,r16
 200b998:	200be6c0 	call	200be6c <__umodsi3>
 200b99c:	1023883a 	mov	r17,r2
 200b9a0:	b00b883a 	mov	r5,r22
 200b9a4:	8009883a 	mov	r4,r16
 200b9a8:	200be080 	call	200be08 <__udivsi3>
 200b9ac:	8822943a 	slli	r17,r17,16
 200b9b0:	b80b883a 	mov	r5,r23
 200b9b4:	1009883a 	mov	r4,r2
 200b9b8:	20018280 	call	2001828 <__mulsi3>
 200b9bc:	a53fffcc 	andi	r20,r20,65535
 200b9c0:	a446b03a 	or	r3,r20,r17
 200b9c4:	18bfac2e 	bgeu	r3,r2,200b878 <__alt_data_end+0xff00b878>
 200b9c8:	003fa706 	br	200b868 <__alt_data_end+0xff00b868>
 200b9cc:	2005883a 	mov	r2,r4
 200b9d0:	2807883a 	mov	r3,r5
 200b9d4:	dfc00c17 	ldw	ra,48(sp)
 200b9d8:	df000b17 	ldw	fp,44(sp)
 200b9dc:	ddc00a17 	ldw	r23,40(sp)
 200b9e0:	dd800917 	ldw	r22,36(sp)
 200b9e4:	dd400817 	ldw	r21,32(sp)
 200b9e8:	dd000717 	ldw	r20,28(sp)
 200b9ec:	dcc00617 	ldw	r19,24(sp)
 200b9f0:	dc800517 	ldw	r18,20(sp)
 200b9f4:	dc400417 	ldw	r17,16(sp)
 200b9f8:	dc000317 	ldw	r16,12(sp)
 200b9fc:	dec00d04 	addi	sp,sp,52
 200ba00:	f800283a 	ret
 200ba04:	04c03fc4 	movi	r19,255
 200ba08:	99c9803a 	cmpltu	r4,r19,r7
 200ba0c:	200890fa 	slli	r4,r4,3
 200ba10:	003fa406 	br	200b8a4 <__alt_data_end+0xff00b8a4>
 200ba14:	00803fc4 	movi	r2,255
 200ba18:	14c5803a 	cmpltu	r2,r2,r19
 200ba1c:	100490fa 	slli	r2,r2,3
 200ba20:	003fbc06 	br	200b914 <__alt_data_end+0xff00b914>
 200ba24:	00804034 	movhi	r2,256
 200ba28:	10bfffc4 	addi	r2,r2,-1
 200ba2c:	1180a636 	bltu	r2,r6,200bcc8 <__umoddi3+0x57c>
 200ba30:	01000404 	movi	r4,16
 200ba34:	003f5c06 	br	200b7a8 <__alt_data_end+0xff00b7a8>
 200ba38:	3d0e983a 	sll	r7,r7,r20
 200ba3c:	34ead83a 	srl	r21,r6,r19
 200ba40:	8cc6d83a 	srl	r3,r17,r19
 200ba44:	8d10983a 	sll	r8,r17,r20
 200ba48:	3d6ab03a 	or	r21,r7,r21
 200ba4c:	a82cd43a 	srli	r22,r21,16
 200ba50:	84e2d83a 	srl	r17,r16,r19
 200ba54:	1809883a 	mov	r4,r3
 200ba58:	b00b883a 	mov	r5,r22
 200ba5c:	8a22b03a 	or	r17,r17,r8
 200ba60:	3524983a 	sll	r18,r6,r20
 200ba64:	dc400015 	stw	r17,0(sp)
 200ba68:	d8c00115 	stw	r3,4(sp)
 200ba6c:	200be6c0 	call	200be6c <__umodsi3>
 200ba70:	d8c00117 	ldw	r3,4(sp)
 200ba74:	b00b883a 	mov	r5,r22
 200ba78:	1039883a 	mov	fp,r2
 200ba7c:	1809883a 	mov	r4,r3
 200ba80:	200be080 	call	200be08 <__udivsi3>
 200ba84:	adffffcc 	andi	r23,r21,65535
 200ba88:	100b883a 	mov	r5,r2
 200ba8c:	b809883a 	mov	r4,r23
 200ba90:	1023883a 	mov	r17,r2
 200ba94:	20018280 	call	2001828 <__mulsi3>
 200ba98:	d9400017 	ldw	r5,0(sp)
 200ba9c:	e008943a 	slli	r4,fp,16
 200baa0:	8520983a 	sll	r16,r16,r20
 200baa4:	2806d43a 	srli	r3,r5,16
 200baa8:	1906b03a 	or	r3,r3,r4
 200baac:	1880042e 	bgeu	r3,r2,200bac0 <__umoddi3+0x374>
 200bab0:	1d47883a 	add	r3,r3,r21
 200bab4:	893fffc4 	addi	r4,r17,-1
 200bab8:	1d40892e 	bgeu	r3,r21,200bce0 <__umoddi3+0x594>
 200babc:	2023883a 	mov	r17,r4
 200bac0:	18b9c83a 	sub	fp,r3,r2
 200bac4:	b00b883a 	mov	r5,r22
 200bac8:	e009883a 	mov	r4,fp
 200bacc:	200be6c0 	call	200be6c <__umodsi3>
 200bad0:	b00b883a 	mov	r5,r22
 200bad4:	e009883a 	mov	r4,fp
 200bad8:	d8800215 	stw	r2,8(sp)
 200badc:	200be080 	call	200be08 <__udivsi3>
 200bae0:	100b883a 	mov	r5,r2
 200bae4:	b809883a 	mov	r4,r23
 200bae8:	102d883a 	mov	r22,r2
 200baec:	20018280 	call	2001828 <__mulsi3>
 200baf0:	d9800217 	ldw	r6,8(sp)
 200baf4:	d8c00017 	ldw	r3,0(sp)
 200baf8:	300c943a 	slli	r6,r6,16
 200bafc:	1a3fffcc 	andi	r8,r3,65535
 200bb00:	4190b03a 	or	r8,r8,r6
 200bb04:	4080042e 	bgeu	r8,r2,200bb18 <__umoddi3+0x3cc>
 200bb08:	4551883a 	add	r8,r8,r21
 200bb0c:	b0ffffc4 	addi	r3,r22,-1
 200bb10:	45406f2e 	bgeu	r8,r21,200bcd0 <__umoddi3+0x584>
 200bb14:	182d883a 	mov	r22,r3
 200bb18:	880e943a 	slli	r7,r17,16
 200bb1c:	9006d43a 	srli	r3,r18,16
 200bb20:	91bfffcc 	andi	r6,r18,65535
 200bb24:	3dacb03a 	or	r22,r7,r22
 200bb28:	b02ed43a 	srli	r23,r22,16
 200bb2c:	b5bfffcc 	andi	r22,r22,65535
 200bb30:	300b883a 	mov	r5,r6
 200bb34:	b009883a 	mov	r4,r22
 200bb38:	40a3c83a 	sub	r17,r8,r2
 200bb3c:	d8c00115 	stw	r3,4(sp)
 200bb40:	d9800215 	stw	r6,8(sp)
 200bb44:	20018280 	call	2001828 <__mulsi3>
 200bb48:	d9800217 	ldw	r6,8(sp)
 200bb4c:	b809883a 	mov	r4,r23
 200bb50:	1039883a 	mov	fp,r2
 200bb54:	300b883a 	mov	r5,r6
 200bb58:	20018280 	call	2001828 <__mulsi3>
 200bb5c:	d8c00117 	ldw	r3,4(sp)
 200bb60:	b809883a 	mov	r4,r23
 200bb64:	d8800215 	stw	r2,8(sp)
 200bb68:	180b883a 	mov	r5,r3
 200bb6c:	20018280 	call	2001828 <__mulsi3>
 200bb70:	d8c00117 	ldw	r3,4(sp)
 200bb74:	b009883a 	mov	r4,r22
 200bb78:	102f883a 	mov	r23,r2
 200bb7c:	180b883a 	mov	r5,r3
 200bb80:	20018280 	call	2001828 <__mulsi3>
 200bb84:	d9800217 	ldw	r6,8(sp)
 200bb88:	e006d43a 	srli	r3,fp,16
 200bb8c:	1185883a 	add	r2,r2,r6
 200bb90:	1885883a 	add	r2,r3,r2
 200bb94:	1180022e 	bgeu	r2,r6,200bba0 <__umoddi3+0x454>
 200bb98:	00c00074 	movhi	r3,1
 200bb9c:	b8ef883a 	add	r23,r23,r3
 200bba0:	1006d43a 	srli	r3,r2,16
 200bba4:	1004943a 	slli	r2,r2,16
 200bba8:	e73fffcc 	andi	fp,fp,65535
 200bbac:	1dc7883a 	add	r3,r3,r23
 200bbb0:	1739883a 	add	fp,r2,fp
 200bbb4:	88c03a36 	bltu	r17,r3,200bca0 <__umoddi3+0x554>
 200bbb8:	88c05126 	beq	r17,r3,200bd00 <__umoddi3+0x5b4>
 200bbbc:	88c9c83a 	sub	r4,r17,r3
 200bbc0:	e00f883a 	mov	r7,fp
 200bbc4:	81cfc83a 	sub	r7,r16,r7
 200bbc8:	81c7803a 	cmpltu	r3,r16,r7
 200bbcc:	20c7c83a 	sub	r3,r4,r3
 200bbd0:	1cc4983a 	sll	r2,r3,r19
 200bbd4:	3d0ed83a 	srl	r7,r7,r20
 200bbd8:	1d06d83a 	srl	r3,r3,r20
 200bbdc:	11c4b03a 	or	r2,r2,r7
 200bbe0:	003f7c06 	br	200b9d4 <__alt_data_end+0xff00b9d4>
 200bbe4:	9ca6983a 	sll	r19,r19,r18
 200bbe8:	88f8d83a 	srl	fp,r17,r3
 200bbec:	80c4d83a 	srl	r2,r16,r3
 200bbf0:	982cd43a 	srli	r22,r19,16
 200bbf4:	8ca2983a 	sll	r17,r17,r18
 200bbf8:	e009883a 	mov	r4,fp
 200bbfc:	b00b883a 	mov	r5,r22
 200bc00:	146ab03a 	or	r21,r2,r17
 200bc04:	200be6c0 	call	200be6c <__umodsi3>
 200bc08:	b00b883a 	mov	r5,r22
 200bc0c:	e009883a 	mov	r4,fp
 200bc10:	1029883a 	mov	r20,r2
 200bc14:	9dffffcc 	andi	r23,r19,65535
 200bc18:	200be080 	call	200be08 <__udivsi3>
 200bc1c:	b809883a 	mov	r4,r23
 200bc20:	100b883a 	mov	r5,r2
 200bc24:	20018280 	call	2001828 <__mulsi3>
 200bc28:	a008943a 	slli	r4,r20,16
 200bc2c:	a806d43a 	srli	r3,r21,16
 200bc30:	84a8983a 	sll	r20,r16,r18
 200bc34:	1906b03a 	or	r3,r3,r4
 200bc38:	1880042e 	bgeu	r3,r2,200bc4c <__umoddi3+0x500>
 200bc3c:	1cc7883a 	add	r3,r3,r19
 200bc40:	1cc00236 	bltu	r3,r19,200bc4c <__umoddi3+0x500>
 200bc44:	1880012e 	bgeu	r3,r2,200bc4c <__umoddi3+0x500>
 200bc48:	1cc7883a 	add	r3,r3,r19
 200bc4c:	18a3c83a 	sub	r17,r3,r2
 200bc50:	b00b883a 	mov	r5,r22
 200bc54:	8809883a 	mov	r4,r17
 200bc58:	200be6c0 	call	200be6c <__umodsi3>
 200bc5c:	b00b883a 	mov	r5,r22
 200bc60:	8809883a 	mov	r4,r17
 200bc64:	1021883a 	mov	r16,r2
 200bc68:	200be080 	call	200be08 <__udivsi3>
 200bc6c:	100b883a 	mov	r5,r2
 200bc70:	b809883a 	mov	r4,r23
 200bc74:	8020943a 	slli	r16,r16,16
 200bc78:	20018280 	call	2001828 <__mulsi3>
 200bc7c:	a8ffffcc 	andi	r3,r21,65535
 200bc80:	1c06b03a 	or	r3,r3,r16
 200bc84:	1880042e 	bgeu	r3,r2,200bc98 <__umoddi3+0x54c>
 200bc88:	1cc7883a 	add	r3,r3,r19
 200bc8c:	1cc00236 	bltu	r3,r19,200bc98 <__umoddi3+0x54c>
 200bc90:	1880012e 	bgeu	r3,r2,200bc98 <__umoddi3+0x54c>
 200bc94:	1cc7883a 	add	r3,r3,r19
 200bc98:	18a3c83a 	sub	r17,r3,r2
 200bc9c:	003f2906 	br	200b944 <__alt_data_end+0xff00b944>
 200bca0:	e48fc83a 	sub	r7,fp,r18
 200bca4:	1d49c83a 	sub	r4,r3,r21
 200bca8:	e1f9803a 	cmpltu	fp,fp,r7
 200bcac:	2739c83a 	sub	fp,r4,fp
 200bcb0:	8f09c83a 	sub	r4,r17,fp
 200bcb4:	003fc306 	br	200bbc4 <__alt_data_end+0xff00bbc4>
 200bcb8:	01000604 	movi	r4,24
 200bcbc:	003ef906 	br	200b8a4 <__alt_data_end+0xff00b8a4>
 200bcc0:	00800604 	movi	r2,24
 200bcc4:	003f1306 	br	200b914 <__alt_data_end+0xff00b914>
 200bcc8:	01000604 	movi	r4,24
 200bccc:	003eb606 	br	200b7a8 <__alt_data_end+0xff00b7a8>
 200bcd0:	40bf902e 	bgeu	r8,r2,200bb14 <__alt_data_end+0xff00bb14>
 200bcd4:	b5bfff84 	addi	r22,r22,-2
 200bcd8:	4551883a 	add	r8,r8,r21
 200bcdc:	003f8e06 	br	200bb18 <__alt_data_end+0xff00bb18>
 200bce0:	18bf762e 	bgeu	r3,r2,200babc <__alt_data_end+0xff00babc>
 200bce4:	8c7fff84 	addi	r17,r17,-2
 200bce8:	1d47883a 	add	r3,r3,r21
 200bcec:	003f7406 	br	200bac0 <__alt_data_end+0xff00bac0>
 200bcf0:	1cc7883a 	add	r3,r3,r19
 200bcf4:	003ecd06 	br	200b82c <__alt_data_end+0xff00b82c>
 200bcf8:	8005883a 	mov	r2,r16
 200bcfc:	003ef806 	br	200b8e0 <__alt_data_end+0xff00b8e0>
 200bd00:	873fe736 	bltu	r16,fp,200bca0 <__alt_data_end+0xff00bca0>
 200bd04:	e00f883a 	mov	r7,fp
 200bd08:	0009883a 	mov	r4,zero
 200bd0c:	003fad06 	br	200bbc4 <__alt_data_end+0xff00bbc4>

0200bd10 <__divsi3>:
 200bd10:	20001b16 	blt	r4,zero,200bd80 <__divsi3+0x70>
 200bd14:	000f883a 	mov	r7,zero
 200bd18:	28001616 	blt	r5,zero,200bd74 <__divsi3+0x64>
 200bd1c:	200d883a 	mov	r6,r4
 200bd20:	29001a2e 	bgeu	r5,r4,200bd8c <__divsi3+0x7c>
 200bd24:	00800804 	movi	r2,32
 200bd28:	00c00044 	movi	r3,1
 200bd2c:	00000106 	br	200bd34 <__divsi3+0x24>
 200bd30:	10000d26 	beq	r2,zero,200bd68 <__divsi3+0x58>
 200bd34:	294b883a 	add	r5,r5,r5
 200bd38:	10bfffc4 	addi	r2,r2,-1
 200bd3c:	18c7883a 	add	r3,r3,r3
 200bd40:	293ffb36 	bltu	r5,r4,200bd30 <__alt_data_end+0xff00bd30>
 200bd44:	0005883a 	mov	r2,zero
 200bd48:	18000726 	beq	r3,zero,200bd68 <__divsi3+0x58>
 200bd4c:	0005883a 	mov	r2,zero
 200bd50:	31400236 	bltu	r6,r5,200bd5c <__divsi3+0x4c>
 200bd54:	314dc83a 	sub	r6,r6,r5
 200bd58:	10c4b03a 	or	r2,r2,r3
 200bd5c:	1806d07a 	srli	r3,r3,1
 200bd60:	280ad07a 	srli	r5,r5,1
 200bd64:	183ffa1e 	bne	r3,zero,200bd50 <__alt_data_end+0xff00bd50>
 200bd68:	38000126 	beq	r7,zero,200bd70 <__divsi3+0x60>
 200bd6c:	0085c83a 	sub	r2,zero,r2
 200bd70:	f800283a 	ret
 200bd74:	014bc83a 	sub	r5,zero,r5
 200bd78:	39c0005c 	xori	r7,r7,1
 200bd7c:	003fe706 	br	200bd1c <__alt_data_end+0xff00bd1c>
 200bd80:	0109c83a 	sub	r4,zero,r4
 200bd84:	01c00044 	movi	r7,1
 200bd88:	003fe306 	br	200bd18 <__alt_data_end+0xff00bd18>
 200bd8c:	00c00044 	movi	r3,1
 200bd90:	003fee06 	br	200bd4c <__alt_data_end+0xff00bd4c>

0200bd94 <__modsi3>:
 200bd94:	20001716 	blt	r4,zero,200bdf4 <__modsi3+0x60>
 200bd98:	000f883a 	mov	r7,zero
 200bd9c:	2005883a 	mov	r2,r4
 200bda0:	28001216 	blt	r5,zero,200bdec <__modsi3+0x58>
 200bda4:	2900162e 	bgeu	r5,r4,200be00 <__modsi3+0x6c>
 200bda8:	01800804 	movi	r6,32
 200bdac:	00c00044 	movi	r3,1
 200bdb0:	00000106 	br	200bdb8 <__modsi3+0x24>
 200bdb4:	30000a26 	beq	r6,zero,200bde0 <__modsi3+0x4c>
 200bdb8:	294b883a 	add	r5,r5,r5
 200bdbc:	31bfffc4 	addi	r6,r6,-1
 200bdc0:	18c7883a 	add	r3,r3,r3
 200bdc4:	293ffb36 	bltu	r5,r4,200bdb4 <__alt_data_end+0xff00bdb4>
 200bdc8:	18000526 	beq	r3,zero,200bde0 <__modsi3+0x4c>
 200bdcc:	1806d07a 	srli	r3,r3,1
 200bdd0:	11400136 	bltu	r2,r5,200bdd8 <__modsi3+0x44>
 200bdd4:	1145c83a 	sub	r2,r2,r5
 200bdd8:	280ad07a 	srli	r5,r5,1
 200bddc:	183ffb1e 	bne	r3,zero,200bdcc <__alt_data_end+0xff00bdcc>
 200bde0:	38000126 	beq	r7,zero,200bde8 <__modsi3+0x54>
 200bde4:	0085c83a 	sub	r2,zero,r2
 200bde8:	f800283a 	ret
 200bdec:	014bc83a 	sub	r5,zero,r5
 200bdf0:	003fec06 	br	200bda4 <__alt_data_end+0xff00bda4>
 200bdf4:	0109c83a 	sub	r4,zero,r4
 200bdf8:	01c00044 	movi	r7,1
 200bdfc:	003fe706 	br	200bd9c <__alt_data_end+0xff00bd9c>
 200be00:	00c00044 	movi	r3,1
 200be04:	003ff106 	br	200bdcc <__alt_data_end+0xff00bdcc>

0200be08 <__udivsi3>:
 200be08:	200d883a 	mov	r6,r4
 200be0c:	2900152e 	bgeu	r5,r4,200be64 <__udivsi3+0x5c>
 200be10:	28001416 	blt	r5,zero,200be64 <__udivsi3+0x5c>
 200be14:	00800804 	movi	r2,32
 200be18:	00c00044 	movi	r3,1
 200be1c:	00000206 	br	200be28 <__udivsi3+0x20>
 200be20:	10000e26 	beq	r2,zero,200be5c <__udivsi3+0x54>
 200be24:	28000516 	blt	r5,zero,200be3c <__udivsi3+0x34>
 200be28:	294b883a 	add	r5,r5,r5
 200be2c:	10bfffc4 	addi	r2,r2,-1
 200be30:	18c7883a 	add	r3,r3,r3
 200be34:	293ffa36 	bltu	r5,r4,200be20 <__alt_data_end+0xff00be20>
 200be38:	18000826 	beq	r3,zero,200be5c <__udivsi3+0x54>
 200be3c:	0005883a 	mov	r2,zero
 200be40:	31400236 	bltu	r6,r5,200be4c <__udivsi3+0x44>
 200be44:	314dc83a 	sub	r6,r6,r5
 200be48:	10c4b03a 	or	r2,r2,r3
 200be4c:	1806d07a 	srli	r3,r3,1
 200be50:	280ad07a 	srli	r5,r5,1
 200be54:	183ffa1e 	bne	r3,zero,200be40 <__alt_data_end+0xff00be40>
 200be58:	f800283a 	ret
 200be5c:	0005883a 	mov	r2,zero
 200be60:	f800283a 	ret
 200be64:	00c00044 	movi	r3,1
 200be68:	003ff406 	br	200be3c <__alt_data_end+0xff00be3c>

0200be6c <__umodsi3>:
 200be6c:	2005883a 	mov	r2,r4
 200be70:	2900122e 	bgeu	r5,r4,200bebc <__umodsi3+0x50>
 200be74:	28001116 	blt	r5,zero,200bebc <__umodsi3+0x50>
 200be78:	01800804 	movi	r6,32
 200be7c:	00c00044 	movi	r3,1
 200be80:	00000206 	br	200be8c <__umodsi3+0x20>
 200be84:	30000c26 	beq	r6,zero,200beb8 <__umodsi3+0x4c>
 200be88:	28000516 	blt	r5,zero,200bea0 <__umodsi3+0x34>
 200be8c:	294b883a 	add	r5,r5,r5
 200be90:	31bfffc4 	addi	r6,r6,-1
 200be94:	18c7883a 	add	r3,r3,r3
 200be98:	293ffa36 	bltu	r5,r4,200be84 <__alt_data_end+0xff00be84>
 200be9c:	18000626 	beq	r3,zero,200beb8 <__umodsi3+0x4c>
 200bea0:	1806d07a 	srli	r3,r3,1
 200bea4:	11400136 	bltu	r2,r5,200beac <__umodsi3+0x40>
 200bea8:	1145c83a 	sub	r2,r2,r5
 200beac:	280ad07a 	srli	r5,r5,1
 200beb0:	183ffb1e 	bne	r3,zero,200bea0 <__alt_data_end+0xff00bea0>
 200beb4:	f800283a 	ret
 200beb8:	f800283a 	ret
 200bebc:	00c00044 	movi	r3,1
 200bec0:	003ff706 	br	200bea0 <__alt_data_end+0xff00bea0>

0200bec4 <__adddf3>:
 200bec4:	02c00434 	movhi	r11,16
 200bec8:	5affffc4 	addi	r11,r11,-1
 200becc:	2806d7fa 	srli	r3,r5,31
 200bed0:	2ad4703a 	and	r10,r5,r11
 200bed4:	3ad2703a 	and	r9,r7,r11
 200bed8:	3804d53a 	srli	r2,r7,20
 200bedc:	3018d77a 	srli	r12,r6,29
 200bee0:	280ad53a 	srli	r5,r5,20
 200bee4:	501490fa 	slli	r10,r10,3
 200bee8:	2010d77a 	srli	r8,r4,29
 200beec:	481290fa 	slli	r9,r9,3
 200bef0:	380ed7fa 	srli	r7,r7,31
 200bef4:	defffb04 	addi	sp,sp,-20
 200bef8:	dc800215 	stw	r18,8(sp)
 200befc:	dc400115 	stw	r17,4(sp)
 200bf00:	dc000015 	stw	r16,0(sp)
 200bf04:	dfc00415 	stw	ra,16(sp)
 200bf08:	dcc00315 	stw	r19,12(sp)
 200bf0c:	1c803fcc 	andi	r18,r3,255
 200bf10:	2c01ffcc 	andi	r16,r5,2047
 200bf14:	5210b03a 	or	r8,r10,r8
 200bf18:	202290fa 	slli	r17,r4,3
 200bf1c:	1081ffcc 	andi	r2,r2,2047
 200bf20:	4b12b03a 	or	r9,r9,r12
 200bf24:	300c90fa 	slli	r6,r6,3
 200bf28:	91c07526 	beq	r18,r7,200c100 <__adddf3+0x23c>
 200bf2c:	8087c83a 	sub	r3,r16,r2
 200bf30:	00c0ab0e 	bge	zero,r3,200c1e0 <__adddf3+0x31c>
 200bf34:	10002a1e 	bne	r2,zero,200bfe0 <__adddf3+0x11c>
 200bf38:	4984b03a 	or	r2,r9,r6
 200bf3c:	1000961e 	bne	r2,zero,200c198 <__adddf3+0x2d4>
 200bf40:	888001cc 	andi	r2,r17,7
 200bf44:	10000726 	beq	r2,zero,200bf64 <__adddf3+0xa0>
 200bf48:	888003cc 	andi	r2,r17,15
 200bf4c:	00c00104 	movi	r3,4
 200bf50:	10c00426 	beq	r2,r3,200bf64 <__adddf3+0xa0>
 200bf54:	88c7883a 	add	r3,r17,r3
 200bf58:	1c63803a 	cmpltu	r17,r3,r17
 200bf5c:	4451883a 	add	r8,r8,r17
 200bf60:	1823883a 	mov	r17,r3
 200bf64:	4080202c 	andhi	r2,r8,128
 200bf68:	10005926 	beq	r2,zero,200c0d0 <__adddf3+0x20c>
 200bf6c:	84000044 	addi	r16,r16,1
 200bf70:	0081ffc4 	movi	r2,2047
 200bf74:	8080ba26 	beq	r16,r2,200c260 <__adddf3+0x39c>
 200bf78:	00bfe034 	movhi	r2,65408
 200bf7c:	10bfffc4 	addi	r2,r2,-1
 200bf80:	4090703a 	and	r8,r8,r2
 200bf84:	4004977a 	slli	r2,r8,29
 200bf88:	4010927a 	slli	r8,r8,9
 200bf8c:	8822d0fa 	srli	r17,r17,3
 200bf90:	8401ffcc 	andi	r16,r16,2047
 200bf94:	4010d33a 	srli	r8,r8,12
 200bf98:	9007883a 	mov	r3,r18
 200bf9c:	1444b03a 	or	r2,r2,r17
 200bfa0:	8401ffcc 	andi	r16,r16,2047
 200bfa4:	8020953a 	slli	r16,r16,20
 200bfa8:	18c03fcc 	andi	r3,r3,255
 200bfac:	01000434 	movhi	r4,16
 200bfb0:	213fffc4 	addi	r4,r4,-1
 200bfb4:	180697fa 	slli	r3,r3,31
 200bfb8:	4110703a 	and	r8,r8,r4
 200bfbc:	4410b03a 	or	r8,r8,r16
 200bfc0:	40c6b03a 	or	r3,r8,r3
 200bfc4:	dfc00417 	ldw	ra,16(sp)
 200bfc8:	dcc00317 	ldw	r19,12(sp)
 200bfcc:	dc800217 	ldw	r18,8(sp)
 200bfd0:	dc400117 	ldw	r17,4(sp)
 200bfd4:	dc000017 	ldw	r16,0(sp)
 200bfd8:	dec00504 	addi	sp,sp,20
 200bfdc:	f800283a 	ret
 200bfe0:	0081ffc4 	movi	r2,2047
 200bfe4:	80bfd626 	beq	r16,r2,200bf40 <__alt_data_end+0xff00bf40>
 200bfe8:	4a402034 	orhi	r9,r9,128
 200bfec:	00800e04 	movi	r2,56
 200bff0:	10c09f16 	blt	r2,r3,200c270 <__adddf3+0x3ac>
 200bff4:	008007c4 	movi	r2,31
 200bff8:	10c0c216 	blt	r2,r3,200c304 <__adddf3+0x440>
 200bffc:	00800804 	movi	r2,32
 200c000:	10c5c83a 	sub	r2,r2,r3
 200c004:	488a983a 	sll	r5,r9,r2
 200c008:	30c8d83a 	srl	r4,r6,r3
 200c00c:	3084983a 	sll	r2,r6,r2
 200c010:	48c6d83a 	srl	r3,r9,r3
 200c014:	290cb03a 	or	r6,r5,r4
 200c018:	1004c03a 	cmpne	r2,r2,zero
 200c01c:	308cb03a 	or	r6,r6,r2
 200c020:	898dc83a 	sub	r6,r17,r6
 200c024:	89a3803a 	cmpltu	r17,r17,r6
 200c028:	40d1c83a 	sub	r8,r8,r3
 200c02c:	4451c83a 	sub	r8,r8,r17
 200c030:	3023883a 	mov	r17,r6
 200c034:	4080202c 	andhi	r2,r8,128
 200c038:	10002326 	beq	r2,zero,200c0c8 <__adddf3+0x204>
 200c03c:	04c02034 	movhi	r19,128
 200c040:	9cffffc4 	addi	r19,r19,-1
 200c044:	44e6703a 	and	r19,r8,r19
 200c048:	98007626 	beq	r19,zero,200c224 <__adddf3+0x360>
 200c04c:	9809883a 	mov	r4,r19
 200c050:	200e7040 	call	200e704 <__clzsi2>
 200c054:	10fffe04 	addi	r3,r2,-8
 200c058:	010007c4 	movi	r4,31
 200c05c:	20c07716 	blt	r4,r3,200c23c <__adddf3+0x378>
 200c060:	00800804 	movi	r2,32
 200c064:	10c5c83a 	sub	r2,r2,r3
 200c068:	8884d83a 	srl	r2,r17,r2
 200c06c:	98d0983a 	sll	r8,r19,r3
 200c070:	88e2983a 	sll	r17,r17,r3
 200c074:	1204b03a 	or	r2,r2,r8
 200c078:	1c007416 	blt	r3,r16,200c24c <__adddf3+0x388>
 200c07c:	1c21c83a 	sub	r16,r3,r16
 200c080:	82000044 	addi	r8,r16,1
 200c084:	00c007c4 	movi	r3,31
 200c088:	1a009116 	blt	r3,r8,200c2d0 <__adddf3+0x40c>
 200c08c:	00c00804 	movi	r3,32
 200c090:	1a07c83a 	sub	r3,r3,r8
 200c094:	8a08d83a 	srl	r4,r17,r8
 200c098:	88e2983a 	sll	r17,r17,r3
 200c09c:	10c6983a 	sll	r3,r2,r3
 200c0a0:	1210d83a 	srl	r8,r2,r8
 200c0a4:	8804c03a 	cmpne	r2,r17,zero
 200c0a8:	1906b03a 	or	r3,r3,r4
 200c0ac:	18a2b03a 	or	r17,r3,r2
 200c0b0:	0021883a 	mov	r16,zero
 200c0b4:	003fa206 	br	200bf40 <__alt_data_end+0xff00bf40>
 200c0b8:	1890b03a 	or	r8,r3,r2
 200c0bc:	40017d26 	beq	r8,zero,200c6b4 <__adddf3+0x7f0>
 200c0c0:	1011883a 	mov	r8,r2
 200c0c4:	1823883a 	mov	r17,r3
 200c0c8:	888001cc 	andi	r2,r17,7
 200c0cc:	103f9e1e 	bne	r2,zero,200bf48 <__alt_data_end+0xff00bf48>
 200c0d0:	4004977a 	slli	r2,r8,29
 200c0d4:	8822d0fa 	srli	r17,r17,3
 200c0d8:	4010d0fa 	srli	r8,r8,3
 200c0dc:	9007883a 	mov	r3,r18
 200c0e0:	1444b03a 	or	r2,r2,r17
 200c0e4:	0101ffc4 	movi	r4,2047
 200c0e8:	81002426 	beq	r16,r4,200c17c <__adddf3+0x2b8>
 200c0ec:	8120703a 	and	r16,r16,r4
 200c0f0:	01000434 	movhi	r4,16
 200c0f4:	213fffc4 	addi	r4,r4,-1
 200c0f8:	4110703a 	and	r8,r8,r4
 200c0fc:	003fa806 	br	200bfa0 <__alt_data_end+0xff00bfa0>
 200c100:	8089c83a 	sub	r4,r16,r2
 200c104:	01005e0e 	bge	zero,r4,200c280 <__adddf3+0x3bc>
 200c108:	10002b26 	beq	r2,zero,200c1b8 <__adddf3+0x2f4>
 200c10c:	0081ffc4 	movi	r2,2047
 200c110:	80bf8b26 	beq	r16,r2,200bf40 <__alt_data_end+0xff00bf40>
 200c114:	4a402034 	orhi	r9,r9,128
 200c118:	00800e04 	movi	r2,56
 200c11c:	1100a40e 	bge	r2,r4,200c3b0 <__adddf3+0x4ec>
 200c120:	498cb03a 	or	r6,r9,r6
 200c124:	300ac03a 	cmpne	r5,r6,zero
 200c128:	0013883a 	mov	r9,zero
 200c12c:	2c4b883a 	add	r5,r5,r17
 200c130:	2c63803a 	cmpltu	r17,r5,r17
 200c134:	4a11883a 	add	r8,r9,r8
 200c138:	8a11883a 	add	r8,r17,r8
 200c13c:	2823883a 	mov	r17,r5
 200c140:	4080202c 	andhi	r2,r8,128
 200c144:	103fe026 	beq	r2,zero,200c0c8 <__alt_data_end+0xff00c0c8>
 200c148:	84000044 	addi	r16,r16,1
 200c14c:	0081ffc4 	movi	r2,2047
 200c150:	8080d226 	beq	r16,r2,200c49c <__adddf3+0x5d8>
 200c154:	00bfe034 	movhi	r2,65408
 200c158:	10bfffc4 	addi	r2,r2,-1
 200c15c:	4090703a 	and	r8,r8,r2
 200c160:	880ad07a 	srli	r5,r17,1
 200c164:	400897fa 	slli	r4,r8,31
 200c168:	88c0004c 	andi	r3,r17,1
 200c16c:	28e2b03a 	or	r17,r5,r3
 200c170:	4010d07a 	srli	r8,r8,1
 200c174:	2462b03a 	or	r17,r4,r17
 200c178:	003f7106 	br	200bf40 <__alt_data_end+0xff00bf40>
 200c17c:	4088b03a 	or	r4,r8,r2
 200c180:	20014526 	beq	r4,zero,200c698 <__adddf3+0x7d4>
 200c184:	01000434 	movhi	r4,16
 200c188:	42000234 	orhi	r8,r8,8
 200c18c:	213fffc4 	addi	r4,r4,-1
 200c190:	4110703a 	and	r8,r8,r4
 200c194:	003f8206 	br	200bfa0 <__alt_data_end+0xff00bfa0>
 200c198:	18ffffc4 	addi	r3,r3,-1
 200c19c:	1800491e 	bne	r3,zero,200c2c4 <__adddf3+0x400>
 200c1a0:	898bc83a 	sub	r5,r17,r6
 200c1a4:	8963803a 	cmpltu	r17,r17,r5
 200c1a8:	4251c83a 	sub	r8,r8,r9
 200c1ac:	4451c83a 	sub	r8,r8,r17
 200c1b0:	2823883a 	mov	r17,r5
 200c1b4:	003f9f06 	br	200c034 <__alt_data_end+0xff00c034>
 200c1b8:	4984b03a 	or	r2,r9,r6
 200c1bc:	103f6026 	beq	r2,zero,200bf40 <__alt_data_end+0xff00bf40>
 200c1c0:	213fffc4 	addi	r4,r4,-1
 200c1c4:	2000931e 	bne	r4,zero,200c414 <__adddf3+0x550>
 200c1c8:	898d883a 	add	r6,r17,r6
 200c1cc:	3463803a 	cmpltu	r17,r6,r17
 200c1d0:	4251883a 	add	r8,r8,r9
 200c1d4:	8a11883a 	add	r8,r17,r8
 200c1d8:	3023883a 	mov	r17,r6
 200c1dc:	003fd806 	br	200c140 <__alt_data_end+0xff00c140>
 200c1e0:	1800541e 	bne	r3,zero,200c334 <__adddf3+0x470>
 200c1e4:	80800044 	addi	r2,r16,1
 200c1e8:	1081ffcc 	andi	r2,r2,2047
 200c1ec:	00c00044 	movi	r3,1
 200c1f0:	1880a00e 	bge	r3,r2,200c474 <__adddf3+0x5b0>
 200c1f4:	8989c83a 	sub	r4,r17,r6
 200c1f8:	8905803a 	cmpltu	r2,r17,r4
 200c1fc:	4267c83a 	sub	r19,r8,r9
 200c200:	98a7c83a 	sub	r19,r19,r2
 200c204:	9880202c 	andhi	r2,r19,128
 200c208:	10006326 	beq	r2,zero,200c398 <__adddf3+0x4d4>
 200c20c:	3463c83a 	sub	r17,r6,r17
 200c210:	4a07c83a 	sub	r3,r9,r8
 200c214:	344d803a 	cmpltu	r6,r6,r17
 200c218:	19a7c83a 	sub	r19,r3,r6
 200c21c:	3825883a 	mov	r18,r7
 200c220:	983f8a1e 	bne	r19,zero,200c04c <__alt_data_end+0xff00c04c>
 200c224:	8809883a 	mov	r4,r17
 200c228:	200e7040 	call	200e704 <__clzsi2>
 200c22c:	10800804 	addi	r2,r2,32
 200c230:	10fffe04 	addi	r3,r2,-8
 200c234:	010007c4 	movi	r4,31
 200c238:	20ff890e 	bge	r4,r3,200c060 <__alt_data_end+0xff00c060>
 200c23c:	10bff604 	addi	r2,r2,-40
 200c240:	8884983a 	sll	r2,r17,r2
 200c244:	0023883a 	mov	r17,zero
 200c248:	1c3f8c0e 	bge	r3,r16,200c07c <__alt_data_end+0xff00c07c>
 200c24c:	023fe034 	movhi	r8,65408
 200c250:	423fffc4 	addi	r8,r8,-1
 200c254:	80e1c83a 	sub	r16,r16,r3
 200c258:	1210703a 	and	r8,r2,r8
 200c25c:	003f3806 	br	200bf40 <__alt_data_end+0xff00bf40>
 200c260:	9007883a 	mov	r3,r18
 200c264:	0011883a 	mov	r8,zero
 200c268:	0005883a 	mov	r2,zero
 200c26c:	003f4c06 	br	200bfa0 <__alt_data_end+0xff00bfa0>
 200c270:	498cb03a 	or	r6,r9,r6
 200c274:	300cc03a 	cmpne	r6,r6,zero
 200c278:	0007883a 	mov	r3,zero
 200c27c:	003f6806 	br	200c020 <__alt_data_end+0xff00c020>
 200c280:	20009c1e 	bne	r4,zero,200c4f4 <__adddf3+0x630>
 200c284:	80800044 	addi	r2,r16,1
 200c288:	1141ffcc 	andi	r5,r2,2047
 200c28c:	01000044 	movi	r4,1
 200c290:	2140670e 	bge	r4,r5,200c430 <__adddf3+0x56c>
 200c294:	0101ffc4 	movi	r4,2047
 200c298:	11007f26 	beq	r2,r4,200c498 <__adddf3+0x5d4>
 200c29c:	898d883a 	add	r6,r17,r6
 200c2a0:	4247883a 	add	r3,r8,r9
 200c2a4:	3451803a 	cmpltu	r8,r6,r17
 200c2a8:	40d1883a 	add	r8,r8,r3
 200c2ac:	402297fa 	slli	r17,r8,31
 200c2b0:	300cd07a 	srli	r6,r6,1
 200c2b4:	4010d07a 	srli	r8,r8,1
 200c2b8:	1021883a 	mov	r16,r2
 200c2bc:	89a2b03a 	or	r17,r17,r6
 200c2c0:	003f1f06 	br	200bf40 <__alt_data_end+0xff00bf40>
 200c2c4:	0081ffc4 	movi	r2,2047
 200c2c8:	80bf481e 	bne	r16,r2,200bfec <__alt_data_end+0xff00bfec>
 200c2cc:	003f1c06 	br	200bf40 <__alt_data_end+0xff00bf40>
 200c2d0:	843ff844 	addi	r16,r16,-31
 200c2d4:	01000804 	movi	r4,32
 200c2d8:	1406d83a 	srl	r3,r2,r16
 200c2dc:	41005026 	beq	r8,r4,200c420 <__adddf3+0x55c>
 200c2e0:	01001004 	movi	r4,64
 200c2e4:	2211c83a 	sub	r8,r4,r8
 200c2e8:	1204983a 	sll	r2,r2,r8
 200c2ec:	88a2b03a 	or	r17,r17,r2
 200c2f0:	8822c03a 	cmpne	r17,r17,zero
 200c2f4:	1c62b03a 	or	r17,r3,r17
 200c2f8:	0011883a 	mov	r8,zero
 200c2fc:	0021883a 	mov	r16,zero
 200c300:	003f7106 	br	200c0c8 <__alt_data_end+0xff00c0c8>
 200c304:	193ff804 	addi	r4,r3,-32
 200c308:	00800804 	movi	r2,32
 200c30c:	4908d83a 	srl	r4,r9,r4
 200c310:	18804526 	beq	r3,r2,200c428 <__adddf3+0x564>
 200c314:	00801004 	movi	r2,64
 200c318:	10c5c83a 	sub	r2,r2,r3
 200c31c:	4886983a 	sll	r3,r9,r2
 200c320:	198cb03a 	or	r6,r3,r6
 200c324:	300cc03a 	cmpne	r6,r6,zero
 200c328:	218cb03a 	or	r6,r4,r6
 200c32c:	0007883a 	mov	r3,zero
 200c330:	003f3b06 	br	200c020 <__alt_data_end+0xff00c020>
 200c334:	80002a26 	beq	r16,zero,200c3e0 <__adddf3+0x51c>
 200c338:	0101ffc4 	movi	r4,2047
 200c33c:	11006826 	beq	r2,r4,200c4e0 <__adddf3+0x61c>
 200c340:	00c7c83a 	sub	r3,zero,r3
 200c344:	42002034 	orhi	r8,r8,128
 200c348:	01000e04 	movi	r4,56
 200c34c:	20c07c16 	blt	r4,r3,200c540 <__adddf3+0x67c>
 200c350:	010007c4 	movi	r4,31
 200c354:	20c0da16 	blt	r4,r3,200c6c0 <__adddf3+0x7fc>
 200c358:	01000804 	movi	r4,32
 200c35c:	20c9c83a 	sub	r4,r4,r3
 200c360:	4114983a 	sll	r10,r8,r4
 200c364:	88cad83a 	srl	r5,r17,r3
 200c368:	8908983a 	sll	r4,r17,r4
 200c36c:	40c6d83a 	srl	r3,r8,r3
 200c370:	5162b03a 	or	r17,r10,r5
 200c374:	2008c03a 	cmpne	r4,r4,zero
 200c378:	8922b03a 	or	r17,r17,r4
 200c37c:	3463c83a 	sub	r17,r6,r17
 200c380:	48c7c83a 	sub	r3,r9,r3
 200c384:	344d803a 	cmpltu	r6,r6,r17
 200c388:	1991c83a 	sub	r8,r3,r6
 200c38c:	1021883a 	mov	r16,r2
 200c390:	3825883a 	mov	r18,r7
 200c394:	003f2706 	br	200c034 <__alt_data_end+0xff00c034>
 200c398:	24d0b03a 	or	r8,r4,r19
 200c39c:	40001b1e 	bne	r8,zero,200c40c <__adddf3+0x548>
 200c3a0:	0005883a 	mov	r2,zero
 200c3a4:	0007883a 	mov	r3,zero
 200c3a8:	0021883a 	mov	r16,zero
 200c3ac:	003f4d06 	br	200c0e4 <__alt_data_end+0xff00c0e4>
 200c3b0:	008007c4 	movi	r2,31
 200c3b4:	11003c16 	blt	r2,r4,200c4a8 <__adddf3+0x5e4>
 200c3b8:	00800804 	movi	r2,32
 200c3bc:	1105c83a 	sub	r2,r2,r4
 200c3c0:	488e983a 	sll	r7,r9,r2
 200c3c4:	310ad83a 	srl	r5,r6,r4
 200c3c8:	3084983a 	sll	r2,r6,r2
 200c3cc:	4912d83a 	srl	r9,r9,r4
 200c3d0:	394ab03a 	or	r5,r7,r5
 200c3d4:	1004c03a 	cmpne	r2,r2,zero
 200c3d8:	288ab03a 	or	r5,r5,r2
 200c3dc:	003f5306 	br	200c12c <__alt_data_end+0xff00c12c>
 200c3e0:	4448b03a 	or	r4,r8,r17
 200c3e4:	20003e26 	beq	r4,zero,200c4e0 <__adddf3+0x61c>
 200c3e8:	00c6303a 	nor	r3,zero,r3
 200c3ec:	18003a1e 	bne	r3,zero,200c4d8 <__adddf3+0x614>
 200c3f0:	3463c83a 	sub	r17,r6,r17
 200c3f4:	4a07c83a 	sub	r3,r9,r8
 200c3f8:	344d803a 	cmpltu	r6,r6,r17
 200c3fc:	1991c83a 	sub	r8,r3,r6
 200c400:	1021883a 	mov	r16,r2
 200c404:	3825883a 	mov	r18,r7
 200c408:	003f0a06 	br	200c034 <__alt_data_end+0xff00c034>
 200c40c:	2023883a 	mov	r17,r4
 200c410:	003f0d06 	br	200c048 <__alt_data_end+0xff00c048>
 200c414:	0081ffc4 	movi	r2,2047
 200c418:	80bf3f1e 	bne	r16,r2,200c118 <__alt_data_end+0xff00c118>
 200c41c:	003ec806 	br	200bf40 <__alt_data_end+0xff00bf40>
 200c420:	0005883a 	mov	r2,zero
 200c424:	003fb106 	br	200c2ec <__alt_data_end+0xff00c2ec>
 200c428:	0007883a 	mov	r3,zero
 200c42c:	003fbc06 	br	200c320 <__alt_data_end+0xff00c320>
 200c430:	4444b03a 	or	r2,r8,r17
 200c434:	8000871e 	bne	r16,zero,200c654 <__adddf3+0x790>
 200c438:	1000ba26 	beq	r2,zero,200c724 <__adddf3+0x860>
 200c43c:	4984b03a 	or	r2,r9,r6
 200c440:	103ebf26 	beq	r2,zero,200bf40 <__alt_data_end+0xff00bf40>
 200c444:	8985883a 	add	r2,r17,r6
 200c448:	4247883a 	add	r3,r8,r9
 200c44c:	1451803a 	cmpltu	r8,r2,r17
 200c450:	40d1883a 	add	r8,r8,r3
 200c454:	40c0202c 	andhi	r3,r8,128
 200c458:	1023883a 	mov	r17,r2
 200c45c:	183f1a26 	beq	r3,zero,200c0c8 <__alt_data_end+0xff00c0c8>
 200c460:	00bfe034 	movhi	r2,65408
 200c464:	10bfffc4 	addi	r2,r2,-1
 200c468:	2021883a 	mov	r16,r4
 200c46c:	4090703a 	and	r8,r8,r2
 200c470:	003eb306 	br	200bf40 <__alt_data_end+0xff00bf40>
 200c474:	4444b03a 	or	r2,r8,r17
 200c478:	8000291e 	bne	r16,zero,200c520 <__adddf3+0x65c>
 200c47c:	10004b1e 	bne	r2,zero,200c5ac <__adddf3+0x6e8>
 200c480:	4990b03a 	or	r8,r9,r6
 200c484:	40008b26 	beq	r8,zero,200c6b4 <__adddf3+0x7f0>
 200c488:	4811883a 	mov	r8,r9
 200c48c:	3023883a 	mov	r17,r6
 200c490:	3825883a 	mov	r18,r7
 200c494:	003eaa06 	br	200bf40 <__alt_data_end+0xff00bf40>
 200c498:	1021883a 	mov	r16,r2
 200c49c:	0011883a 	mov	r8,zero
 200c4a0:	0005883a 	mov	r2,zero
 200c4a4:	003f0f06 	br	200c0e4 <__alt_data_end+0xff00c0e4>
 200c4a8:	217ff804 	addi	r5,r4,-32
 200c4ac:	00800804 	movi	r2,32
 200c4b0:	494ad83a 	srl	r5,r9,r5
 200c4b4:	20807d26 	beq	r4,r2,200c6ac <__adddf3+0x7e8>
 200c4b8:	00801004 	movi	r2,64
 200c4bc:	1109c83a 	sub	r4,r2,r4
 200c4c0:	4912983a 	sll	r9,r9,r4
 200c4c4:	498cb03a 	or	r6,r9,r6
 200c4c8:	300cc03a 	cmpne	r6,r6,zero
 200c4cc:	298ab03a 	or	r5,r5,r6
 200c4d0:	0013883a 	mov	r9,zero
 200c4d4:	003f1506 	br	200c12c <__alt_data_end+0xff00c12c>
 200c4d8:	0101ffc4 	movi	r4,2047
 200c4dc:	113f9a1e 	bne	r2,r4,200c348 <__alt_data_end+0xff00c348>
 200c4e0:	4811883a 	mov	r8,r9
 200c4e4:	3023883a 	mov	r17,r6
 200c4e8:	1021883a 	mov	r16,r2
 200c4ec:	3825883a 	mov	r18,r7
 200c4f0:	003e9306 	br	200bf40 <__alt_data_end+0xff00bf40>
 200c4f4:	8000161e 	bne	r16,zero,200c550 <__adddf3+0x68c>
 200c4f8:	444ab03a 	or	r5,r8,r17
 200c4fc:	28005126 	beq	r5,zero,200c644 <__adddf3+0x780>
 200c500:	0108303a 	nor	r4,zero,r4
 200c504:	20004d1e 	bne	r4,zero,200c63c <__adddf3+0x778>
 200c508:	89a3883a 	add	r17,r17,r6
 200c50c:	4253883a 	add	r9,r8,r9
 200c510:	898d803a 	cmpltu	r6,r17,r6
 200c514:	3251883a 	add	r8,r6,r9
 200c518:	1021883a 	mov	r16,r2
 200c51c:	003f0806 	br	200c140 <__alt_data_end+0xff00c140>
 200c520:	1000301e 	bne	r2,zero,200c5e4 <__adddf3+0x720>
 200c524:	4984b03a 	or	r2,r9,r6
 200c528:	10007126 	beq	r2,zero,200c6f0 <__adddf3+0x82c>
 200c52c:	4811883a 	mov	r8,r9
 200c530:	3023883a 	mov	r17,r6
 200c534:	3825883a 	mov	r18,r7
 200c538:	0401ffc4 	movi	r16,2047
 200c53c:	003e8006 	br	200bf40 <__alt_data_end+0xff00bf40>
 200c540:	4462b03a 	or	r17,r8,r17
 200c544:	8822c03a 	cmpne	r17,r17,zero
 200c548:	0007883a 	mov	r3,zero
 200c54c:	003f8b06 	br	200c37c <__alt_data_end+0xff00c37c>
 200c550:	0141ffc4 	movi	r5,2047
 200c554:	11403b26 	beq	r2,r5,200c644 <__adddf3+0x780>
 200c558:	0109c83a 	sub	r4,zero,r4
 200c55c:	42002034 	orhi	r8,r8,128
 200c560:	01400e04 	movi	r5,56
 200c564:	29006716 	blt	r5,r4,200c704 <__adddf3+0x840>
 200c568:	014007c4 	movi	r5,31
 200c56c:	29007016 	blt	r5,r4,200c730 <__adddf3+0x86c>
 200c570:	01400804 	movi	r5,32
 200c574:	290bc83a 	sub	r5,r5,r4
 200c578:	4154983a 	sll	r10,r8,r5
 200c57c:	890ed83a 	srl	r7,r17,r4
 200c580:	894a983a 	sll	r5,r17,r5
 200c584:	4108d83a 	srl	r4,r8,r4
 200c588:	51e2b03a 	or	r17,r10,r7
 200c58c:	280ac03a 	cmpne	r5,r5,zero
 200c590:	8962b03a 	or	r17,r17,r5
 200c594:	89a3883a 	add	r17,r17,r6
 200c598:	2253883a 	add	r9,r4,r9
 200c59c:	898d803a 	cmpltu	r6,r17,r6
 200c5a0:	3251883a 	add	r8,r6,r9
 200c5a4:	1021883a 	mov	r16,r2
 200c5a8:	003ee506 	br	200c140 <__alt_data_end+0xff00c140>
 200c5ac:	4984b03a 	or	r2,r9,r6
 200c5b0:	103e6326 	beq	r2,zero,200bf40 <__alt_data_end+0xff00bf40>
 200c5b4:	8987c83a 	sub	r3,r17,r6
 200c5b8:	88c9803a 	cmpltu	r4,r17,r3
 200c5bc:	4245c83a 	sub	r2,r8,r9
 200c5c0:	1105c83a 	sub	r2,r2,r4
 200c5c4:	1100202c 	andhi	r4,r2,128
 200c5c8:	203ebb26 	beq	r4,zero,200c0b8 <__alt_data_end+0xff00c0b8>
 200c5cc:	3463c83a 	sub	r17,r6,r17
 200c5d0:	4a07c83a 	sub	r3,r9,r8
 200c5d4:	344d803a 	cmpltu	r6,r6,r17
 200c5d8:	1991c83a 	sub	r8,r3,r6
 200c5dc:	3825883a 	mov	r18,r7
 200c5e0:	003e5706 	br	200bf40 <__alt_data_end+0xff00bf40>
 200c5e4:	4984b03a 	or	r2,r9,r6
 200c5e8:	10002e26 	beq	r2,zero,200c6a4 <__adddf3+0x7e0>
 200c5ec:	4004d0fa 	srli	r2,r8,3
 200c5f0:	8822d0fa 	srli	r17,r17,3
 200c5f4:	4010977a 	slli	r8,r8,29
 200c5f8:	10c0022c 	andhi	r3,r2,8
 200c5fc:	4462b03a 	or	r17,r8,r17
 200c600:	18000826 	beq	r3,zero,200c624 <__adddf3+0x760>
 200c604:	4808d0fa 	srli	r4,r9,3
 200c608:	20c0022c 	andhi	r3,r4,8
 200c60c:	1800051e 	bne	r3,zero,200c624 <__adddf3+0x760>
 200c610:	300cd0fa 	srli	r6,r6,3
 200c614:	4806977a 	slli	r3,r9,29
 200c618:	2005883a 	mov	r2,r4
 200c61c:	3825883a 	mov	r18,r7
 200c620:	19a2b03a 	or	r17,r3,r6
 200c624:	8810d77a 	srli	r8,r17,29
 200c628:	100490fa 	slli	r2,r2,3
 200c62c:	882290fa 	slli	r17,r17,3
 200c630:	0401ffc4 	movi	r16,2047
 200c634:	4090b03a 	or	r8,r8,r2
 200c638:	003e4106 	br	200bf40 <__alt_data_end+0xff00bf40>
 200c63c:	0141ffc4 	movi	r5,2047
 200c640:	117fc71e 	bne	r2,r5,200c560 <__alt_data_end+0xff00c560>
 200c644:	4811883a 	mov	r8,r9
 200c648:	3023883a 	mov	r17,r6
 200c64c:	1021883a 	mov	r16,r2
 200c650:	003e3b06 	br	200bf40 <__alt_data_end+0xff00bf40>
 200c654:	10002f26 	beq	r2,zero,200c714 <__adddf3+0x850>
 200c658:	4984b03a 	or	r2,r9,r6
 200c65c:	10001126 	beq	r2,zero,200c6a4 <__adddf3+0x7e0>
 200c660:	4004d0fa 	srli	r2,r8,3
 200c664:	8822d0fa 	srli	r17,r17,3
 200c668:	4010977a 	slli	r8,r8,29
 200c66c:	10c0022c 	andhi	r3,r2,8
 200c670:	4462b03a 	or	r17,r8,r17
 200c674:	183feb26 	beq	r3,zero,200c624 <__alt_data_end+0xff00c624>
 200c678:	4808d0fa 	srli	r4,r9,3
 200c67c:	20c0022c 	andhi	r3,r4,8
 200c680:	183fe81e 	bne	r3,zero,200c624 <__alt_data_end+0xff00c624>
 200c684:	300cd0fa 	srli	r6,r6,3
 200c688:	4806977a 	slli	r3,r9,29
 200c68c:	2005883a 	mov	r2,r4
 200c690:	19a2b03a 	or	r17,r3,r6
 200c694:	003fe306 	br	200c624 <__alt_data_end+0xff00c624>
 200c698:	0011883a 	mov	r8,zero
 200c69c:	0005883a 	mov	r2,zero
 200c6a0:	003e3f06 	br	200bfa0 <__alt_data_end+0xff00bfa0>
 200c6a4:	0401ffc4 	movi	r16,2047
 200c6a8:	003e2506 	br	200bf40 <__alt_data_end+0xff00bf40>
 200c6ac:	0013883a 	mov	r9,zero
 200c6b0:	003f8406 	br	200c4c4 <__alt_data_end+0xff00c4c4>
 200c6b4:	0005883a 	mov	r2,zero
 200c6b8:	0007883a 	mov	r3,zero
 200c6bc:	003e8906 	br	200c0e4 <__alt_data_end+0xff00c0e4>
 200c6c0:	197ff804 	addi	r5,r3,-32
 200c6c4:	01000804 	movi	r4,32
 200c6c8:	414ad83a 	srl	r5,r8,r5
 200c6cc:	19002426 	beq	r3,r4,200c760 <__adddf3+0x89c>
 200c6d0:	01001004 	movi	r4,64
 200c6d4:	20c7c83a 	sub	r3,r4,r3
 200c6d8:	40c6983a 	sll	r3,r8,r3
 200c6dc:	1c46b03a 	or	r3,r3,r17
 200c6e0:	1806c03a 	cmpne	r3,r3,zero
 200c6e4:	28e2b03a 	or	r17,r5,r3
 200c6e8:	0007883a 	mov	r3,zero
 200c6ec:	003f2306 	br	200c37c <__alt_data_end+0xff00c37c>
 200c6f0:	0007883a 	mov	r3,zero
 200c6f4:	5811883a 	mov	r8,r11
 200c6f8:	00bfffc4 	movi	r2,-1
 200c6fc:	0401ffc4 	movi	r16,2047
 200c700:	003e7806 	br	200c0e4 <__alt_data_end+0xff00c0e4>
 200c704:	4462b03a 	or	r17,r8,r17
 200c708:	8822c03a 	cmpne	r17,r17,zero
 200c70c:	0009883a 	mov	r4,zero
 200c710:	003fa006 	br	200c594 <__alt_data_end+0xff00c594>
 200c714:	4811883a 	mov	r8,r9
 200c718:	3023883a 	mov	r17,r6
 200c71c:	0401ffc4 	movi	r16,2047
 200c720:	003e0706 	br	200bf40 <__alt_data_end+0xff00bf40>
 200c724:	4811883a 	mov	r8,r9
 200c728:	3023883a 	mov	r17,r6
 200c72c:	003e0406 	br	200bf40 <__alt_data_end+0xff00bf40>
 200c730:	21fff804 	addi	r7,r4,-32
 200c734:	01400804 	movi	r5,32
 200c738:	41ced83a 	srl	r7,r8,r7
 200c73c:	21400a26 	beq	r4,r5,200c768 <__adddf3+0x8a4>
 200c740:	01401004 	movi	r5,64
 200c744:	2909c83a 	sub	r4,r5,r4
 200c748:	4108983a 	sll	r4,r8,r4
 200c74c:	2448b03a 	or	r4,r4,r17
 200c750:	2008c03a 	cmpne	r4,r4,zero
 200c754:	3922b03a 	or	r17,r7,r4
 200c758:	0009883a 	mov	r4,zero
 200c75c:	003f8d06 	br	200c594 <__alt_data_end+0xff00c594>
 200c760:	0007883a 	mov	r3,zero
 200c764:	003fdd06 	br	200c6dc <__alt_data_end+0xff00c6dc>
 200c768:	0009883a 	mov	r4,zero
 200c76c:	003ff706 	br	200c74c <__alt_data_end+0xff00c74c>

0200c770 <__divdf3>:
 200c770:	defff004 	addi	sp,sp,-64
 200c774:	dc800815 	stw	r18,32(sp)
 200c778:	2824d53a 	srli	r18,r5,20
 200c77c:	dd800c15 	stw	r22,48(sp)
 200c780:	282cd7fa 	srli	r22,r5,31
 200c784:	dc000615 	stw	r16,24(sp)
 200c788:	04000434 	movhi	r16,16
 200c78c:	843fffc4 	addi	r16,r16,-1
 200c790:	dfc00f15 	stw	ra,60(sp)
 200c794:	df000e15 	stw	fp,56(sp)
 200c798:	ddc00d15 	stw	r23,52(sp)
 200c79c:	dd400b15 	stw	r21,44(sp)
 200c7a0:	dd000a15 	stw	r20,40(sp)
 200c7a4:	dcc00915 	stw	r19,36(sp)
 200c7a8:	dc400715 	stw	r17,28(sp)
 200c7ac:	9481ffcc 	andi	r18,r18,2047
 200c7b0:	2c20703a 	and	r16,r5,r16
 200c7b4:	b2003fcc 	andi	r8,r22,255
 200c7b8:	90006126 	beq	r18,zero,200c940 <__divdf3+0x1d0>
 200c7bc:	0081ffc4 	movi	r2,2047
 200c7c0:	202b883a 	mov	r21,r4
 200c7c4:	90803726 	beq	r18,r2,200c8a4 <__divdf3+0x134>
 200c7c8:	80800434 	orhi	r2,r16,16
 200c7cc:	100490fa 	slli	r2,r2,3
 200c7d0:	2020d77a 	srli	r16,r4,29
 200c7d4:	202a90fa 	slli	r21,r4,3
 200c7d8:	94bf0044 	addi	r18,r18,-1023
 200c7dc:	80a0b03a 	or	r16,r16,r2
 200c7e0:	0013883a 	mov	r9,zero
 200c7e4:	000b883a 	mov	r5,zero
 200c7e8:	3806d53a 	srli	r3,r7,20
 200c7ec:	382ed7fa 	srli	r23,r7,31
 200c7f0:	04400434 	movhi	r17,16
 200c7f4:	8c7fffc4 	addi	r17,r17,-1
 200c7f8:	18c1ffcc 	andi	r3,r3,2047
 200c7fc:	3029883a 	mov	r20,r6
 200c800:	3c62703a 	and	r17,r7,r17
 200c804:	bf003fcc 	andi	fp,r23,255
 200c808:	18006e26 	beq	r3,zero,200c9c4 <__divdf3+0x254>
 200c80c:	0081ffc4 	movi	r2,2047
 200c810:	18806626 	beq	r3,r2,200c9ac <__divdf3+0x23c>
 200c814:	88800434 	orhi	r2,r17,16
 200c818:	100490fa 	slli	r2,r2,3
 200c81c:	3022d77a 	srli	r17,r6,29
 200c820:	302890fa 	slli	r20,r6,3
 200c824:	18ff0044 	addi	r3,r3,-1023
 200c828:	88a2b03a 	or	r17,r17,r2
 200c82c:	000f883a 	mov	r7,zero
 200c830:	b5e6f03a 	xor	r19,r22,r23
 200c834:	3a4cb03a 	or	r6,r7,r9
 200c838:	008003c4 	movi	r2,15
 200c83c:	9809883a 	mov	r4,r19
 200c840:	90c7c83a 	sub	r3,r18,r3
 200c844:	9cc03fcc 	andi	r19,r19,255
 200c848:	11809636 	bltu	r2,r6,200caa4 <__divdf3+0x334>
 200c84c:	300c90ba 	slli	r6,r6,2
 200c850:	00808074 	movhi	r2,513
 200c854:	10b21904 	addi	r2,r2,-14236
 200c858:	308d883a 	add	r6,r6,r2
 200c85c:	30800017 	ldw	r2,0(r6)
 200c860:	1000683a 	jmp	r2
 200c864:	0200caa4 	muli	r8,zero,810
 200c868:	0200c8dc 	xori	r8,zero,803
 200c86c:	0200ca94 	movui	r8,810
 200c870:	0200c8d0 	cmplti	r8,zero,803
 200c874:	0200ca94 	movui	r8,810
 200c878:	0200ca68 	cmpgeui	r8,zero,809
 200c87c:	0200ca94 	movui	r8,810
 200c880:	0200c8d0 	cmplti	r8,zero,803
 200c884:	0200c8dc 	xori	r8,zero,803
 200c888:	0200c8dc 	xori	r8,zero,803
 200c88c:	0200ca68 	cmpgeui	r8,zero,809
 200c890:	0200c8d0 	cmplti	r8,zero,803
 200c894:	0200c8c0 	call	200c8c <__alt_mem_onchip_memory2_0+0x200c8c>
 200c898:	0200c8c0 	call	200c8c <__alt_mem_onchip_memory2_0+0x200c8c>
 200c89c:	0200c8c0 	call	200c8c <__alt_mem_onchip_memory2_0+0x200c8c>
 200c8a0:	0200ce2c 	andhi	r8,zero,824
 200c8a4:	2404b03a 	or	r2,r4,r16
 200c8a8:	10006c1e 	bne	r2,zero,200ca5c <__divdf3+0x2ec>
 200c8ac:	02400204 	movi	r9,8
 200c8b0:	0021883a 	mov	r16,zero
 200c8b4:	002b883a 	mov	r21,zero
 200c8b8:	01400084 	movi	r5,2
 200c8bc:	003fca06 	br	200c7e8 <__alt_data_end+0xff00c7e8>
 200c8c0:	8023883a 	mov	r17,r16
 200c8c4:	a829883a 	mov	r20,r21
 200c8c8:	4039883a 	mov	fp,r8
 200c8cc:	280f883a 	mov	r7,r5
 200c8d0:	00800084 	movi	r2,2
 200c8d4:	3881601e 	bne	r7,r2,200ce58 <__divdf3+0x6e8>
 200c8d8:	e027883a 	mov	r19,fp
 200c8dc:	9900004c 	andi	r4,r19,1
 200c8e0:	0081ffc4 	movi	r2,2047
 200c8e4:	0021883a 	mov	r16,zero
 200c8e8:	002b883a 	mov	r21,zero
 200c8ec:	1004953a 	slli	r2,r2,20
 200c8f0:	20c03fcc 	andi	r3,r4,255
 200c8f4:	01400434 	movhi	r5,16
 200c8f8:	297fffc4 	addi	r5,r5,-1
 200c8fc:	180697fa 	slli	r3,r3,31
 200c900:	8160703a 	and	r16,r16,r5
 200c904:	80a0b03a 	or	r16,r16,r2
 200c908:	80c6b03a 	or	r3,r16,r3
 200c90c:	a805883a 	mov	r2,r21
 200c910:	dfc00f17 	ldw	ra,60(sp)
 200c914:	df000e17 	ldw	fp,56(sp)
 200c918:	ddc00d17 	ldw	r23,52(sp)
 200c91c:	dd800c17 	ldw	r22,48(sp)
 200c920:	dd400b17 	ldw	r21,44(sp)
 200c924:	dd000a17 	ldw	r20,40(sp)
 200c928:	dcc00917 	ldw	r19,36(sp)
 200c92c:	dc800817 	ldw	r18,32(sp)
 200c930:	dc400717 	ldw	r17,28(sp)
 200c934:	dc000617 	ldw	r16,24(sp)
 200c938:	dec01004 	addi	sp,sp,64
 200c93c:	f800283a 	ret
 200c940:	2404b03a 	or	r2,r4,r16
 200c944:	2023883a 	mov	r17,r4
 200c948:	10003f26 	beq	r2,zero,200ca48 <__divdf3+0x2d8>
 200c94c:	80015e26 	beq	r16,zero,200cec8 <__divdf3+0x758>
 200c950:	8009883a 	mov	r4,r16
 200c954:	d9800215 	stw	r6,8(sp)
 200c958:	d9c00515 	stw	r7,20(sp)
 200c95c:	da000415 	stw	r8,16(sp)
 200c960:	200e7040 	call	200e704 <__clzsi2>
 200c964:	d9800217 	ldw	r6,8(sp)
 200c968:	d9c00517 	ldw	r7,20(sp)
 200c96c:	da000417 	ldw	r8,16(sp)
 200c970:	113ffd44 	addi	r4,r2,-11
 200c974:	00c00704 	movi	r3,28
 200c978:	19014f16 	blt	r3,r4,200ceb8 <__divdf3+0x748>
 200c97c:	00c00744 	movi	r3,29
 200c980:	157ffe04 	addi	r21,r2,-8
 200c984:	1907c83a 	sub	r3,r3,r4
 200c988:	8560983a 	sll	r16,r16,r21
 200c98c:	88c6d83a 	srl	r3,r17,r3
 200c990:	8d6a983a 	sll	r21,r17,r21
 200c994:	1c20b03a 	or	r16,r3,r16
 200c998:	1080fcc4 	addi	r2,r2,1011
 200c99c:	00a5c83a 	sub	r18,zero,r2
 200c9a0:	0013883a 	mov	r9,zero
 200c9a4:	000b883a 	mov	r5,zero
 200c9a8:	003f8f06 	br	200c7e8 <__alt_data_end+0xff00c7e8>
 200c9ac:	3444b03a 	or	r2,r6,r17
 200c9b0:	1000231e 	bne	r2,zero,200ca40 <__divdf3+0x2d0>
 200c9b4:	0023883a 	mov	r17,zero
 200c9b8:	0029883a 	mov	r20,zero
 200c9bc:	01c00084 	movi	r7,2
 200c9c0:	003f9b06 	br	200c830 <__alt_data_end+0xff00c830>
 200c9c4:	3444b03a 	or	r2,r6,r17
 200c9c8:	10001926 	beq	r2,zero,200ca30 <__divdf3+0x2c0>
 200c9cc:	88014b26 	beq	r17,zero,200cefc <__divdf3+0x78c>
 200c9d0:	8809883a 	mov	r4,r17
 200c9d4:	d9400115 	stw	r5,4(sp)
 200c9d8:	d9800215 	stw	r6,8(sp)
 200c9dc:	da000415 	stw	r8,16(sp)
 200c9e0:	da400315 	stw	r9,12(sp)
 200c9e4:	200e7040 	call	200e704 <__clzsi2>
 200c9e8:	d9400117 	ldw	r5,4(sp)
 200c9ec:	d9800217 	ldw	r6,8(sp)
 200c9f0:	da000417 	ldw	r8,16(sp)
 200c9f4:	da400317 	ldw	r9,12(sp)
 200c9f8:	113ffd44 	addi	r4,r2,-11
 200c9fc:	00c00704 	movi	r3,28
 200ca00:	19013a16 	blt	r3,r4,200ceec <__divdf3+0x77c>
 200ca04:	00c00744 	movi	r3,29
 200ca08:	153ffe04 	addi	r20,r2,-8
 200ca0c:	1907c83a 	sub	r3,r3,r4
 200ca10:	8d22983a 	sll	r17,r17,r20
 200ca14:	30c6d83a 	srl	r3,r6,r3
 200ca18:	3528983a 	sll	r20,r6,r20
 200ca1c:	1c62b03a 	or	r17,r3,r17
 200ca20:	1080fcc4 	addi	r2,r2,1011
 200ca24:	0087c83a 	sub	r3,zero,r2
 200ca28:	000f883a 	mov	r7,zero
 200ca2c:	003f8006 	br	200c830 <__alt_data_end+0xff00c830>
 200ca30:	0023883a 	mov	r17,zero
 200ca34:	0029883a 	mov	r20,zero
 200ca38:	01c00044 	movi	r7,1
 200ca3c:	003f7c06 	br	200c830 <__alt_data_end+0xff00c830>
 200ca40:	01c000c4 	movi	r7,3
 200ca44:	003f7a06 	br	200c830 <__alt_data_end+0xff00c830>
 200ca48:	02400104 	movi	r9,4
 200ca4c:	0021883a 	mov	r16,zero
 200ca50:	002b883a 	mov	r21,zero
 200ca54:	01400044 	movi	r5,1
 200ca58:	003f6306 	br	200c7e8 <__alt_data_end+0xff00c7e8>
 200ca5c:	02400304 	movi	r9,12
 200ca60:	014000c4 	movi	r5,3
 200ca64:	003f6006 	br	200c7e8 <__alt_data_end+0xff00c7e8>
 200ca68:	04000434 	movhi	r16,16
 200ca6c:	0009883a 	mov	r4,zero
 200ca70:	843fffc4 	addi	r16,r16,-1
 200ca74:	057fffc4 	movi	r21,-1
 200ca78:	0081ffc4 	movi	r2,2047
 200ca7c:	003f9b06 	br	200c8ec <__alt_data_end+0xff00c8ec>
 200ca80:	00c00044 	movi	r3,1
 200ca84:	1887c83a 	sub	r3,r3,r2
 200ca88:	01000e04 	movi	r4,56
 200ca8c:	20c1530e 	bge	r4,r3,200cfdc <__divdf3+0x86c>
 200ca90:	9900004c 	andi	r4,r19,1
 200ca94:	0005883a 	mov	r2,zero
 200ca98:	0021883a 	mov	r16,zero
 200ca9c:	002b883a 	mov	r21,zero
 200caa0:	003f9206 	br	200c8ec <__alt_data_end+0xff00c8ec>
 200caa4:	8c012e36 	bltu	r17,r16,200cf60 <__divdf3+0x7f0>
 200caa8:	84412c26 	beq	r16,r17,200cf5c <__divdf3+0x7ec>
 200caac:	a82f883a 	mov	r23,r21
 200cab0:	18ffffc4 	addi	r3,r3,-1
 200cab4:	002b883a 	mov	r21,zero
 200cab8:	a004d63a 	srli	r2,r20,24
 200cabc:	8822923a 	slli	r17,r17,8
 200cac0:	a028923a 	slli	r20,r20,8
 200cac4:	8009883a 	mov	r4,r16
 200cac8:	88acb03a 	or	r22,r17,r2
 200cacc:	dd000015 	stw	r20,0(sp)
 200cad0:	b028d43a 	srli	r20,r22,16
 200cad4:	d8c00215 	stw	r3,8(sp)
 200cad8:	b4bfffcc 	andi	r18,r22,65535
 200cadc:	a00b883a 	mov	r5,r20
 200cae0:	200be080 	call	200be08 <__udivsi3>
 200cae4:	100b883a 	mov	r5,r2
 200cae8:	9009883a 	mov	r4,r18
 200caec:	1023883a 	mov	r17,r2
 200caf0:	20018280 	call	2001828 <__mulsi3>
 200caf4:	8009883a 	mov	r4,r16
 200caf8:	a00b883a 	mov	r5,r20
 200cafc:	1039883a 	mov	fp,r2
 200cb00:	200be6c0 	call	200be6c <__umodsi3>
 200cb04:	1004943a 	slli	r2,r2,16
 200cb08:	b808d43a 	srli	r4,r23,16
 200cb0c:	d8c00217 	ldw	r3,8(sp)
 200cb10:	2084b03a 	or	r2,r4,r2
 200cb14:	1700062e 	bgeu	r2,fp,200cb30 <__divdf3+0x3c0>
 200cb18:	1585883a 	add	r2,r2,r22
 200cb1c:	893fffc4 	addi	r4,r17,-1
 200cb20:	15811d36 	bltu	r2,r22,200cf98 <__divdf3+0x828>
 200cb24:	17011c2e 	bgeu	r2,fp,200cf98 <__divdf3+0x828>
 200cb28:	8c7fff84 	addi	r17,r17,-2
 200cb2c:	1585883a 	add	r2,r2,r22
 200cb30:	1739c83a 	sub	fp,r2,fp
 200cb34:	a00b883a 	mov	r5,r20
 200cb38:	e009883a 	mov	r4,fp
 200cb3c:	d8c00215 	stw	r3,8(sp)
 200cb40:	200be080 	call	200be08 <__udivsi3>
 200cb44:	100b883a 	mov	r5,r2
 200cb48:	9009883a 	mov	r4,r18
 200cb4c:	1021883a 	mov	r16,r2
 200cb50:	20018280 	call	2001828 <__mulsi3>
 200cb54:	a00b883a 	mov	r5,r20
 200cb58:	e009883a 	mov	r4,fp
 200cb5c:	d8800415 	stw	r2,16(sp)
 200cb60:	200be6c0 	call	200be6c <__umodsi3>
 200cb64:	1004943a 	slli	r2,r2,16
 200cb68:	da000417 	ldw	r8,16(sp)
 200cb6c:	bdffffcc 	andi	r23,r23,65535
 200cb70:	b884b03a 	or	r2,r23,r2
 200cb74:	d8c00217 	ldw	r3,8(sp)
 200cb78:	1200062e 	bgeu	r2,r8,200cb94 <__divdf3+0x424>
 200cb7c:	1585883a 	add	r2,r2,r22
 200cb80:	813fffc4 	addi	r4,r16,-1
 200cb84:	15810236 	bltu	r2,r22,200cf90 <__divdf3+0x820>
 200cb88:	1201012e 	bgeu	r2,r8,200cf90 <__divdf3+0x820>
 200cb8c:	843fff84 	addi	r16,r16,-2
 200cb90:	1585883a 	add	r2,r2,r22
 200cb94:	8822943a 	slli	r17,r17,16
 200cb98:	d9800017 	ldw	r6,0(sp)
 200cb9c:	1211c83a 	sub	r8,r2,r8
 200cba0:	8c22b03a 	or	r17,r17,r16
 200cba4:	373fffcc 	andi	fp,r6,65535
 200cba8:	8abfffcc 	andi	r10,r17,65535
 200cbac:	8820d43a 	srli	r16,r17,16
 200cbb0:	5009883a 	mov	r4,r10
 200cbb4:	e00b883a 	mov	r5,fp
 200cbb8:	302ed43a 	srli	r23,r6,16
 200cbbc:	d8c00215 	stw	r3,8(sp)
 200cbc0:	da000415 	stw	r8,16(sp)
 200cbc4:	da800115 	stw	r10,4(sp)
 200cbc8:	20018280 	call	2001828 <__mulsi3>
 200cbcc:	800b883a 	mov	r5,r16
 200cbd0:	e009883a 	mov	r4,fp
 200cbd4:	d8800515 	stw	r2,20(sp)
 200cbd8:	20018280 	call	2001828 <__mulsi3>
 200cbdc:	8009883a 	mov	r4,r16
 200cbe0:	b80b883a 	mov	r5,r23
 200cbe4:	d8800315 	stw	r2,12(sp)
 200cbe8:	20018280 	call	2001828 <__mulsi3>
 200cbec:	da800117 	ldw	r10,4(sp)
 200cbf0:	b80b883a 	mov	r5,r23
 200cbf4:	1021883a 	mov	r16,r2
 200cbf8:	5009883a 	mov	r4,r10
 200cbfc:	20018280 	call	2001828 <__mulsi3>
 200cc00:	d9c00517 	ldw	r7,20(sp)
 200cc04:	da400317 	ldw	r9,12(sp)
 200cc08:	d8c00217 	ldw	r3,8(sp)
 200cc0c:	3808d43a 	srli	r4,r7,16
 200cc10:	1245883a 	add	r2,r2,r9
 200cc14:	da000417 	ldw	r8,16(sp)
 200cc18:	2085883a 	add	r2,r4,r2
 200cc1c:	1240022e 	bgeu	r2,r9,200cc28 <__divdf3+0x4b8>
 200cc20:	01000074 	movhi	r4,1
 200cc24:	8121883a 	add	r16,r16,r4
 200cc28:	1008d43a 	srli	r4,r2,16
 200cc2c:	1004943a 	slli	r2,r2,16
 200cc30:	39ffffcc 	andi	r7,r7,65535
 200cc34:	2409883a 	add	r4,r4,r16
 200cc38:	11c5883a 	add	r2,r2,r7
 200cc3c:	4100bb36 	bltu	r8,r4,200cf2c <__divdf3+0x7bc>
 200cc40:	4100d726 	beq	r8,r4,200cfa0 <__divdf3+0x830>
 200cc44:	4109c83a 	sub	r4,r8,r4
 200cc48:	a8a1c83a 	sub	r16,r21,r2
 200cc4c:	ac2b803a 	cmpltu	r21,r21,r16
 200cc50:	256bc83a 	sub	r21,r4,r21
 200cc54:	b540d926 	beq	r22,r21,200cfbc <__divdf3+0x84c>
 200cc58:	a00b883a 	mov	r5,r20
 200cc5c:	a809883a 	mov	r4,r21
 200cc60:	d8c00215 	stw	r3,8(sp)
 200cc64:	200be080 	call	200be08 <__udivsi3>
 200cc68:	100b883a 	mov	r5,r2
 200cc6c:	9009883a 	mov	r4,r18
 200cc70:	d8800515 	stw	r2,20(sp)
 200cc74:	20018280 	call	2001828 <__mulsi3>
 200cc78:	a809883a 	mov	r4,r21
 200cc7c:	a00b883a 	mov	r5,r20
 200cc80:	d8800415 	stw	r2,16(sp)
 200cc84:	200be6c0 	call	200be6c <__umodsi3>
 200cc88:	1004943a 	slli	r2,r2,16
 200cc8c:	8008d43a 	srli	r4,r16,16
 200cc90:	da000417 	ldw	r8,16(sp)
 200cc94:	d8c00217 	ldw	r3,8(sp)
 200cc98:	2084b03a 	or	r2,r4,r2
 200cc9c:	d9c00517 	ldw	r7,20(sp)
 200cca0:	1200062e 	bgeu	r2,r8,200ccbc <__divdf3+0x54c>
 200cca4:	1585883a 	add	r2,r2,r22
 200cca8:	393fffc4 	addi	r4,r7,-1
 200ccac:	1580c536 	bltu	r2,r22,200cfc4 <__divdf3+0x854>
 200ccb0:	1200c42e 	bgeu	r2,r8,200cfc4 <__divdf3+0x854>
 200ccb4:	39ffff84 	addi	r7,r7,-2
 200ccb8:	1585883a 	add	r2,r2,r22
 200ccbc:	122bc83a 	sub	r21,r2,r8
 200ccc0:	a00b883a 	mov	r5,r20
 200ccc4:	a809883a 	mov	r4,r21
 200ccc8:	d8c00215 	stw	r3,8(sp)
 200cccc:	d9c00515 	stw	r7,20(sp)
 200ccd0:	200be080 	call	200be08 <__udivsi3>
 200ccd4:	9009883a 	mov	r4,r18
 200ccd8:	100b883a 	mov	r5,r2
 200ccdc:	d8800415 	stw	r2,16(sp)
 200cce0:	20018280 	call	2001828 <__mulsi3>
 200cce4:	a809883a 	mov	r4,r21
 200cce8:	a00b883a 	mov	r5,r20
 200ccec:	1025883a 	mov	r18,r2
 200ccf0:	200be6c0 	call	200be6c <__umodsi3>
 200ccf4:	1004943a 	slli	r2,r2,16
 200ccf8:	813fffcc 	andi	r4,r16,65535
 200ccfc:	d8c00217 	ldw	r3,8(sp)
 200cd00:	20a0b03a 	or	r16,r4,r2
 200cd04:	d9c00517 	ldw	r7,20(sp)
 200cd08:	da000417 	ldw	r8,16(sp)
 200cd0c:	8480062e 	bgeu	r16,r18,200cd28 <__divdf3+0x5b8>
 200cd10:	85a1883a 	add	r16,r16,r22
 200cd14:	40bfffc4 	addi	r2,r8,-1
 200cd18:	8580ac36 	bltu	r16,r22,200cfcc <__divdf3+0x85c>
 200cd1c:	8480ab2e 	bgeu	r16,r18,200cfcc <__divdf3+0x85c>
 200cd20:	423fff84 	addi	r8,r8,-2
 200cd24:	85a1883a 	add	r16,r16,r22
 200cd28:	3804943a 	slli	r2,r7,16
 200cd2c:	84a1c83a 	sub	r16,r16,r18
 200cd30:	e009883a 	mov	r4,fp
 200cd34:	1228b03a 	or	r20,r2,r8
 200cd38:	a1ffffcc 	andi	r7,r20,65535
 200cd3c:	a024d43a 	srli	r18,r20,16
 200cd40:	380b883a 	mov	r5,r7
 200cd44:	d8c00215 	stw	r3,8(sp)
 200cd48:	d9c00515 	stw	r7,20(sp)
 200cd4c:	20018280 	call	2001828 <__mulsi3>
 200cd50:	900b883a 	mov	r5,r18
 200cd54:	e009883a 	mov	r4,fp
 200cd58:	102b883a 	mov	r21,r2
 200cd5c:	20018280 	call	2001828 <__mulsi3>
 200cd60:	900b883a 	mov	r5,r18
 200cd64:	b809883a 	mov	r4,r23
 200cd68:	1039883a 	mov	fp,r2
 200cd6c:	20018280 	call	2001828 <__mulsi3>
 200cd70:	d9c00517 	ldw	r7,20(sp)
 200cd74:	b80b883a 	mov	r5,r23
 200cd78:	1025883a 	mov	r18,r2
 200cd7c:	3809883a 	mov	r4,r7
 200cd80:	20018280 	call	2001828 <__mulsi3>
 200cd84:	a808d43a 	srli	r4,r21,16
 200cd88:	1705883a 	add	r2,r2,fp
 200cd8c:	d8c00217 	ldw	r3,8(sp)
 200cd90:	2085883a 	add	r2,r4,r2
 200cd94:	1700022e 	bgeu	r2,fp,200cda0 <__divdf3+0x630>
 200cd98:	01000074 	movhi	r4,1
 200cd9c:	9125883a 	add	r18,r18,r4
 200cda0:	1008d43a 	srli	r4,r2,16
 200cda4:	1004943a 	slli	r2,r2,16
 200cda8:	ad7fffcc 	andi	r21,r21,65535
 200cdac:	2489883a 	add	r4,r4,r18
 200cdb0:	1545883a 	add	r2,r2,r21
 200cdb4:	81003836 	bltu	r16,r4,200ce98 <__divdf3+0x728>
 200cdb8:	81003626 	beq	r16,r4,200ce94 <__divdf3+0x724>
 200cdbc:	a5000054 	ori	r20,r20,1
 200cdc0:	1880ffc4 	addi	r2,r3,1023
 200cdc4:	00bf2e0e 	bge	zero,r2,200ca80 <__alt_data_end+0xff00ca80>
 200cdc8:	a10001cc 	andi	r4,r20,7
 200cdcc:	20000726 	beq	r4,zero,200cdec <__divdf3+0x67c>
 200cdd0:	a10003cc 	andi	r4,r20,15
 200cdd4:	01400104 	movi	r5,4
 200cdd8:	21400426 	beq	r4,r5,200cdec <__divdf3+0x67c>
 200cddc:	a149883a 	add	r4,r20,r5
 200cde0:	2529803a 	cmpltu	r20,r4,r20
 200cde4:	8d23883a 	add	r17,r17,r20
 200cde8:	2029883a 	mov	r20,r4
 200cdec:	8900402c 	andhi	r4,r17,256
 200cdf0:	20000426 	beq	r4,zero,200ce04 <__divdf3+0x694>
 200cdf4:	18810004 	addi	r2,r3,1024
 200cdf8:	00ffc034 	movhi	r3,65280
 200cdfc:	18ffffc4 	addi	r3,r3,-1
 200ce00:	88e2703a 	and	r17,r17,r3
 200ce04:	00c1ff84 	movi	r3,2046
 200ce08:	18beb416 	blt	r3,r2,200c8dc <__alt_data_end+0xff00c8dc>
 200ce0c:	a028d0fa 	srli	r20,r20,3
 200ce10:	882a977a 	slli	r21,r17,29
 200ce14:	8820927a 	slli	r16,r17,9
 200ce18:	1081ffcc 	andi	r2,r2,2047
 200ce1c:	ad2ab03a 	or	r21,r21,r20
 200ce20:	8020d33a 	srli	r16,r16,12
 200ce24:	9900004c 	andi	r4,r19,1
 200ce28:	003eb006 	br	200c8ec <__alt_data_end+0xff00c8ec>
 200ce2c:	8080022c 	andhi	r2,r16,8
 200ce30:	10001226 	beq	r2,zero,200ce7c <__divdf3+0x70c>
 200ce34:	8880022c 	andhi	r2,r17,8
 200ce38:	1000101e 	bne	r2,zero,200ce7c <__divdf3+0x70c>
 200ce3c:	00800434 	movhi	r2,16
 200ce40:	8c000234 	orhi	r16,r17,8
 200ce44:	10bfffc4 	addi	r2,r2,-1
 200ce48:	b809883a 	mov	r4,r23
 200ce4c:	80a0703a 	and	r16,r16,r2
 200ce50:	a02b883a 	mov	r21,r20
 200ce54:	003f0806 	br	200ca78 <__alt_data_end+0xff00ca78>
 200ce58:	008000c4 	movi	r2,3
 200ce5c:	3880b126 	beq	r7,r2,200d124 <__divdf3+0x9b4>
 200ce60:	00800044 	movi	r2,1
 200ce64:	38805b1e 	bne	r7,r2,200cfd4 <__divdf3+0x864>
 200ce68:	e009883a 	mov	r4,fp
 200ce6c:	0005883a 	mov	r2,zero
 200ce70:	0021883a 	mov	r16,zero
 200ce74:	002b883a 	mov	r21,zero
 200ce78:	003e9c06 	br	200c8ec <__alt_data_end+0xff00c8ec>
 200ce7c:	00800434 	movhi	r2,16
 200ce80:	84000234 	orhi	r16,r16,8
 200ce84:	10bfffc4 	addi	r2,r2,-1
 200ce88:	b009883a 	mov	r4,r22
 200ce8c:	80a0703a 	and	r16,r16,r2
 200ce90:	003ef906 	br	200ca78 <__alt_data_end+0xff00ca78>
 200ce94:	103fca26 	beq	r2,zero,200cdc0 <__alt_data_end+0xff00cdc0>
 200ce98:	b421883a 	add	r16,r22,r16
 200ce9c:	a17fffc4 	addi	r5,r20,-1
 200cea0:	8580422e 	bgeu	r16,r22,200cfac <__divdf3+0x83c>
 200cea4:	2829883a 	mov	r20,r5
 200cea8:	813fc41e 	bne	r16,r4,200cdbc <__alt_data_end+0xff00cdbc>
 200ceac:	d9800017 	ldw	r6,0(sp)
 200ceb0:	30bfc21e 	bne	r6,r2,200cdbc <__alt_data_end+0xff00cdbc>
 200ceb4:	003fc206 	br	200cdc0 <__alt_data_end+0xff00cdc0>
 200ceb8:	143ff604 	addi	r16,r2,-40
 200cebc:	8c20983a 	sll	r16,r17,r16
 200cec0:	002b883a 	mov	r21,zero
 200cec4:	003eb406 	br	200c998 <__alt_data_end+0xff00c998>
 200cec8:	d9800215 	stw	r6,8(sp)
 200cecc:	d9c00515 	stw	r7,20(sp)
 200ced0:	da000415 	stw	r8,16(sp)
 200ced4:	200e7040 	call	200e704 <__clzsi2>
 200ced8:	10800804 	addi	r2,r2,32
 200cedc:	da000417 	ldw	r8,16(sp)
 200cee0:	d9c00517 	ldw	r7,20(sp)
 200cee4:	d9800217 	ldw	r6,8(sp)
 200cee8:	003ea106 	br	200c970 <__alt_data_end+0xff00c970>
 200ceec:	147ff604 	addi	r17,r2,-40
 200cef0:	3462983a 	sll	r17,r6,r17
 200cef4:	0029883a 	mov	r20,zero
 200cef8:	003ec906 	br	200ca20 <__alt_data_end+0xff00ca20>
 200cefc:	3009883a 	mov	r4,r6
 200cf00:	d9400115 	stw	r5,4(sp)
 200cf04:	d9800215 	stw	r6,8(sp)
 200cf08:	da000415 	stw	r8,16(sp)
 200cf0c:	da400315 	stw	r9,12(sp)
 200cf10:	200e7040 	call	200e704 <__clzsi2>
 200cf14:	10800804 	addi	r2,r2,32
 200cf18:	da400317 	ldw	r9,12(sp)
 200cf1c:	da000417 	ldw	r8,16(sp)
 200cf20:	d9800217 	ldw	r6,8(sp)
 200cf24:	d9400117 	ldw	r5,4(sp)
 200cf28:	003eb306 	br	200c9f8 <__alt_data_end+0xff00c9f8>
 200cf2c:	d9800017 	ldw	r6,0(sp)
 200cf30:	a9ab883a 	add	r21,r21,r6
 200cf34:	a98b803a 	cmpltu	r5,r21,r6
 200cf38:	2d8b883a 	add	r5,r5,r22
 200cf3c:	2a11883a 	add	r8,r5,r8
 200cf40:	897fffc4 	addi	r5,r17,-1
 200cf44:	b2000c2e 	bgeu	r22,r8,200cf78 <__divdf3+0x808>
 200cf48:	41003f36 	bltu	r8,r4,200d048 <__divdf3+0x8d8>
 200cf4c:	22006c26 	beq	r4,r8,200d100 <__divdf3+0x990>
 200cf50:	4109c83a 	sub	r4,r8,r4
 200cf54:	2823883a 	mov	r17,r5
 200cf58:	003f3b06 	br	200cc48 <__alt_data_end+0xff00cc48>
 200cf5c:	ad3ed336 	bltu	r21,r20,200caac <__alt_data_end+0xff00caac>
 200cf60:	a804d07a 	srli	r2,r21,1
 200cf64:	802e97fa 	slli	r23,r16,31
 200cf68:	a82a97fa 	slli	r21,r21,31
 200cf6c:	8020d07a 	srli	r16,r16,1
 200cf70:	b8aeb03a 	or	r23,r23,r2
 200cf74:	003ed006 	br	200cab8 <__alt_data_end+0xff00cab8>
 200cf78:	b23ff51e 	bne	r22,r8,200cf50 <__alt_data_end+0xff00cf50>
 200cf7c:	d9800017 	ldw	r6,0(sp)
 200cf80:	a9bff12e 	bgeu	r21,r6,200cf48 <__alt_data_end+0xff00cf48>
 200cf84:	b109c83a 	sub	r4,r22,r4
 200cf88:	2823883a 	mov	r17,r5
 200cf8c:	003f2e06 	br	200cc48 <__alt_data_end+0xff00cc48>
 200cf90:	2021883a 	mov	r16,r4
 200cf94:	003eff06 	br	200cb94 <__alt_data_end+0xff00cb94>
 200cf98:	2023883a 	mov	r17,r4
 200cf9c:	003ee406 	br	200cb30 <__alt_data_end+0xff00cb30>
 200cfa0:	a8bfe236 	bltu	r21,r2,200cf2c <__alt_data_end+0xff00cf2c>
 200cfa4:	0009883a 	mov	r4,zero
 200cfa8:	003f2706 	br	200cc48 <__alt_data_end+0xff00cc48>
 200cfac:	81002d36 	bltu	r16,r4,200d064 <__divdf3+0x8f4>
 200cfb0:	24005626 	beq	r4,r16,200d10c <__divdf3+0x99c>
 200cfb4:	2829883a 	mov	r20,r5
 200cfb8:	003f8006 	br	200cdbc <__alt_data_end+0xff00cdbc>
 200cfbc:	053fffc4 	movi	r20,-1
 200cfc0:	003f7f06 	br	200cdc0 <__alt_data_end+0xff00cdc0>
 200cfc4:	200f883a 	mov	r7,r4
 200cfc8:	003f3c06 	br	200ccbc <__alt_data_end+0xff00ccbc>
 200cfcc:	1011883a 	mov	r8,r2
 200cfd0:	003f5506 	br	200cd28 <__alt_data_end+0xff00cd28>
 200cfd4:	e027883a 	mov	r19,fp
 200cfd8:	003f7906 	br	200cdc0 <__alt_data_end+0xff00cdc0>
 200cfdc:	010007c4 	movi	r4,31
 200cfe0:	20c02816 	blt	r4,r3,200d084 <__divdf3+0x914>
 200cfe4:	00800804 	movi	r2,32
 200cfe8:	10c5c83a 	sub	r2,r2,r3
 200cfec:	888a983a 	sll	r5,r17,r2
 200cff0:	a0c8d83a 	srl	r4,r20,r3
 200cff4:	a084983a 	sll	r2,r20,r2
 200cff8:	88e2d83a 	srl	r17,r17,r3
 200cffc:	2906b03a 	or	r3,r5,r4
 200d000:	1004c03a 	cmpne	r2,r2,zero
 200d004:	1886b03a 	or	r3,r3,r2
 200d008:	188001cc 	andi	r2,r3,7
 200d00c:	10000726 	beq	r2,zero,200d02c <__divdf3+0x8bc>
 200d010:	188003cc 	andi	r2,r3,15
 200d014:	01000104 	movi	r4,4
 200d018:	11000426 	beq	r2,r4,200d02c <__divdf3+0x8bc>
 200d01c:	1805883a 	mov	r2,r3
 200d020:	10c00104 	addi	r3,r2,4
 200d024:	1885803a 	cmpltu	r2,r3,r2
 200d028:	88a3883a 	add	r17,r17,r2
 200d02c:	8880202c 	andhi	r2,r17,128
 200d030:	10002926 	beq	r2,zero,200d0d8 <__divdf3+0x968>
 200d034:	9900004c 	andi	r4,r19,1
 200d038:	00800044 	movi	r2,1
 200d03c:	0021883a 	mov	r16,zero
 200d040:	002b883a 	mov	r21,zero
 200d044:	003e2906 	br	200c8ec <__alt_data_end+0xff00c8ec>
 200d048:	d9800017 	ldw	r6,0(sp)
 200d04c:	8c7fff84 	addi	r17,r17,-2
 200d050:	a9ab883a 	add	r21,r21,r6
 200d054:	a98b803a 	cmpltu	r5,r21,r6
 200d058:	2d8b883a 	add	r5,r5,r22
 200d05c:	2a11883a 	add	r8,r5,r8
 200d060:	003ef806 	br	200cc44 <__alt_data_end+0xff00cc44>
 200d064:	d9800017 	ldw	r6,0(sp)
 200d068:	318f883a 	add	r7,r6,r6
 200d06c:	398b803a 	cmpltu	r5,r7,r6
 200d070:	2d8d883a 	add	r6,r5,r22
 200d074:	81a1883a 	add	r16,r16,r6
 200d078:	a17fff84 	addi	r5,r20,-2
 200d07c:	d9c00015 	stw	r7,0(sp)
 200d080:	003f8806 	br	200cea4 <__alt_data_end+0xff00cea4>
 200d084:	013ff844 	movi	r4,-31
 200d088:	2085c83a 	sub	r2,r4,r2
 200d08c:	8888d83a 	srl	r4,r17,r2
 200d090:	00800804 	movi	r2,32
 200d094:	18802126 	beq	r3,r2,200d11c <__divdf3+0x9ac>
 200d098:	04001004 	movi	r16,64
 200d09c:	80c7c83a 	sub	r3,r16,r3
 200d0a0:	88e0983a 	sll	r16,r17,r3
 200d0a4:	8504b03a 	or	r2,r16,r20
 200d0a8:	1004c03a 	cmpne	r2,r2,zero
 200d0ac:	2084b03a 	or	r2,r4,r2
 200d0b0:	144001cc 	andi	r17,r2,7
 200d0b4:	88000d1e 	bne	r17,zero,200d0ec <__divdf3+0x97c>
 200d0b8:	0021883a 	mov	r16,zero
 200d0bc:	102ad0fa 	srli	r21,r2,3
 200d0c0:	9900004c 	andi	r4,r19,1
 200d0c4:	0005883a 	mov	r2,zero
 200d0c8:	ac6ab03a 	or	r21,r21,r17
 200d0cc:	003e0706 	br	200c8ec <__alt_data_end+0xff00c8ec>
 200d0d0:	1007883a 	mov	r3,r2
 200d0d4:	0023883a 	mov	r17,zero
 200d0d8:	8820927a 	slli	r16,r17,9
 200d0dc:	1805883a 	mov	r2,r3
 200d0e0:	8822977a 	slli	r17,r17,29
 200d0e4:	8020d33a 	srli	r16,r16,12
 200d0e8:	003ff406 	br	200d0bc <__alt_data_end+0xff00d0bc>
 200d0ec:	10c003cc 	andi	r3,r2,15
 200d0f0:	01000104 	movi	r4,4
 200d0f4:	193ff626 	beq	r3,r4,200d0d0 <__alt_data_end+0xff00d0d0>
 200d0f8:	0023883a 	mov	r17,zero
 200d0fc:	003fc806 	br	200d020 <__alt_data_end+0xff00d020>
 200d100:	a8bfd136 	bltu	r21,r2,200d048 <__alt_data_end+0xff00d048>
 200d104:	2823883a 	mov	r17,r5
 200d108:	003fa606 	br	200cfa4 <__alt_data_end+0xff00cfa4>
 200d10c:	d9800017 	ldw	r6,0(sp)
 200d110:	30bfd436 	bltu	r6,r2,200d064 <__alt_data_end+0xff00d064>
 200d114:	2829883a 	mov	r20,r5
 200d118:	003f6406 	br	200ceac <__alt_data_end+0xff00ceac>
 200d11c:	0021883a 	mov	r16,zero
 200d120:	003fe006 	br	200d0a4 <__alt_data_end+0xff00d0a4>
 200d124:	00800434 	movhi	r2,16
 200d128:	8c000234 	orhi	r16,r17,8
 200d12c:	10bfffc4 	addi	r2,r2,-1
 200d130:	e009883a 	mov	r4,fp
 200d134:	80a0703a 	and	r16,r16,r2
 200d138:	a02b883a 	mov	r21,r20
 200d13c:	003e4e06 	br	200ca78 <__alt_data_end+0xff00ca78>

0200d140 <__eqdf2>:
 200d140:	2804d53a 	srli	r2,r5,20
 200d144:	3806d53a 	srli	r3,r7,20
 200d148:	02000434 	movhi	r8,16
 200d14c:	423fffc4 	addi	r8,r8,-1
 200d150:	1081ffcc 	andi	r2,r2,2047
 200d154:	0281ffc4 	movi	r10,2047
 200d158:	2a12703a 	and	r9,r5,r8
 200d15c:	18c1ffcc 	andi	r3,r3,2047
 200d160:	3a10703a 	and	r8,r7,r8
 200d164:	280ad7fa 	srli	r5,r5,31
 200d168:	380ed7fa 	srli	r7,r7,31
 200d16c:	12801026 	beq	r2,r10,200d1b0 <__eqdf2+0x70>
 200d170:	0281ffc4 	movi	r10,2047
 200d174:	1a800a26 	beq	r3,r10,200d1a0 <__eqdf2+0x60>
 200d178:	10c00226 	beq	r2,r3,200d184 <__eqdf2+0x44>
 200d17c:	00800044 	movi	r2,1
 200d180:	f800283a 	ret
 200d184:	4a3ffd1e 	bne	r9,r8,200d17c <__alt_data_end+0xff00d17c>
 200d188:	21bffc1e 	bne	r4,r6,200d17c <__alt_data_end+0xff00d17c>
 200d18c:	29c00c26 	beq	r5,r7,200d1c0 <__eqdf2+0x80>
 200d190:	103ffa1e 	bne	r2,zero,200d17c <__alt_data_end+0xff00d17c>
 200d194:	2244b03a 	or	r2,r4,r9
 200d198:	1004c03a 	cmpne	r2,r2,zero
 200d19c:	f800283a 	ret
 200d1a0:	3214b03a 	or	r10,r6,r8
 200d1a4:	503ff426 	beq	r10,zero,200d178 <__alt_data_end+0xff00d178>
 200d1a8:	00800044 	movi	r2,1
 200d1ac:	f800283a 	ret
 200d1b0:	2254b03a 	or	r10,r4,r9
 200d1b4:	503fee26 	beq	r10,zero,200d170 <__alt_data_end+0xff00d170>
 200d1b8:	00800044 	movi	r2,1
 200d1bc:	f800283a 	ret
 200d1c0:	0005883a 	mov	r2,zero
 200d1c4:	f800283a 	ret

0200d1c8 <__gedf2>:
 200d1c8:	2804d53a 	srli	r2,r5,20
 200d1cc:	3806d53a 	srli	r3,r7,20
 200d1d0:	02000434 	movhi	r8,16
 200d1d4:	423fffc4 	addi	r8,r8,-1
 200d1d8:	1081ffcc 	andi	r2,r2,2047
 200d1dc:	0241ffc4 	movi	r9,2047
 200d1e0:	2a14703a 	and	r10,r5,r8
 200d1e4:	18c1ffcc 	andi	r3,r3,2047
 200d1e8:	3a10703a 	and	r8,r7,r8
 200d1ec:	280ad7fa 	srli	r5,r5,31
 200d1f0:	380ed7fa 	srli	r7,r7,31
 200d1f4:	12401d26 	beq	r2,r9,200d26c <__gedf2+0xa4>
 200d1f8:	0241ffc4 	movi	r9,2047
 200d1fc:	1a401226 	beq	r3,r9,200d248 <__gedf2+0x80>
 200d200:	1000081e 	bne	r2,zero,200d224 <__gedf2+0x5c>
 200d204:	2296b03a 	or	r11,r4,r10
 200d208:	5813003a 	cmpeq	r9,r11,zero
 200d20c:	1800091e 	bne	r3,zero,200d234 <__gedf2+0x6c>
 200d210:	3218b03a 	or	r12,r6,r8
 200d214:	6000071e 	bne	r12,zero,200d234 <__gedf2+0x6c>
 200d218:	0005883a 	mov	r2,zero
 200d21c:	5800101e 	bne	r11,zero,200d260 <__gedf2+0x98>
 200d220:	f800283a 	ret
 200d224:	18000c1e 	bne	r3,zero,200d258 <__gedf2+0x90>
 200d228:	3212b03a 	or	r9,r6,r8
 200d22c:	48000c26 	beq	r9,zero,200d260 <__gedf2+0x98>
 200d230:	0013883a 	mov	r9,zero
 200d234:	39c03fcc 	andi	r7,r7,255
 200d238:	48000826 	beq	r9,zero,200d25c <__gedf2+0x94>
 200d23c:	38000926 	beq	r7,zero,200d264 <__gedf2+0x9c>
 200d240:	00800044 	movi	r2,1
 200d244:	f800283a 	ret
 200d248:	3212b03a 	or	r9,r6,r8
 200d24c:	483fec26 	beq	r9,zero,200d200 <__alt_data_end+0xff00d200>
 200d250:	00bfff84 	movi	r2,-2
 200d254:	f800283a 	ret
 200d258:	39c03fcc 	andi	r7,r7,255
 200d25c:	29c00626 	beq	r5,r7,200d278 <__gedf2+0xb0>
 200d260:	283ff726 	beq	r5,zero,200d240 <__alt_data_end+0xff00d240>
 200d264:	00bfffc4 	movi	r2,-1
 200d268:	f800283a 	ret
 200d26c:	2292b03a 	or	r9,r4,r10
 200d270:	483fe126 	beq	r9,zero,200d1f8 <__alt_data_end+0xff00d1f8>
 200d274:	003ff606 	br	200d250 <__alt_data_end+0xff00d250>
 200d278:	18bff916 	blt	r3,r2,200d260 <__alt_data_end+0xff00d260>
 200d27c:	10c00316 	blt	r2,r3,200d28c <__gedf2+0xc4>
 200d280:	42bff736 	bltu	r8,r10,200d260 <__alt_data_end+0xff00d260>
 200d284:	52000326 	beq	r10,r8,200d294 <__gedf2+0xcc>
 200d288:	5200042e 	bgeu	r10,r8,200d29c <__gedf2+0xd4>
 200d28c:	283fec1e 	bne	r5,zero,200d240 <__alt_data_end+0xff00d240>
 200d290:	003ff406 	br	200d264 <__alt_data_end+0xff00d264>
 200d294:	313ff236 	bltu	r6,r4,200d260 <__alt_data_end+0xff00d260>
 200d298:	21bffc36 	bltu	r4,r6,200d28c <__alt_data_end+0xff00d28c>
 200d29c:	0005883a 	mov	r2,zero
 200d2a0:	f800283a 	ret

0200d2a4 <__ledf2>:
 200d2a4:	2804d53a 	srli	r2,r5,20
 200d2a8:	3810d53a 	srli	r8,r7,20
 200d2ac:	00c00434 	movhi	r3,16
 200d2b0:	18ffffc4 	addi	r3,r3,-1
 200d2b4:	1081ffcc 	andi	r2,r2,2047
 200d2b8:	0241ffc4 	movi	r9,2047
 200d2bc:	28d4703a 	and	r10,r5,r3
 200d2c0:	4201ffcc 	andi	r8,r8,2047
 200d2c4:	38c6703a 	and	r3,r7,r3
 200d2c8:	280ad7fa 	srli	r5,r5,31
 200d2cc:	380ed7fa 	srli	r7,r7,31
 200d2d0:	12401f26 	beq	r2,r9,200d350 <__ledf2+0xac>
 200d2d4:	0241ffc4 	movi	r9,2047
 200d2d8:	42401426 	beq	r8,r9,200d32c <__ledf2+0x88>
 200d2dc:	1000091e 	bne	r2,zero,200d304 <__ledf2+0x60>
 200d2e0:	2296b03a 	or	r11,r4,r10
 200d2e4:	5813003a 	cmpeq	r9,r11,zero
 200d2e8:	29403fcc 	andi	r5,r5,255
 200d2ec:	40000a1e 	bne	r8,zero,200d318 <__ledf2+0x74>
 200d2f0:	30d8b03a 	or	r12,r6,r3
 200d2f4:	6000081e 	bne	r12,zero,200d318 <__ledf2+0x74>
 200d2f8:	0005883a 	mov	r2,zero
 200d2fc:	5800111e 	bne	r11,zero,200d344 <__ledf2+0xa0>
 200d300:	f800283a 	ret
 200d304:	29403fcc 	andi	r5,r5,255
 200d308:	40000c1e 	bne	r8,zero,200d33c <__ledf2+0x98>
 200d30c:	30d2b03a 	or	r9,r6,r3
 200d310:	48000c26 	beq	r9,zero,200d344 <__ledf2+0xa0>
 200d314:	0013883a 	mov	r9,zero
 200d318:	39c03fcc 	andi	r7,r7,255
 200d31c:	48000826 	beq	r9,zero,200d340 <__ledf2+0x9c>
 200d320:	38001126 	beq	r7,zero,200d368 <__ledf2+0xc4>
 200d324:	00800044 	movi	r2,1
 200d328:	f800283a 	ret
 200d32c:	30d2b03a 	or	r9,r6,r3
 200d330:	483fea26 	beq	r9,zero,200d2dc <__alt_data_end+0xff00d2dc>
 200d334:	00800084 	movi	r2,2
 200d338:	f800283a 	ret
 200d33c:	39c03fcc 	andi	r7,r7,255
 200d340:	39400726 	beq	r7,r5,200d360 <__ledf2+0xbc>
 200d344:	2800081e 	bne	r5,zero,200d368 <__ledf2+0xc4>
 200d348:	00800044 	movi	r2,1
 200d34c:	f800283a 	ret
 200d350:	2292b03a 	or	r9,r4,r10
 200d354:	483fdf26 	beq	r9,zero,200d2d4 <__alt_data_end+0xff00d2d4>
 200d358:	00800084 	movi	r2,2
 200d35c:	f800283a 	ret
 200d360:	4080030e 	bge	r8,r2,200d370 <__ledf2+0xcc>
 200d364:	383fef26 	beq	r7,zero,200d324 <__alt_data_end+0xff00d324>
 200d368:	00bfffc4 	movi	r2,-1
 200d36c:	f800283a 	ret
 200d370:	123feb16 	blt	r2,r8,200d320 <__alt_data_end+0xff00d320>
 200d374:	1abff336 	bltu	r3,r10,200d344 <__alt_data_end+0xff00d344>
 200d378:	50c00326 	beq	r10,r3,200d388 <__ledf2+0xe4>
 200d37c:	50c0042e 	bgeu	r10,r3,200d390 <__ledf2+0xec>
 200d380:	283fe81e 	bne	r5,zero,200d324 <__alt_data_end+0xff00d324>
 200d384:	003ff806 	br	200d368 <__alt_data_end+0xff00d368>
 200d388:	313fee36 	bltu	r6,r4,200d344 <__alt_data_end+0xff00d344>
 200d38c:	21bffc36 	bltu	r4,r6,200d380 <__alt_data_end+0xff00d380>
 200d390:	0005883a 	mov	r2,zero
 200d394:	f800283a 	ret

0200d398 <__muldf3>:
 200d398:	deffee04 	addi	sp,sp,-72
 200d39c:	dd000c15 	stw	r20,48(sp)
 200d3a0:	2828d53a 	srli	r20,r5,20
 200d3a4:	ddc00f15 	stw	r23,60(sp)
 200d3a8:	282ed7fa 	srli	r23,r5,31
 200d3ac:	dc000815 	stw	r16,32(sp)
 200d3b0:	04000434 	movhi	r16,16
 200d3b4:	dcc00b15 	stw	r19,44(sp)
 200d3b8:	843fffc4 	addi	r16,r16,-1
 200d3bc:	dfc01115 	stw	ra,68(sp)
 200d3c0:	df001015 	stw	fp,64(sp)
 200d3c4:	dd800e15 	stw	r22,56(sp)
 200d3c8:	dd400d15 	stw	r21,52(sp)
 200d3cc:	dc800a15 	stw	r18,40(sp)
 200d3d0:	dc400915 	stw	r17,36(sp)
 200d3d4:	a501ffcc 	andi	r20,r20,2047
 200d3d8:	2c20703a 	and	r16,r5,r16
 200d3dc:	b827883a 	mov	r19,r23
 200d3e0:	ba403fcc 	andi	r9,r23,255
 200d3e4:	a0006026 	beq	r20,zero,200d568 <__muldf3+0x1d0>
 200d3e8:	0081ffc4 	movi	r2,2047
 200d3ec:	202d883a 	mov	r22,r4
 200d3f0:	a0803626 	beq	r20,r2,200d4cc <__muldf3+0x134>
 200d3f4:	84000434 	orhi	r16,r16,16
 200d3f8:	200ad77a 	srli	r5,r4,29
 200d3fc:	800490fa 	slli	r2,r16,3
 200d400:	202c90fa 	slli	r22,r4,3
 200d404:	a53f0044 	addi	r20,r20,-1023
 200d408:	28a0b03a 	or	r16,r5,r2
 200d40c:	002b883a 	mov	r21,zero
 200d410:	000b883a 	mov	r5,zero
 200d414:	3804d53a 	srli	r2,r7,20
 200d418:	3838d7fa 	srli	fp,r7,31
 200d41c:	04400434 	movhi	r17,16
 200d420:	8c7fffc4 	addi	r17,r17,-1
 200d424:	1081ffcc 	andi	r2,r2,2047
 200d428:	3025883a 	mov	r18,r6
 200d42c:	3c62703a 	and	r17,r7,r17
 200d430:	e2803fcc 	andi	r10,fp,255
 200d434:	10006d26 	beq	r2,zero,200d5ec <__muldf3+0x254>
 200d438:	00c1ffc4 	movi	r3,2047
 200d43c:	10c06526 	beq	r2,r3,200d5d4 <__muldf3+0x23c>
 200d440:	8c400434 	orhi	r17,r17,16
 200d444:	300ed77a 	srli	r7,r6,29
 200d448:	880690fa 	slli	r3,r17,3
 200d44c:	302490fa 	slli	r18,r6,3
 200d450:	10bf0044 	addi	r2,r2,-1023
 200d454:	38e2b03a 	or	r17,r7,r3
 200d458:	000f883a 	mov	r7,zero
 200d45c:	a087883a 	add	r3,r20,r2
 200d460:	010003c4 	movi	r4,15
 200d464:	3d44b03a 	or	r2,r7,r21
 200d468:	e5ccf03a 	xor	r6,fp,r23
 200d46c:	1a000044 	addi	r8,r3,1
 200d470:	20809b36 	bltu	r4,r2,200d6e0 <__muldf3+0x348>
 200d474:	100490ba 	slli	r2,r2,2
 200d478:	01008074 	movhi	r4,513
 200d47c:	21352304 	addi	r4,r4,-11124
 200d480:	1105883a 	add	r2,r2,r4
 200d484:	10800017 	ldw	r2,0(r2)
 200d488:	1000683a 	jmp	r2
 200d48c:	0200d6e0 	cmpeqi	r8,zero,859
 200d490:	0200d4ec 	andhi	r8,zero,851
 200d494:	0200d4ec 	andhi	r8,zero,851
 200d498:	0200d4e8 	cmpgeui	r8,zero,851
 200d49c:	0200d6bc 	xorhi	r8,zero,858
 200d4a0:	0200d6bc 	xorhi	r8,zero,858
 200d4a4:	0200d6a4 	muli	r8,zero,858
 200d4a8:	0200d4e8 	cmpgeui	r8,zero,851
 200d4ac:	0200d6bc 	xorhi	r8,zero,858
 200d4b0:	0200d6a4 	muli	r8,zero,858
 200d4b4:	0200d6bc 	xorhi	r8,zero,858
 200d4b8:	0200d4e8 	cmpgeui	r8,zero,851
 200d4bc:	0200d6cc 	andi	r8,zero,859
 200d4c0:	0200d6cc 	andi	r8,zero,859
 200d4c4:	0200d6cc 	andi	r8,zero,859
 200d4c8:	0200da2c 	andhi	r8,zero,872
 200d4cc:	2404b03a 	or	r2,r4,r16
 200d4d0:	1000711e 	bne	r2,zero,200d698 <__muldf3+0x300>
 200d4d4:	05400204 	movi	r21,8
 200d4d8:	0021883a 	mov	r16,zero
 200d4dc:	002d883a 	mov	r22,zero
 200d4e0:	01400084 	movi	r5,2
 200d4e4:	003fcb06 	br	200d414 <__alt_data_end+0xff00d414>
 200d4e8:	500d883a 	mov	r6,r10
 200d4ec:	00800084 	movi	r2,2
 200d4f0:	38805926 	beq	r7,r2,200d658 <__muldf3+0x2c0>
 200d4f4:	008000c4 	movi	r2,3
 200d4f8:	3881bb26 	beq	r7,r2,200dbe8 <__muldf3+0x850>
 200d4fc:	00800044 	movi	r2,1
 200d500:	3881961e 	bne	r7,r2,200db5c <__muldf3+0x7c4>
 200d504:	3027883a 	mov	r19,r6
 200d508:	0005883a 	mov	r2,zero
 200d50c:	0021883a 	mov	r16,zero
 200d510:	002d883a 	mov	r22,zero
 200d514:	1004953a 	slli	r2,r2,20
 200d518:	98c03fcc 	andi	r3,r19,255
 200d51c:	04400434 	movhi	r17,16
 200d520:	8c7fffc4 	addi	r17,r17,-1
 200d524:	180697fa 	slli	r3,r3,31
 200d528:	8460703a 	and	r16,r16,r17
 200d52c:	80a0b03a 	or	r16,r16,r2
 200d530:	80c6b03a 	or	r3,r16,r3
 200d534:	b005883a 	mov	r2,r22
 200d538:	dfc01117 	ldw	ra,68(sp)
 200d53c:	df001017 	ldw	fp,64(sp)
 200d540:	ddc00f17 	ldw	r23,60(sp)
 200d544:	dd800e17 	ldw	r22,56(sp)
 200d548:	dd400d17 	ldw	r21,52(sp)
 200d54c:	dd000c17 	ldw	r20,48(sp)
 200d550:	dcc00b17 	ldw	r19,44(sp)
 200d554:	dc800a17 	ldw	r18,40(sp)
 200d558:	dc400917 	ldw	r17,36(sp)
 200d55c:	dc000817 	ldw	r16,32(sp)
 200d560:	dec01204 	addi	sp,sp,72
 200d564:	f800283a 	ret
 200d568:	2404b03a 	or	r2,r4,r16
 200d56c:	202b883a 	mov	r21,r4
 200d570:	10004426 	beq	r2,zero,200d684 <__muldf3+0x2ec>
 200d574:	80015126 	beq	r16,zero,200dabc <__muldf3+0x724>
 200d578:	8009883a 	mov	r4,r16
 200d57c:	d9800715 	stw	r6,28(sp)
 200d580:	d9c00215 	stw	r7,8(sp)
 200d584:	da400415 	stw	r9,16(sp)
 200d588:	200e7040 	call	200e704 <__clzsi2>
 200d58c:	d9800717 	ldw	r6,28(sp)
 200d590:	d9c00217 	ldw	r7,8(sp)
 200d594:	da400417 	ldw	r9,16(sp)
 200d598:	113ffd44 	addi	r4,r2,-11
 200d59c:	00c00704 	movi	r3,28
 200d5a0:	19014216 	blt	r3,r4,200daac <__muldf3+0x714>
 200d5a4:	00c00744 	movi	r3,29
 200d5a8:	15bffe04 	addi	r22,r2,-8
 200d5ac:	1907c83a 	sub	r3,r3,r4
 200d5b0:	85a0983a 	sll	r16,r16,r22
 200d5b4:	a8c6d83a 	srl	r3,r21,r3
 200d5b8:	adac983a 	sll	r22,r21,r22
 200d5bc:	1c20b03a 	or	r16,r3,r16
 200d5c0:	1080fcc4 	addi	r2,r2,1011
 200d5c4:	00a9c83a 	sub	r20,zero,r2
 200d5c8:	002b883a 	mov	r21,zero
 200d5cc:	000b883a 	mov	r5,zero
 200d5d0:	003f9006 	br	200d414 <__alt_data_end+0xff00d414>
 200d5d4:	3446b03a 	or	r3,r6,r17
 200d5d8:	1800281e 	bne	r3,zero,200d67c <__muldf3+0x2e4>
 200d5dc:	0023883a 	mov	r17,zero
 200d5e0:	0025883a 	mov	r18,zero
 200d5e4:	01c00084 	movi	r7,2
 200d5e8:	003f9c06 	br	200d45c <__alt_data_end+0xff00d45c>
 200d5ec:	3446b03a 	or	r3,r6,r17
 200d5f0:	18001e26 	beq	r3,zero,200d66c <__muldf3+0x2d4>
 200d5f4:	88012126 	beq	r17,zero,200da7c <__muldf3+0x6e4>
 200d5f8:	8809883a 	mov	r4,r17
 200d5fc:	d9400215 	stw	r5,8(sp)
 200d600:	d9800715 	stw	r6,28(sp)
 200d604:	da400415 	stw	r9,16(sp)
 200d608:	da800315 	stw	r10,12(sp)
 200d60c:	200e7040 	call	200e704 <__clzsi2>
 200d610:	d9400217 	ldw	r5,8(sp)
 200d614:	d9800717 	ldw	r6,28(sp)
 200d618:	da400417 	ldw	r9,16(sp)
 200d61c:	da800317 	ldw	r10,12(sp)
 200d620:	113ffd44 	addi	r4,r2,-11
 200d624:	00c00704 	movi	r3,28
 200d628:	19011016 	blt	r3,r4,200da6c <__muldf3+0x6d4>
 200d62c:	00c00744 	movi	r3,29
 200d630:	14bffe04 	addi	r18,r2,-8
 200d634:	1907c83a 	sub	r3,r3,r4
 200d638:	8ca2983a 	sll	r17,r17,r18
 200d63c:	30c6d83a 	srl	r3,r6,r3
 200d640:	34a4983a 	sll	r18,r6,r18
 200d644:	1c62b03a 	or	r17,r3,r17
 200d648:	1080fcc4 	addi	r2,r2,1011
 200d64c:	0085c83a 	sub	r2,zero,r2
 200d650:	000f883a 	mov	r7,zero
 200d654:	003f8106 	br	200d45c <__alt_data_end+0xff00d45c>
 200d658:	3027883a 	mov	r19,r6
 200d65c:	0081ffc4 	movi	r2,2047
 200d660:	0021883a 	mov	r16,zero
 200d664:	002d883a 	mov	r22,zero
 200d668:	003faa06 	br	200d514 <__alt_data_end+0xff00d514>
 200d66c:	0023883a 	mov	r17,zero
 200d670:	0025883a 	mov	r18,zero
 200d674:	01c00044 	movi	r7,1
 200d678:	003f7806 	br	200d45c <__alt_data_end+0xff00d45c>
 200d67c:	01c000c4 	movi	r7,3
 200d680:	003f7606 	br	200d45c <__alt_data_end+0xff00d45c>
 200d684:	05400104 	movi	r21,4
 200d688:	0021883a 	mov	r16,zero
 200d68c:	002d883a 	mov	r22,zero
 200d690:	01400044 	movi	r5,1
 200d694:	003f5f06 	br	200d414 <__alt_data_end+0xff00d414>
 200d698:	05400304 	movi	r21,12
 200d69c:	014000c4 	movi	r5,3
 200d6a0:	003f5c06 	br	200d414 <__alt_data_end+0xff00d414>
 200d6a4:	04000434 	movhi	r16,16
 200d6a8:	0027883a 	mov	r19,zero
 200d6ac:	843fffc4 	addi	r16,r16,-1
 200d6b0:	05bfffc4 	movi	r22,-1
 200d6b4:	0081ffc4 	movi	r2,2047
 200d6b8:	003f9606 	br	200d514 <__alt_data_end+0xff00d514>
 200d6bc:	8023883a 	mov	r17,r16
 200d6c0:	b025883a 	mov	r18,r22
 200d6c4:	280f883a 	mov	r7,r5
 200d6c8:	003f8806 	br	200d4ec <__alt_data_end+0xff00d4ec>
 200d6cc:	8023883a 	mov	r17,r16
 200d6d0:	b025883a 	mov	r18,r22
 200d6d4:	480d883a 	mov	r6,r9
 200d6d8:	280f883a 	mov	r7,r5
 200d6dc:	003f8306 	br	200d4ec <__alt_data_end+0xff00d4ec>
 200d6e0:	b026d43a 	srli	r19,r22,16
 200d6e4:	902ed43a 	srli	r23,r18,16
 200d6e8:	b5bfffcc 	andi	r22,r22,65535
 200d6ec:	94bfffcc 	andi	r18,r18,65535
 200d6f0:	b00b883a 	mov	r5,r22
 200d6f4:	9009883a 	mov	r4,r18
 200d6f8:	d8c00515 	stw	r3,20(sp)
 200d6fc:	d9800715 	stw	r6,28(sp)
 200d700:	da000615 	stw	r8,24(sp)
 200d704:	20018280 	call	2001828 <__mulsi3>
 200d708:	980b883a 	mov	r5,r19
 200d70c:	9009883a 	mov	r4,r18
 200d710:	1029883a 	mov	r20,r2
 200d714:	20018280 	call	2001828 <__mulsi3>
 200d718:	b80b883a 	mov	r5,r23
 200d71c:	9809883a 	mov	r4,r19
 200d720:	102b883a 	mov	r21,r2
 200d724:	20018280 	call	2001828 <__mulsi3>
 200d728:	b809883a 	mov	r4,r23
 200d72c:	b00b883a 	mov	r5,r22
 200d730:	1039883a 	mov	fp,r2
 200d734:	20018280 	call	2001828 <__mulsi3>
 200d738:	a008d43a 	srli	r4,r20,16
 200d73c:	1545883a 	add	r2,r2,r21
 200d740:	d8c00517 	ldw	r3,20(sp)
 200d744:	2085883a 	add	r2,r4,r2
 200d748:	d9800717 	ldw	r6,28(sp)
 200d74c:	da000617 	ldw	r8,24(sp)
 200d750:	1540022e 	bgeu	r2,r21,200d75c <__muldf3+0x3c4>
 200d754:	01000074 	movhi	r4,1
 200d758:	e139883a 	add	fp,fp,r4
 200d75c:	100e943a 	slli	r7,r2,16
 200d760:	1004d43a 	srli	r2,r2,16
 200d764:	882ad43a 	srli	r21,r17,16
 200d768:	a53fffcc 	andi	r20,r20,65535
 200d76c:	8c7fffcc 	andi	r17,r17,65535
 200d770:	3d29883a 	add	r20,r7,r20
 200d774:	b00b883a 	mov	r5,r22
 200d778:	8809883a 	mov	r4,r17
 200d77c:	d8c00515 	stw	r3,20(sp)
 200d780:	d9800715 	stw	r6,28(sp)
 200d784:	da000615 	stw	r8,24(sp)
 200d788:	dd000115 	stw	r20,4(sp)
 200d78c:	d8800015 	stw	r2,0(sp)
 200d790:	20018280 	call	2001828 <__mulsi3>
 200d794:	980b883a 	mov	r5,r19
 200d798:	8809883a 	mov	r4,r17
 200d79c:	d8800215 	stw	r2,8(sp)
 200d7a0:	20018280 	call	2001828 <__mulsi3>
 200d7a4:	9809883a 	mov	r4,r19
 200d7a8:	a80b883a 	mov	r5,r21
 200d7ac:	1029883a 	mov	r20,r2
 200d7b0:	20018280 	call	2001828 <__mulsi3>
 200d7b4:	b00b883a 	mov	r5,r22
 200d7b8:	a809883a 	mov	r4,r21
 200d7bc:	d8800415 	stw	r2,16(sp)
 200d7c0:	20018280 	call	2001828 <__mulsi3>
 200d7c4:	d9c00217 	ldw	r7,8(sp)
 200d7c8:	1505883a 	add	r2,r2,r20
 200d7cc:	d8c00517 	ldw	r3,20(sp)
 200d7d0:	3826d43a 	srli	r19,r7,16
 200d7d4:	d9800717 	ldw	r6,28(sp)
 200d7d8:	da000617 	ldw	r8,24(sp)
 200d7dc:	9885883a 	add	r2,r19,r2
 200d7e0:	da400417 	ldw	r9,16(sp)
 200d7e4:	1500022e 	bgeu	r2,r20,200d7f0 <__muldf3+0x458>
 200d7e8:	01000074 	movhi	r4,1
 200d7ec:	4913883a 	add	r9,r9,r4
 200d7f0:	1028d43a 	srli	r20,r2,16
 200d7f4:	1004943a 	slli	r2,r2,16
 200d7f8:	802cd43a 	srli	r22,r16,16
 200d7fc:	843fffcc 	andi	r16,r16,65535
 200d800:	3cffffcc 	andi	r19,r7,65535
 200d804:	9009883a 	mov	r4,r18
 200d808:	800b883a 	mov	r5,r16
 200d80c:	a269883a 	add	r20,r20,r9
 200d810:	d8c00515 	stw	r3,20(sp)
 200d814:	d9800715 	stw	r6,28(sp)
 200d818:	da000615 	stw	r8,24(sp)
 200d81c:	14e7883a 	add	r19,r2,r19
 200d820:	20018280 	call	2001828 <__mulsi3>
 200d824:	9009883a 	mov	r4,r18
 200d828:	b00b883a 	mov	r5,r22
 200d82c:	d8800315 	stw	r2,12(sp)
 200d830:	20018280 	call	2001828 <__mulsi3>
 200d834:	b809883a 	mov	r4,r23
 200d838:	b00b883a 	mov	r5,r22
 200d83c:	d8800215 	stw	r2,8(sp)
 200d840:	20018280 	call	2001828 <__mulsi3>
 200d844:	b80b883a 	mov	r5,r23
 200d848:	8009883a 	mov	r4,r16
 200d84c:	d8800415 	stw	r2,16(sp)
 200d850:	20018280 	call	2001828 <__mulsi3>
 200d854:	da800317 	ldw	r10,12(sp)
 200d858:	d9c00217 	ldw	r7,8(sp)
 200d85c:	d9000017 	ldw	r4,0(sp)
 200d860:	502ed43a 	srli	r23,r10,16
 200d864:	11c5883a 	add	r2,r2,r7
 200d868:	24e5883a 	add	r18,r4,r19
 200d86c:	b885883a 	add	r2,r23,r2
 200d870:	d8c00517 	ldw	r3,20(sp)
 200d874:	d9800717 	ldw	r6,28(sp)
 200d878:	da000617 	ldw	r8,24(sp)
 200d87c:	da400417 	ldw	r9,16(sp)
 200d880:	11c0022e 	bgeu	r2,r7,200d88c <__muldf3+0x4f4>
 200d884:	01000074 	movhi	r4,1
 200d888:	4913883a 	add	r9,r9,r4
 200d88c:	100ed43a 	srli	r7,r2,16
 200d890:	1004943a 	slli	r2,r2,16
 200d894:	55ffffcc 	andi	r23,r10,65535
 200d898:	3a53883a 	add	r9,r7,r9
 200d89c:	8809883a 	mov	r4,r17
 200d8a0:	800b883a 	mov	r5,r16
 200d8a4:	d8c00515 	stw	r3,20(sp)
 200d8a8:	d9800715 	stw	r6,28(sp)
 200d8ac:	da000615 	stw	r8,24(sp)
 200d8b0:	da400415 	stw	r9,16(sp)
 200d8b4:	15ef883a 	add	r23,r2,r23
 200d8b8:	20018280 	call	2001828 <__mulsi3>
 200d8bc:	8809883a 	mov	r4,r17
 200d8c0:	b00b883a 	mov	r5,r22
 200d8c4:	d8800215 	stw	r2,8(sp)
 200d8c8:	20018280 	call	2001828 <__mulsi3>
 200d8cc:	b00b883a 	mov	r5,r22
 200d8d0:	a809883a 	mov	r4,r21
 200d8d4:	d8800315 	stw	r2,12(sp)
 200d8d8:	20018280 	call	2001828 <__mulsi3>
 200d8dc:	8009883a 	mov	r4,r16
 200d8e0:	a80b883a 	mov	r5,r21
 200d8e4:	1023883a 	mov	r17,r2
 200d8e8:	20018280 	call	2001828 <__mulsi3>
 200d8ec:	d9c00217 	ldw	r7,8(sp)
 200d8f0:	da800317 	ldw	r10,12(sp)
 200d8f4:	d8c00517 	ldw	r3,20(sp)
 200d8f8:	3808d43a 	srli	r4,r7,16
 200d8fc:	1285883a 	add	r2,r2,r10
 200d900:	d9800717 	ldw	r6,28(sp)
 200d904:	2085883a 	add	r2,r4,r2
 200d908:	da000617 	ldw	r8,24(sp)
 200d90c:	da400417 	ldw	r9,16(sp)
 200d910:	1280022e 	bgeu	r2,r10,200d91c <__muldf3+0x584>
 200d914:	01000074 	movhi	r4,1
 200d918:	8923883a 	add	r17,r17,r4
 200d91c:	1008943a 	slli	r4,r2,16
 200d920:	39ffffcc 	andi	r7,r7,65535
 200d924:	e4b9883a 	add	fp,fp,r18
 200d928:	21cf883a 	add	r7,r4,r7
 200d92c:	e4e7803a 	cmpltu	r19,fp,r19
 200d930:	3d0f883a 	add	r7,r7,r20
 200d934:	bf39883a 	add	fp,r23,fp
 200d938:	99c9883a 	add	r4,r19,r7
 200d93c:	e5ef803a 	cmpltu	r23,fp,r23
 200d940:	490b883a 	add	r5,r9,r4
 200d944:	1004d43a 	srli	r2,r2,16
 200d948:	b965883a 	add	r18,r23,r5
 200d94c:	24c9803a 	cmpltu	r4,r4,r19
 200d950:	3d29803a 	cmpltu	r20,r7,r20
 200d954:	a128b03a 	or	r20,r20,r4
 200d958:	95ef803a 	cmpltu	r23,r18,r23
 200d95c:	2a53803a 	cmpltu	r9,r5,r9
 200d960:	a0a9883a 	add	r20,r20,r2
 200d964:	4deeb03a 	or	r23,r9,r23
 200d968:	a5ef883a 	add	r23,r20,r23
 200d96c:	bc63883a 	add	r17,r23,r17
 200d970:	e004927a 	slli	r2,fp,9
 200d974:	d9000117 	ldw	r4,4(sp)
 200d978:	882e927a 	slli	r23,r17,9
 200d97c:	9022d5fa 	srli	r17,r18,23
 200d980:	e038d5fa 	srli	fp,fp,23
 200d984:	1104b03a 	or	r2,r2,r4
 200d988:	9024927a 	slli	r18,r18,9
 200d98c:	1004c03a 	cmpne	r2,r2,zero
 200d990:	bc62b03a 	or	r17,r23,r17
 200d994:	1738b03a 	or	fp,r2,fp
 200d998:	8880402c 	andhi	r2,r17,256
 200d99c:	e4a4b03a 	or	r18,fp,r18
 200d9a0:	10000726 	beq	r2,zero,200d9c0 <__muldf3+0x628>
 200d9a4:	9006d07a 	srli	r3,r18,1
 200d9a8:	880497fa 	slli	r2,r17,31
 200d9ac:	9480004c 	andi	r18,r18,1
 200d9b0:	8822d07a 	srli	r17,r17,1
 200d9b4:	1ca4b03a 	or	r18,r3,r18
 200d9b8:	14a4b03a 	or	r18,r2,r18
 200d9bc:	4007883a 	mov	r3,r8
 200d9c0:	1880ffc4 	addi	r2,r3,1023
 200d9c4:	0080460e 	bge	zero,r2,200dae0 <__muldf3+0x748>
 200d9c8:	910001cc 	andi	r4,r18,7
 200d9cc:	20000726 	beq	r4,zero,200d9ec <__muldf3+0x654>
 200d9d0:	910003cc 	andi	r4,r18,15
 200d9d4:	01400104 	movi	r5,4
 200d9d8:	21400426 	beq	r4,r5,200d9ec <__muldf3+0x654>
 200d9dc:	9149883a 	add	r4,r18,r5
 200d9e0:	24a5803a 	cmpltu	r18,r4,r18
 200d9e4:	8ca3883a 	add	r17,r17,r18
 200d9e8:	2025883a 	mov	r18,r4
 200d9ec:	8900402c 	andhi	r4,r17,256
 200d9f0:	20000426 	beq	r4,zero,200da04 <__muldf3+0x66c>
 200d9f4:	18810004 	addi	r2,r3,1024
 200d9f8:	00ffc034 	movhi	r3,65280
 200d9fc:	18ffffc4 	addi	r3,r3,-1
 200da00:	88e2703a 	and	r17,r17,r3
 200da04:	00c1ff84 	movi	r3,2046
 200da08:	18bf1316 	blt	r3,r2,200d658 <__alt_data_end+0xff00d658>
 200da0c:	882c977a 	slli	r22,r17,29
 200da10:	9024d0fa 	srli	r18,r18,3
 200da14:	8822927a 	slli	r17,r17,9
 200da18:	1081ffcc 	andi	r2,r2,2047
 200da1c:	b4acb03a 	or	r22,r22,r18
 200da20:	8820d33a 	srli	r16,r17,12
 200da24:	3027883a 	mov	r19,r6
 200da28:	003eba06 	br	200d514 <__alt_data_end+0xff00d514>
 200da2c:	8080022c 	andhi	r2,r16,8
 200da30:	10000926 	beq	r2,zero,200da58 <__muldf3+0x6c0>
 200da34:	8880022c 	andhi	r2,r17,8
 200da38:	1000071e 	bne	r2,zero,200da58 <__muldf3+0x6c0>
 200da3c:	00800434 	movhi	r2,16
 200da40:	8c000234 	orhi	r16,r17,8
 200da44:	10bfffc4 	addi	r2,r2,-1
 200da48:	e027883a 	mov	r19,fp
 200da4c:	80a0703a 	and	r16,r16,r2
 200da50:	902d883a 	mov	r22,r18
 200da54:	003f1706 	br	200d6b4 <__alt_data_end+0xff00d6b4>
 200da58:	00800434 	movhi	r2,16
 200da5c:	84000234 	orhi	r16,r16,8
 200da60:	10bfffc4 	addi	r2,r2,-1
 200da64:	80a0703a 	and	r16,r16,r2
 200da68:	003f1206 	br	200d6b4 <__alt_data_end+0xff00d6b4>
 200da6c:	147ff604 	addi	r17,r2,-40
 200da70:	3462983a 	sll	r17,r6,r17
 200da74:	0025883a 	mov	r18,zero
 200da78:	003ef306 	br	200d648 <__alt_data_end+0xff00d648>
 200da7c:	3009883a 	mov	r4,r6
 200da80:	d9400215 	stw	r5,8(sp)
 200da84:	d9800715 	stw	r6,28(sp)
 200da88:	da400415 	stw	r9,16(sp)
 200da8c:	da800315 	stw	r10,12(sp)
 200da90:	200e7040 	call	200e704 <__clzsi2>
 200da94:	10800804 	addi	r2,r2,32
 200da98:	da800317 	ldw	r10,12(sp)
 200da9c:	da400417 	ldw	r9,16(sp)
 200daa0:	d9800717 	ldw	r6,28(sp)
 200daa4:	d9400217 	ldw	r5,8(sp)
 200daa8:	003edd06 	br	200d620 <__alt_data_end+0xff00d620>
 200daac:	143ff604 	addi	r16,r2,-40
 200dab0:	ac20983a 	sll	r16,r21,r16
 200dab4:	002d883a 	mov	r22,zero
 200dab8:	003ec106 	br	200d5c0 <__alt_data_end+0xff00d5c0>
 200dabc:	d9800715 	stw	r6,28(sp)
 200dac0:	d9c00215 	stw	r7,8(sp)
 200dac4:	da400415 	stw	r9,16(sp)
 200dac8:	200e7040 	call	200e704 <__clzsi2>
 200dacc:	10800804 	addi	r2,r2,32
 200dad0:	da400417 	ldw	r9,16(sp)
 200dad4:	d9c00217 	ldw	r7,8(sp)
 200dad8:	d9800717 	ldw	r6,28(sp)
 200dadc:	003eae06 	br	200d598 <__alt_data_end+0xff00d598>
 200dae0:	00c00044 	movi	r3,1
 200dae4:	1887c83a 	sub	r3,r3,r2
 200dae8:	01000e04 	movi	r4,56
 200daec:	20fe8516 	blt	r4,r3,200d504 <__alt_data_end+0xff00d504>
 200daf0:	010007c4 	movi	r4,31
 200daf4:	20c01b16 	blt	r4,r3,200db64 <__muldf3+0x7cc>
 200daf8:	00800804 	movi	r2,32
 200dafc:	10c5c83a 	sub	r2,r2,r3
 200db00:	888a983a 	sll	r5,r17,r2
 200db04:	90c8d83a 	srl	r4,r18,r3
 200db08:	9084983a 	sll	r2,r18,r2
 200db0c:	88e2d83a 	srl	r17,r17,r3
 200db10:	2906b03a 	or	r3,r5,r4
 200db14:	1004c03a 	cmpne	r2,r2,zero
 200db18:	1886b03a 	or	r3,r3,r2
 200db1c:	188001cc 	andi	r2,r3,7
 200db20:	10000726 	beq	r2,zero,200db40 <__muldf3+0x7a8>
 200db24:	188003cc 	andi	r2,r3,15
 200db28:	01000104 	movi	r4,4
 200db2c:	11000426 	beq	r2,r4,200db40 <__muldf3+0x7a8>
 200db30:	1805883a 	mov	r2,r3
 200db34:	10c00104 	addi	r3,r2,4
 200db38:	1885803a 	cmpltu	r2,r3,r2
 200db3c:	88a3883a 	add	r17,r17,r2
 200db40:	8880202c 	andhi	r2,r17,128
 200db44:	10001c26 	beq	r2,zero,200dbb8 <__muldf3+0x820>
 200db48:	3027883a 	mov	r19,r6
 200db4c:	00800044 	movi	r2,1
 200db50:	0021883a 	mov	r16,zero
 200db54:	002d883a 	mov	r22,zero
 200db58:	003e6e06 	br	200d514 <__alt_data_end+0xff00d514>
 200db5c:	4007883a 	mov	r3,r8
 200db60:	003f9706 	br	200d9c0 <__alt_data_end+0xff00d9c0>
 200db64:	017ff844 	movi	r5,-31
 200db68:	2885c83a 	sub	r2,r5,r2
 200db6c:	888ad83a 	srl	r5,r17,r2
 200db70:	00800804 	movi	r2,32
 200db74:	18801a26 	beq	r3,r2,200dbe0 <__muldf3+0x848>
 200db78:	01001004 	movi	r4,64
 200db7c:	20c7c83a 	sub	r3,r4,r3
 200db80:	88e2983a 	sll	r17,r17,r3
 200db84:	8ca4b03a 	or	r18,r17,r18
 200db88:	9004c03a 	cmpne	r2,r18,zero
 200db8c:	2884b03a 	or	r2,r5,r2
 200db90:	144001cc 	andi	r17,r2,7
 200db94:	88000d1e 	bne	r17,zero,200dbcc <__muldf3+0x834>
 200db98:	0021883a 	mov	r16,zero
 200db9c:	102cd0fa 	srli	r22,r2,3
 200dba0:	3027883a 	mov	r19,r6
 200dba4:	0005883a 	mov	r2,zero
 200dba8:	b46cb03a 	or	r22,r22,r17
 200dbac:	003e5906 	br	200d514 <__alt_data_end+0xff00d514>
 200dbb0:	1007883a 	mov	r3,r2
 200dbb4:	0023883a 	mov	r17,zero
 200dbb8:	8820927a 	slli	r16,r17,9
 200dbbc:	1805883a 	mov	r2,r3
 200dbc0:	8822977a 	slli	r17,r17,29
 200dbc4:	8020d33a 	srli	r16,r16,12
 200dbc8:	003ff406 	br	200db9c <__alt_data_end+0xff00db9c>
 200dbcc:	10c003cc 	andi	r3,r2,15
 200dbd0:	01000104 	movi	r4,4
 200dbd4:	193ff626 	beq	r3,r4,200dbb0 <__alt_data_end+0xff00dbb0>
 200dbd8:	0023883a 	mov	r17,zero
 200dbdc:	003fd506 	br	200db34 <__alt_data_end+0xff00db34>
 200dbe0:	0023883a 	mov	r17,zero
 200dbe4:	003fe706 	br	200db84 <__alt_data_end+0xff00db84>
 200dbe8:	00800434 	movhi	r2,16
 200dbec:	8c000234 	orhi	r16,r17,8
 200dbf0:	10bfffc4 	addi	r2,r2,-1
 200dbf4:	3027883a 	mov	r19,r6
 200dbf8:	80a0703a 	and	r16,r16,r2
 200dbfc:	902d883a 	mov	r22,r18
 200dc00:	003eac06 	br	200d6b4 <__alt_data_end+0xff00d6b4>

0200dc04 <__subdf3>:
 200dc04:	02000434 	movhi	r8,16
 200dc08:	423fffc4 	addi	r8,r8,-1
 200dc0c:	defffb04 	addi	sp,sp,-20
 200dc10:	2a14703a 	and	r10,r5,r8
 200dc14:	3812d53a 	srli	r9,r7,20
 200dc18:	3a10703a 	and	r8,r7,r8
 200dc1c:	2006d77a 	srli	r3,r4,29
 200dc20:	3004d77a 	srli	r2,r6,29
 200dc24:	dc000015 	stw	r16,0(sp)
 200dc28:	501490fa 	slli	r10,r10,3
 200dc2c:	2820d53a 	srli	r16,r5,20
 200dc30:	401090fa 	slli	r8,r8,3
 200dc34:	dc800215 	stw	r18,8(sp)
 200dc38:	dc400115 	stw	r17,4(sp)
 200dc3c:	dfc00415 	stw	ra,16(sp)
 200dc40:	202290fa 	slli	r17,r4,3
 200dc44:	dcc00315 	stw	r19,12(sp)
 200dc48:	4a41ffcc 	andi	r9,r9,2047
 200dc4c:	0101ffc4 	movi	r4,2047
 200dc50:	2824d7fa 	srli	r18,r5,31
 200dc54:	8401ffcc 	andi	r16,r16,2047
 200dc58:	50c6b03a 	or	r3,r10,r3
 200dc5c:	380ed7fa 	srli	r7,r7,31
 200dc60:	408ab03a 	or	r5,r8,r2
 200dc64:	300c90fa 	slli	r6,r6,3
 200dc68:	49009626 	beq	r9,r4,200dec4 <__subdf3+0x2c0>
 200dc6c:	39c0005c 	xori	r7,r7,1
 200dc70:	8245c83a 	sub	r2,r16,r9
 200dc74:	3c807426 	beq	r7,r18,200de48 <__subdf3+0x244>
 200dc78:	0080af0e 	bge	zero,r2,200df38 <__subdf3+0x334>
 200dc7c:	48002a1e 	bne	r9,zero,200dd28 <__subdf3+0x124>
 200dc80:	2988b03a 	or	r4,r5,r6
 200dc84:	20009a1e 	bne	r4,zero,200def0 <__subdf3+0x2ec>
 200dc88:	888001cc 	andi	r2,r17,7
 200dc8c:	10000726 	beq	r2,zero,200dcac <__subdf3+0xa8>
 200dc90:	888003cc 	andi	r2,r17,15
 200dc94:	01000104 	movi	r4,4
 200dc98:	11000426 	beq	r2,r4,200dcac <__subdf3+0xa8>
 200dc9c:	890b883a 	add	r5,r17,r4
 200dca0:	2c63803a 	cmpltu	r17,r5,r17
 200dca4:	1c47883a 	add	r3,r3,r17
 200dca8:	2823883a 	mov	r17,r5
 200dcac:	1880202c 	andhi	r2,r3,128
 200dcb0:	10005926 	beq	r2,zero,200de18 <__subdf3+0x214>
 200dcb4:	84000044 	addi	r16,r16,1
 200dcb8:	0081ffc4 	movi	r2,2047
 200dcbc:	8080be26 	beq	r16,r2,200dfb8 <__subdf3+0x3b4>
 200dcc0:	017fe034 	movhi	r5,65408
 200dcc4:	297fffc4 	addi	r5,r5,-1
 200dcc8:	1946703a 	and	r3,r3,r5
 200dccc:	1804977a 	slli	r2,r3,29
 200dcd0:	1806927a 	slli	r3,r3,9
 200dcd4:	8822d0fa 	srli	r17,r17,3
 200dcd8:	8401ffcc 	andi	r16,r16,2047
 200dcdc:	180ad33a 	srli	r5,r3,12
 200dce0:	9100004c 	andi	r4,r18,1
 200dce4:	1444b03a 	or	r2,r2,r17
 200dce8:	80c1ffcc 	andi	r3,r16,2047
 200dcec:	1820953a 	slli	r16,r3,20
 200dcf0:	20c03fcc 	andi	r3,r4,255
 200dcf4:	180897fa 	slli	r4,r3,31
 200dcf8:	00c00434 	movhi	r3,16
 200dcfc:	18ffffc4 	addi	r3,r3,-1
 200dd00:	28c6703a 	and	r3,r5,r3
 200dd04:	1c06b03a 	or	r3,r3,r16
 200dd08:	1906b03a 	or	r3,r3,r4
 200dd0c:	dfc00417 	ldw	ra,16(sp)
 200dd10:	dcc00317 	ldw	r19,12(sp)
 200dd14:	dc800217 	ldw	r18,8(sp)
 200dd18:	dc400117 	ldw	r17,4(sp)
 200dd1c:	dc000017 	ldw	r16,0(sp)
 200dd20:	dec00504 	addi	sp,sp,20
 200dd24:	f800283a 	ret
 200dd28:	0101ffc4 	movi	r4,2047
 200dd2c:	813fd626 	beq	r16,r4,200dc88 <__alt_data_end+0xff00dc88>
 200dd30:	29402034 	orhi	r5,r5,128
 200dd34:	01000e04 	movi	r4,56
 200dd38:	2080a316 	blt	r4,r2,200dfc8 <__subdf3+0x3c4>
 200dd3c:	010007c4 	movi	r4,31
 200dd40:	2080c616 	blt	r4,r2,200e05c <__subdf3+0x458>
 200dd44:	01000804 	movi	r4,32
 200dd48:	2089c83a 	sub	r4,r4,r2
 200dd4c:	2910983a 	sll	r8,r5,r4
 200dd50:	308ed83a 	srl	r7,r6,r2
 200dd54:	3108983a 	sll	r4,r6,r4
 200dd58:	2884d83a 	srl	r2,r5,r2
 200dd5c:	41ccb03a 	or	r6,r8,r7
 200dd60:	2008c03a 	cmpne	r4,r4,zero
 200dd64:	310cb03a 	or	r6,r6,r4
 200dd68:	898dc83a 	sub	r6,r17,r6
 200dd6c:	89a3803a 	cmpltu	r17,r17,r6
 200dd70:	1887c83a 	sub	r3,r3,r2
 200dd74:	1c47c83a 	sub	r3,r3,r17
 200dd78:	3023883a 	mov	r17,r6
 200dd7c:	1880202c 	andhi	r2,r3,128
 200dd80:	10002326 	beq	r2,zero,200de10 <__subdf3+0x20c>
 200dd84:	04c02034 	movhi	r19,128
 200dd88:	9cffffc4 	addi	r19,r19,-1
 200dd8c:	1ce6703a 	and	r19,r3,r19
 200dd90:	98007a26 	beq	r19,zero,200df7c <__subdf3+0x378>
 200dd94:	9809883a 	mov	r4,r19
 200dd98:	200e7040 	call	200e704 <__clzsi2>
 200dd9c:	113ffe04 	addi	r4,r2,-8
 200dda0:	00c007c4 	movi	r3,31
 200dda4:	19007b16 	blt	r3,r4,200df94 <__subdf3+0x390>
 200dda8:	00800804 	movi	r2,32
 200ddac:	1105c83a 	sub	r2,r2,r4
 200ddb0:	8884d83a 	srl	r2,r17,r2
 200ddb4:	9906983a 	sll	r3,r19,r4
 200ddb8:	8922983a 	sll	r17,r17,r4
 200ddbc:	10c4b03a 	or	r2,r2,r3
 200ddc0:	24007816 	blt	r4,r16,200dfa4 <__subdf3+0x3a0>
 200ddc4:	2421c83a 	sub	r16,r4,r16
 200ddc8:	80c00044 	addi	r3,r16,1
 200ddcc:	010007c4 	movi	r4,31
 200ddd0:	20c09516 	blt	r4,r3,200e028 <__subdf3+0x424>
 200ddd4:	01400804 	movi	r5,32
 200ddd8:	28cbc83a 	sub	r5,r5,r3
 200dddc:	88c8d83a 	srl	r4,r17,r3
 200dde0:	8962983a 	sll	r17,r17,r5
 200dde4:	114a983a 	sll	r5,r2,r5
 200dde8:	10c6d83a 	srl	r3,r2,r3
 200ddec:	8804c03a 	cmpne	r2,r17,zero
 200ddf0:	290ab03a 	or	r5,r5,r4
 200ddf4:	28a2b03a 	or	r17,r5,r2
 200ddf8:	0021883a 	mov	r16,zero
 200ddfc:	003fa206 	br	200dc88 <__alt_data_end+0xff00dc88>
 200de00:	2090b03a 	or	r8,r4,r2
 200de04:	40018e26 	beq	r8,zero,200e440 <__subdf3+0x83c>
 200de08:	1007883a 	mov	r3,r2
 200de0c:	2023883a 	mov	r17,r4
 200de10:	888001cc 	andi	r2,r17,7
 200de14:	103f9e1e 	bne	r2,zero,200dc90 <__alt_data_end+0xff00dc90>
 200de18:	1804977a 	slli	r2,r3,29
 200de1c:	8822d0fa 	srli	r17,r17,3
 200de20:	1810d0fa 	srli	r8,r3,3
 200de24:	9100004c 	andi	r4,r18,1
 200de28:	1444b03a 	or	r2,r2,r17
 200de2c:	00c1ffc4 	movi	r3,2047
 200de30:	80c02826 	beq	r16,r3,200ded4 <__subdf3+0x2d0>
 200de34:	01400434 	movhi	r5,16
 200de38:	297fffc4 	addi	r5,r5,-1
 200de3c:	80e0703a 	and	r16,r16,r3
 200de40:	414a703a 	and	r5,r8,r5
 200de44:	003fa806 	br	200dce8 <__alt_data_end+0xff00dce8>
 200de48:	0080630e 	bge	zero,r2,200dfd8 <__subdf3+0x3d4>
 200de4c:	48003026 	beq	r9,zero,200df10 <__subdf3+0x30c>
 200de50:	0101ffc4 	movi	r4,2047
 200de54:	813f8c26 	beq	r16,r4,200dc88 <__alt_data_end+0xff00dc88>
 200de58:	29402034 	orhi	r5,r5,128
 200de5c:	01000e04 	movi	r4,56
 200de60:	2080a90e 	bge	r4,r2,200e108 <__subdf3+0x504>
 200de64:	298cb03a 	or	r6,r5,r6
 200de68:	3012c03a 	cmpne	r9,r6,zero
 200de6c:	0005883a 	mov	r2,zero
 200de70:	4c53883a 	add	r9,r9,r17
 200de74:	4c63803a 	cmpltu	r17,r9,r17
 200de78:	10c7883a 	add	r3,r2,r3
 200de7c:	88c7883a 	add	r3,r17,r3
 200de80:	4823883a 	mov	r17,r9
 200de84:	1880202c 	andhi	r2,r3,128
 200de88:	1000d026 	beq	r2,zero,200e1cc <__subdf3+0x5c8>
 200de8c:	84000044 	addi	r16,r16,1
 200de90:	0081ffc4 	movi	r2,2047
 200de94:	8080fe26 	beq	r16,r2,200e290 <__subdf3+0x68c>
 200de98:	00bfe034 	movhi	r2,65408
 200de9c:	10bfffc4 	addi	r2,r2,-1
 200dea0:	1886703a 	and	r3,r3,r2
 200dea4:	880ad07a 	srli	r5,r17,1
 200dea8:	180497fa 	slli	r2,r3,31
 200deac:	8900004c 	andi	r4,r17,1
 200deb0:	2922b03a 	or	r17,r5,r4
 200deb4:	1806d07a 	srli	r3,r3,1
 200deb8:	1462b03a 	or	r17,r2,r17
 200debc:	3825883a 	mov	r18,r7
 200dec0:	003f7106 	br	200dc88 <__alt_data_end+0xff00dc88>
 200dec4:	2984b03a 	or	r2,r5,r6
 200dec8:	103f6826 	beq	r2,zero,200dc6c <__alt_data_end+0xff00dc6c>
 200decc:	39c03fcc 	andi	r7,r7,255
 200ded0:	003f6706 	br	200dc70 <__alt_data_end+0xff00dc70>
 200ded4:	4086b03a 	or	r3,r8,r2
 200ded8:	18015226 	beq	r3,zero,200e424 <__subdf3+0x820>
 200dedc:	00c00434 	movhi	r3,16
 200dee0:	41400234 	orhi	r5,r8,8
 200dee4:	18ffffc4 	addi	r3,r3,-1
 200dee8:	28ca703a 	and	r5,r5,r3
 200deec:	003f7e06 	br	200dce8 <__alt_data_end+0xff00dce8>
 200def0:	10bfffc4 	addi	r2,r2,-1
 200def4:	1000491e 	bne	r2,zero,200e01c <__subdf3+0x418>
 200def8:	898fc83a 	sub	r7,r17,r6
 200defc:	89e3803a 	cmpltu	r17,r17,r7
 200df00:	1947c83a 	sub	r3,r3,r5
 200df04:	1c47c83a 	sub	r3,r3,r17
 200df08:	3823883a 	mov	r17,r7
 200df0c:	003f9b06 	br	200dd7c <__alt_data_end+0xff00dd7c>
 200df10:	2988b03a 	or	r4,r5,r6
 200df14:	203f5c26 	beq	r4,zero,200dc88 <__alt_data_end+0xff00dc88>
 200df18:	10bfffc4 	addi	r2,r2,-1
 200df1c:	1000931e 	bne	r2,zero,200e16c <__subdf3+0x568>
 200df20:	898d883a 	add	r6,r17,r6
 200df24:	3463803a 	cmpltu	r17,r6,r17
 200df28:	1947883a 	add	r3,r3,r5
 200df2c:	88c7883a 	add	r3,r17,r3
 200df30:	3023883a 	mov	r17,r6
 200df34:	003fd306 	br	200de84 <__alt_data_end+0xff00de84>
 200df38:	1000541e 	bne	r2,zero,200e08c <__subdf3+0x488>
 200df3c:	80800044 	addi	r2,r16,1
 200df40:	1081ffcc 	andi	r2,r2,2047
 200df44:	01000044 	movi	r4,1
 200df48:	2080a20e 	bge	r4,r2,200e1d4 <__subdf3+0x5d0>
 200df4c:	8989c83a 	sub	r4,r17,r6
 200df50:	8905803a 	cmpltu	r2,r17,r4
 200df54:	1967c83a 	sub	r19,r3,r5
 200df58:	98a7c83a 	sub	r19,r19,r2
 200df5c:	9880202c 	andhi	r2,r19,128
 200df60:	10006326 	beq	r2,zero,200e0f0 <__subdf3+0x4ec>
 200df64:	3463c83a 	sub	r17,r6,r17
 200df68:	28c7c83a 	sub	r3,r5,r3
 200df6c:	344d803a 	cmpltu	r6,r6,r17
 200df70:	19a7c83a 	sub	r19,r3,r6
 200df74:	3825883a 	mov	r18,r7
 200df78:	983f861e 	bne	r19,zero,200dd94 <__alt_data_end+0xff00dd94>
 200df7c:	8809883a 	mov	r4,r17
 200df80:	200e7040 	call	200e704 <__clzsi2>
 200df84:	10800804 	addi	r2,r2,32
 200df88:	113ffe04 	addi	r4,r2,-8
 200df8c:	00c007c4 	movi	r3,31
 200df90:	193f850e 	bge	r3,r4,200dda8 <__alt_data_end+0xff00dda8>
 200df94:	10bff604 	addi	r2,r2,-40
 200df98:	8884983a 	sll	r2,r17,r2
 200df9c:	0023883a 	mov	r17,zero
 200dfa0:	243f880e 	bge	r4,r16,200ddc4 <__alt_data_end+0xff00ddc4>
 200dfa4:	00ffe034 	movhi	r3,65408
 200dfa8:	18ffffc4 	addi	r3,r3,-1
 200dfac:	8121c83a 	sub	r16,r16,r4
 200dfb0:	10c6703a 	and	r3,r2,r3
 200dfb4:	003f3406 	br	200dc88 <__alt_data_end+0xff00dc88>
 200dfb8:	9100004c 	andi	r4,r18,1
 200dfbc:	000b883a 	mov	r5,zero
 200dfc0:	0005883a 	mov	r2,zero
 200dfc4:	003f4806 	br	200dce8 <__alt_data_end+0xff00dce8>
 200dfc8:	298cb03a 	or	r6,r5,r6
 200dfcc:	300cc03a 	cmpne	r6,r6,zero
 200dfd0:	0005883a 	mov	r2,zero
 200dfd4:	003f6406 	br	200dd68 <__alt_data_end+0xff00dd68>
 200dfd8:	10009a1e 	bne	r2,zero,200e244 <__subdf3+0x640>
 200dfdc:	82400044 	addi	r9,r16,1
 200dfe0:	4881ffcc 	andi	r2,r9,2047
 200dfe4:	02800044 	movi	r10,1
 200dfe8:	5080670e 	bge	r10,r2,200e188 <__subdf3+0x584>
 200dfec:	0081ffc4 	movi	r2,2047
 200dff0:	4880af26 	beq	r9,r2,200e2b0 <__subdf3+0x6ac>
 200dff4:	898d883a 	add	r6,r17,r6
 200dff8:	1945883a 	add	r2,r3,r5
 200dffc:	3447803a 	cmpltu	r3,r6,r17
 200e000:	1887883a 	add	r3,r3,r2
 200e004:	182297fa 	slli	r17,r3,31
 200e008:	300cd07a 	srli	r6,r6,1
 200e00c:	1806d07a 	srli	r3,r3,1
 200e010:	4821883a 	mov	r16,r9
 200e014:	89a2b03a 	or	r17,r17,r6
 200e018:	003f1b06 	br	200dc88 <__alt_data_end+0xff00dc88>
 200e01c:	0101ffc4 	movi	r4,2047
 200e020:	813f441e 	bne	r16,r4,200dd34 <__alt_data_end+0xff00dd34>
 200e024:	003f1806 	br	200dc88 <__alt_data_end+0xff00dc88>
 200e028:	843ff844 	addi	r16,r16,-31
 200e02c:	01400804 	movi	r5,32
 200e030:	1408d83a 	srl	r4,r2,r16
 200e034:	19405026 	beq	r3,r5,200e178 <__subdf3+0x574>
 200e038:	01401004 	movi	r5,64
 200e03c:	28c7c83a 	sub	r3,r5,r3
 200e040:	10c4983a 	sll	r2,r2,r3
 200e044:	88a2b03a 	or	r17,r17,r2
 200e048:	8822c03a 	cmpne	r17,r17,zero
 200e04c:	2462b03a 	or	r17,r4,r17
 200e050:	0007883a 	mov	r3,zero
 200e054:	0021883a 	mov	r16,zero
 200e058:	003f6d06 	br	200de10 <__alt_data_end+0xff00de10>
 200e05c:	11fff804 	addi	r7,r2,-32
 200e060:	01000804 	movi	r4,32
 200e064:	29ced83a 	srl	r7,r5,r7
 200e068:	11004526 	beq	r2,r4,200e180 <__subdf3+0x57c>
 200e06c:	01001004 	movi	r4,64
 200e070:	2089c83a 	sub	r4,r4,r2
 200e074:	2904983a 	sll	r2,r5,r4
 200e078:	118cb03a 	or	r6,r2,r6
 200e07c:	300cc03a 	cmpne	r6,r6,zero
 200e080:	398cb03a 	or	r6,r7,r6
 200e084:	0005883a 	mov	r2,zero
 200e088:	003f3706 	br	200dd68 <__alt_data_end+0xff00dd68>
 200e08c:	80002a26 	beq	r16,zero,200e138 <__subdf3+0x534>
 200e090:	0101ffc4 	movi	r4,2047
 200e094:	49006626 	beq	r9,r4,200e230 <__subdf3+0x62c>
 200e098:	0085c83a 	sub	r2,zero,r2
 200e09c:	18c02034 	orhi	r3,r3,128
 200e0a0:	01000e04 	movi	r4,56
 200e0a4:	20807e16 	blt	r4,r2,200e2a0 <__subdf3+0x69c>
 200e0a8:	010007c4 	movi	r4,31
 200e0ac:	2080e716 	blt	r4,r2,200e44c <__subdf3+0x848>
 200e0b0:	01000804 	movi	r4,32
 200e0b4:	2089c83a 	sub	r4,r4,r2
 200e0b8:	1914983a 	sll	r10,r3,r4
 200e0bc:	8890d83a 	srl	r8,r17,r2
 200e0c0:	8908983a 	sll	r4,r17,r4
 200e0c4:	1884d83a 	srl	r2,r3,r2
 200e0c8:	5222b03a 	or	r17,r10,r8
 200e0cc:	2006c03a 	cmpne	r3,r4,zero
 200e0d0:	88e2b03a 	or	r17,r17,r3
 200e0d4:	3463c83a 	sub	r17,r6,r17
 200e0d8:	2885c83a 	sub	r2,r5,r2
 200e0dc:	344d803a 	cmpltu	r6,r6,r17
 200e0e0:	1187c83a 	sub	r3,r2,r6
 200e0e4:	4821883a 	mov	r16,r9
 200e0e8:	3825883a 	mov	r18,r7
 200e0ec:	003f2306 	br	200dd7c <__alt_data_end+0xff00dd7c>
 200e0f0:	24d0b03a 	or	r8,r4,r19
 200e0f4:	40001b1e 	bne	r8,zero,200e164 <__subdf3+0x560>
 200e0f8:	0005883a 	mov	r2,zero
 200e0fc:	0009883a 	mov	r4,zero
 200e100:	0021883a 	mov	r16,zero
 200e104:	003f4906 	br	200de2c <__alt_data_end+0xff00de2c>
 200e108:	010007c4 	movi	r4,31
 200e10c:	20803a16 	blt	r4,r2,200e1f8 <__subdf3+0x5f4>
 200e110:	01000804 	movi	r4,32
 200e114:	2089c83a 	sub	r4,r4,r2
 200e118:	2912983a 	sll	r9,r5,r4
 200e11c:	3090d83a 	srl	r8,r6,r2
 200e120:	3108983a 	sll	r4,r6,r4
 200e124:	2884d83a 	srl	r2,r5,r2
 200e128:	4a12b03a 	or	r9,r9,r8
 200e12c:	2008c03a 	cmpne	r4,r4,zero
 200e130:	4912b03a 	or	r9,r9,r4
 200e134:	003f4e06 	br	200de70 <__alt_data_end+0xff00de70>
 200e138:	1c48b03a 	or	r4,r3,r17
 200e13c:	20003c26 	beq	r4,zero,200e230 <__subdf3+0x62c>
 200e140:	0084303a 	nor	r2,zero,r2
 200e144:	1000381e 	bne	r2,zero,200e228 <__subdf3+0x624>
 200e148:	3463c83a 	sub	r17,r6,r17
 200e14c:	28c5c83a 	sub	r2,r5,r3
 200e150:	344d803a 	cmpltu	r6,r6,r17
 200e154:	1187c83a 	sub	r3,r2,r6
 200e158:	4821883a 	mov	r16,r9
 200e15c:	3825883a 	mov	r18,r7
 200e160:	003f0606 	br	200dd7c <__alt_data_end+0xff00dd7c>
 200e164:	2023883a 	mov	r17,r4
 200e168:	003f0906 	br	200dd90 <__alt_data_end+0xff00dd90>
 200e16c:	0101ffc4 	movi	r4,2047
 200e170:	813f3a1e 	bne	r16,r4,200de5c <__alt_data_end+0xff00de5c>
 200e174:	003ec406 	br	200dc88 <__alt_data_end+0xff00dc88>
 200e178:	0005883a 	mov	r2,zero
 200e17c:	003fb106 	br	200e044 <__alt_data_end+0xff00e044>
 200e180:	0005883a 	mov	r2,zero
 200e184:	003fbc06 	br	200e078 <__alt_data_end+0xff00e078>
 200e188:	1c44b03a 	or	r2,r3,r17
 200e18c:	80008e1e 	bne	r16,zero,200e3c8 <__subdf3+0x7c4>
 200e190:	1000c826 	beq	r2,zero,200e4b4 <__subdf3+0x8b0>
 200e194:	2984b03a 	or	r2,r5,r6
 200e198:	103ebb26 	beq	r2,zero,200dc88 <__alt_data_end+0xff00dc88>
 200e19c:	8989883a 	add	r4,r17,r6
 200e1a0:	1945883a 	add	r2,r3,r5
 200e1a4:	2447803a 	cmpltu	r3,r4,r17
 200e1a8:	1887883a 	add	r3,r3,r2
 200e1ac:	1880202c 	andhi	r2,r3,128
 200e1b0:	2023883a 	mov	r17,r4
 200e1b4:	103f1626 	beq	r2,zero,200de10 <__alt_data_end+0xff00de10>
 200e1b8:	00bfe034 	movhi	r2,65408
 200e1bc:	10bfffc4 	addi	r2,r2,-1
 200e1c0:	5021883a 	mov	r16,r10
 200e1c4:	1886703a 	and	r3,r3,r2
 200e1c8:	003eaf06 	br	200dc88 <__alt_data_end+0xff00dc88>
 200e1cc:	3825883a 	mov	r18,r7
 200e1d0:	003f0f06 	br	200de10 <__alt_data_end+0xff00de10>
 200e1d4:	1c44b03a 	or	r2,r3,r17
 200e1d8:	8000251e 	bne	r16,zero,200e270 <__subdf3+0x66c>
 200e1dc:	1000661e 	bne	r2,zero,200e378 <__subdf3+0x774>
 200e1e0:	2990b03a 	or	r8,r5,r6
 200e1e4:	40009626 	beq	r8,zero,200e440 <__subdf3+0x83c>
 200e1e8:	2807883a 	mov	r3,r5
 200e1ec:	3023883a 	mov	r17,r6
 200e1f0:	3825883a 	mov	r18,r7
 200e1f4:	003ea406 	br	200dc88 <__alt_data_end+0xff00dc88>
 200e1f8:	127ff804 	addi	r9,r2,-32
 200e1fc:	01000804 	movi	r4,32
 200e200:	2a52d83a 	srl	r9,r5,r9
 200e204:	11008c26 	beq	r2,r4,200e438 <__subdf3+0x834>
 200e208:	01001004 	movi	r4,64
 200e20c:	2085c83a 	sub	r2,r4,r2
 200e210:	2884983a 	sll	r2,r5,r2
 200e214:	118cb03a 	or	r6,r2,r6
 200e218:	300cc03a 	cmpne	r6,r6,zero
 200e21c:	4992b03a 	or	r9,r9,r6
 200e220:	0005883a 	mov	r2,zero
 200e224:	003f1206 	br	200de70 <__alt_data_end+0xff00de70>
 200e228:	0101ffc4 	movi	r4,2047
 200e22c:	493f9c1e 	bne	r9,r4,200e0a0 <__alt_data_end+0xff00e0a0>
 200e230:	2807883a 	mov	r3,r5
 200e234:	3023883a 	mov	r17,r6
 200e238:	4821883a 	mov	r16,r9
 200e23c:	3825883a 	mov	r18,r7
 200e240:	003e9106 	br	200dc88 <__alt_data_end+0xff00dc88>
 200e244:	80001f1e 	bne	r16,zero,200e2c4 <__subdf3+0x6c0>
 200e248:	1c48b03a 	or	r4,r3,r17
 200e24c:	20005a26 	beq	r4,zero,200e3b8 <__subdf3+0x7b4>
 200e250:	0084303a 	nor	r2,zero,r2
 200e254:	1000561e 	bne	r2,zero,200e3b0 <__subdf3+0x7ac>
 200e258:	89a3883a 	add	r17,r17,r6
 200e25c:	1945883a 	add	r2,r3,r5
 200e260:	898d803a 	cmpltu	r6,r17,r6
 200e264:	3087883a 	add	r3,r6,r2
 200e268:	4821883a 	mov	r16,r9
 200e26c:	003f0506 	br	200de84 <__alt_data_end+0xff00de84>
 200e270:	10002b1e 	bne	r2,zero,200e320 <__subdf3+0x71c>
 200e274:	2984b03a 	or	r2,r5,r6
 200e278:	10008026 	beq	r2,zero,200e47c <__subdf3+0x878>
 200e27c:	2807883a 	mov	r3,r5
 200e280:	3023883a 	mov	r17,r6
 200e284:	3825883a 	mov	r18,r7
 200e288:	0401ffc4 	movi	r16,2047
 200e28c:	003e7e06 	br	200dc88 <__alt_data_end+0xff00dc88>
 200e290:	3809883a 	mov	r4,r7
 200e294:	0011883a 	mov	r8,zero
 200e298:	0005883a 	mov	r2,zero
 200e29c:	003ee306 	br	200de2c <__alt_data_end+0xff00de2c>
 200e2a0:	1c62b03a 	or	r17,r3,r17
 200e2a4:	8822c03a 	cmpne	r17,r17,zero
 200e2a8:	0005883a 	mov	r2,zero
 200e2ac:	003f8906 	br	200e0d4 <__alt_data_end+0xff00e0d4>
 200e2b0:	3809883a 	mov	r4,r7
 200e2b4:	4821883a 	mov	r16,r9
 200e2b8:	0011883a 	mov	r8,zero
 200e2bc:	0005883a 	mov	r2,zero
 200e2c0:	003eda06 	br	200de2c <__alt_data_end+0xff00de2c>
 200e2c4:	0101ffc4 	movi	r4,2047
 200e2c8:	49003b26 	beq	r9,r4,200e3b8 <__subdf3+0x7b4>
 200e2cc:	0085c83a 	sub	r2,zero,r2
 200e2d0:	18c02034 	orhi	r3,r3,128
 200e2d4:	01000e04 	movi	r4,56
 200e2d8:	20806e16 	blt	r4,r2,200e494 <__subdf3+0x890>
 200e2dc:	010007c4 	movi	r4,31
 200e2e0:	20807716 	blt	r4,r2,200e4c0 <__subdf3+0x8bc>
 200e2e4:	01000804 	movi	r4,32
 200e2e8:	2089c83a 	sub	r4,r4,r2
 200e2ec:	1914983a 	sll	r10,r3,r4
 200e2f0:	8890d83a 	srl	r8,r17,r2
 200e2f4:	8908983a 	sll	r4,r17,r4
 200e2f8:	1884d83a 	srl	r2,r3,r2
 200e2fc:	5222b03a 	or	r17,r10,r8
 200e300:	2006c03a 	cmpne	r3,r4,zero
 200e304:	88e2b03a 	or	r17,r17,r3
 200e308:	89a3883a 	add	r17,r17,r6
 200e30c:	1145883a 	add	r2,r2,r5
 200e310:	898d803a 	cmpltu	r6,r17,r6
 200e314:	3087883a 	add	r3,r6,r2
 200e318:	4821883a 	mov	r16,r9
 200e31c:	003ed906 	br	200de84 <__alt_data_end+0xff00de84>
 200e320:	2984b03a 	or	r2,r5,r6
 200e324:	10004226 	beq	r2,zero,200e430 <__subdf3+0x82c>
 200e328:	1808d0fa 	srli	r4,r3,3
 200e32c:	8822d0fa 	srli	r17,r17,3
 200e330:	1806977a 	slli	r3,r3,29
 200e334:	2080022c 	andhi	r2,r4,8
 200e338:	1c62b03a 	or	r17,r3,r17
 200e33c:	10000826 	beq	r2,zero,200e360 <__subdf3+0x75c>
 200e340:	2812d0fa 	srli	r9,r5,3
 200e344:	4880022c 	andhi	r2,r9,8
 200e348:	1000051e 	bne	r2,zero,200e360 <__subdf3+0x75c>
 200e34c:	300cd0fa 	srli	r6,r6,3
 200e350:	2804977a 	slli	r2,r5,29
 200e354:	4809883a 	mov	r4,r9
 200e358:	3825883a 	mov	r18,r7
 200e35c:	11a2b03a 	or	r17,r2,r6
 200e360:	8806d77a 	srli	r3,r17,29
 200e364:	200890fa 	slli	r4,r4,3
 200e368:	882290fa 	slli	r17,r17,3
 200e36c:	0401ffc4 	movi	r16,2047
 200e370:	1906b03a 	or	r3,r3,r4
 200e374:	003e4406 	br	200dc88 <__alt_data_end+0xff00dc88>
 200e378:	2984b03a 	or	r2,r5,r6
 200e37c:	103e4226 	beq	r2,zero,200dc88 <__alt_data_end+0xff00dc88>
 200e380:	8989c83a 	sub	r4,r17,r6
 200e384:	8911803a 	cmpltu	r8,r17,r4
 200e388:	1945c83a 	sub	r2,r3,r5
 200e38c:	1205c83a 	sub	r2,r2,r8
 200e390:	1200202c 	andhi	r8,r2,128
 200e394:	403e9a26 	beq	r8,zero,200de00 <__alt_data_end+0xff00de00>
 200e398:	3463c83a 	sub	r17,r6,r17
 200e39c:	28c5c83a 	sub	r2,r5,r3
 200e3a0:	344d803a 	cmpltu	r6,r6,r17
 200e3a4:	1187c83a 	sub	r3,r2,r6
 200e3a8:	3825883a 	mov	r18,r7
 200e3ac:	003e3606 	br	200dc88 <__alt_data_end+0xff00dc88>
 200e3b0:	0101ffc4 	movi	r4,2047
 200e3b4:	493fc71e 	bne	r9,r4,200e2d4 <__alt_data_end+0xff00e2d4>
 200e3b8:	2807883a 	mov	r3,r5
 200e3bc:	3023883a 	mov	r17,r6
 200e3c0:	4821883a 	mov	r16,r9
 200e3c4:	003e3006 	br	200dc88 <__alt_data_end+0xff00dc88>
 200e3c8:	10003626 	beq	r2,zero,200e4a4 <__subdf3+0x8a0>
 200e3cc:	2984b03a 	or	r2,r5,r6
 200e3d0:	10001726 	beq	r2,zero,200e430 <__subdf3+0x82c>
 200e3d4:	1808d0fa 	srli	r4,r3,3
 200e3d8:	8822d0fa 	srli	r17,r17,3
 200e3dc:	1806977a 	slli	r3,r3,29
 200e3e0:	2080022c 	andhi	r2,r4,8
 200e3e4:	1c62b03a 	or	r17,r3,r17
 200e3e8:	10000726 	beq	r2,zero,200e408 <__subdf3+0x804>
 200e3ec:	2812d0fa 	srli	r9,r5,3
 200e3f0:	4880022c 	andhi	r2,r9,8
 200e3f4:	1000041e 	bne	r2,zero,200e408 <__subdf3+0x804>
 200e3f8:	300cd0fa 	srli	r6,r6,3
 200e3fc:	2804977a 	slli	r2,r5,29
 200e400:	4809883a 	mov	r4,r9
 200e404:	11a2b03a 	or	r17,r2,r6
 200e408:	8806d77a 	srli	r3,r17,29
 200e40c:	200890fa 	slli	r4,r4,3
 200e410:	882290fa 	slli	r17,r17,3
 200e414:	3825883a 	mov	r18,r7
 200e418:	1906b03a 	or	r3,r3,r4
 200e41c:	0401ffc4 	movi	r16,2047
 200e420:	003e1906 	br	200dc88 <__alt_data_end+0xff00dc88>
 200e424:	000b883a 	mov	r5,zero
 200e428:	0005883a 	mov	r2,zero
 200e42c:	003e2e06 	br	200dce8 <__alt_data_end+0xff00dce8>
 200e430:	0401ffc4 	movi	r16,2047
 200e434:	003e1406 	br	200dc88 <__alt_data_end+0xff00dc88>
 200e438:	0005883a 	mov	r2,zero
 200e43c:	003f7506 	br	200e214 <__alt_data_end+0xff00e214>
 200e440:	0005883a 	mov	r2,zero
 200e444:	0009883a 	mov	r4,zero
 200e448:	003e7806 	br	200de2c <__alt_data_end+0xff00de2c>
 200e44c:	123ff804 	addi	r8,r2,-32
 200e450:	01000804 	movi	r4,32
 200e454:	1a10d83a 	srl	r8,r3,r8
 200e458:	11002526 	beq	r2,r4,200e4f0 <__subdf3+0x8ec>
 200e45c:	01001004 	movi	r4,64
 200e460:	2085c83a 	sub	r2,r4,r2
 200e464:	1884983a 	sll	r2,r3,r2
 200e468:	1444b03a 	or	r2,r2,r17
 200e46c:	1004c03a 	cmpne	r2,r2,zero
 200e470:	40a2b03a 	or	r17,r8,r2
 200e474:	0005883a 	mov	r2,zero
 200e478:	003f1606 	br	200e0d4 <__alt_data_end+0xff00e0d4>
 200e47c:	02000434 	movhi	r8,16
 200e480:	0009883a 	mov	r4,zero
 200e484:	423fffc4 	addi	r8,r8,-1
 200e488:	00bfffc4 	movi	r2,-1
 200e48c:	0401ffc4 	movi	r16,2047
 200e490:	003e6606 	br	200de2c <__alt_data_end+0xff00de2c>
 200e494:	1c62b03a 	or	r17,r3,r17
 200e498:	8822c03a 	cmpne	r17,r17,zero
 200e49c:	0005883a 	mov	r2,zero
 200e4a0:	003f9906 	br	200e308 <__alt_data_end+0xff00e308>
 200e4a4:	2807883a 	mov	r3,r5
 200e4a8:	3023883a 	mov	r17,r6
 200e4ac:	0401ffc4 	movi	r16,2047
 200e4b0:	003df506 	br	200dc88 <__alt_data_end+0xff00dc88>
 200e4b4:	2807883a 	mov	r3,r5
 200e4b8:	3023883a 	mov	r17,r6
 200e4bc:	003df206 	br	200dc88 <__alt_data_end+0xff00dc88>
 200e4c0:	123ff804 	addi	r8,r2,-32
 200e4c4:	01000804 	movi	r4,32
 200e4c8:	1a10d83a 	srl	r8,r3,r8
 200e4cc:	11000a26 	beq	r2,r4,200e4f8 <__subdf3+0x8f4>
 200e4d0:	01001004 	movi	r4,64
 200e4d4:	2085c83a 	sub	r2,r4,r2
 200e4d8:	1884983a 	sll	r2,r3,r2
 200e4dc:	1444b03a 	or	r2,r2,r17
 200e4e0:	1004c03a 	cmpne	r2,r2,zero
 200e4e4:	40a2b03a 	or	r17,r8,r2
 200e4e8:	0005883a 	mov	r2,zero
 200e4ec:	003f8606 	br	200e308 <__alt_data_end+0xff00e308>
 200e4f0:	0005883a 	mov	r2,zero
 200e4f4:	003fdc06 	br	200e468 <__alt_data_end+0xff00e468>
 200e4f8:	0005883a 	mov	r2,zero
 200e4fc:	003ff706 	br	200e4dc <__alt_data_end+0xff00e4dc>

0200e500 <__fixdfsi>:
 200e500:	280cd53a 	srli	r6,r5,20
 200e504:	00c00434 	movhi	r3,16
 200e508:	18ffffc4 	addi	r3,r3,-1
 200e50c:	3181ffcc 	andi	r6,r6,2047
 200e510:	01c0ff84 	movi	r7,1022
 200e514:	28c6703a 	and	r3,r5,r3
 200e518:	280ad7fa 	srli	r5,r5,31
 200e51c:	3980120e 	bge	r7,r6,200e568 <__fixdfsi+0x68>
 200e520:	00810744 	movi	r2,1053
 200e524:	11800c16 	blt	r2,r6,200e558 <__fixdfsi+0x58>
 200e528:	00810cc4 	movi	r2,1075
 200e52c:	1185c83a 	sub	r2,r2,r6
 200e530:	01c007c4 	movi	r7,31
 200e534:	18c00434 	orhi	r3,r3,16
 200e538:	38800d16 	blt	r7,r2,200e570 <__fixdfsi+0x70>
 200e53c:	31befb44 	addi	r6,r6,-1043
 200e540:	2084d83a 	srl	r2,r4,r2
 200e544:	1986983a 	sll	r3,r3,r6
 200e548:	1884b03a 	or	r2,r3,r2
 200e54c:	28000726 	beq	r5,zero,200e56c <__fixdfsi+0x6c>
 200e550:	0085c83a 	sub	r2,zero,r2
 200e554:	f800283a 	ret
 200e558:	00a00034 	movhi	r2,32768
 200e55c:	10bfffc4 	addi	r2,r2,-1
 200e560:	2885883a 	add	r2,r5,r2
 200e564:	f800283a 	ret
 200e568:	0005883a 	mov	r2,zero
 200e56c:	f800283a 	ret
 200e570:	008104c4 	movi	r2,1043
 200e574:	1185c83a 	sub	r2,r2,r6
 200e578:	1884d83a 	srl	r2,r3,r2
 200e57c:	003ff306 	br	200e54c <__alt_data_end+0xff00e54c>

0200e580 <__floatsidf>:
 200e580:	defffd04 	addi	sp,sp,-12
 200e584:	dfc00215 	stw	ra,8(sp)
 200e588:	dc400115 	stw	r17,4(sp)
 200e58c:	dc000015 	stw	r16,0(sp)
 200e590:	20002b26 	beq	r4,zero,200e640 <__floatsidf+0xc0>
 200e594:	2023883a 	mov	r17,r4
 200e598:	2020d7fa 	srli	r16,r4,31
 200e59c:	20002d16 	blt	r4,zero,200e654 <__floatsidf+0xd4>
 200e5a0:	8809883a 	mov	r4,r17
 200e5a4:	200e7040 	call	200e704 <__clzsi2>
 200e5a8:	01410784 	movi	r5,1054
 200e5ac:	288bc83a 	sub	r5,r5,r2
 200e5b0:	01010cc4 	movi	r4,1075
 200e5b4:	2149c83a 	sub	r4,r4,r5
 200e5b8:	00c007c4 	movi	r3,31
 200e5bc:	1900160e 	bge	r3,r4,200e618 <__floatsidf+0x98>
 200e5c0:	00c104c4 	movi	r3,1043
 200e5c4:	1947c83a 	sub	r3,r3,r5
 200e5c8:	88c6983a 	sll	r3,r17,r3
 200e5cc:	00800434 	movhi	r2,16
 200e5d0:	10bfffc4 	addi	r2,r2,-1
 200e5d4:	1886703a 	and	r3,r3,r2
 200e5d8:	2941ffcc 	andi	r5,r5,2047
 200e5dc:	800d883a 	mov	r6,r16
 200e5e0:	0005883a 	mov	r2,zero
 200e5e4:	280a953a 	slli	r5,r5,20
 200e5e8:	31803fcc 	andi	r6,r6,255
 200e5ec:	01000434 	movhi	r4,16
 200e5f0:	300c97fa 	slli	r6,r6,31
 200e5f4:	213fffc4 	addi	r4,r4,-1
 200e5f8:	1906703a 	and	r3,r3,r4
 200e5fc:	1946b03a 	or	r3,r3,r5
 200e600:	1986b03a 	or	r3,r3,r6
 200e604:	dfc00217 	ldw	ra,8(sp)
 200e608:	dc400117 	ldw	r17,4(sp)
 200e60c:	dc000017 	ldw	r16,0(sp)
 200e610:	dec00304 	addi	sp,sp,12
 200e614:	f800283a 	ret
 200e618:	00c002c4 	movi	r3,11
 200e61c:	1887c83a 	sub	r3,r3,r2
 200e620:	88c6d83a 	srl	r3,r17,r3
 200e624:	8904983a 	sll	r2,r17,r4
 200e628:	01000434 	movhi	r4,16
 200e62c:	213fffc4 	addi	r4,r4,-1
 200e630:	2941ffcc 	andi	r5,r5,2047
 200e634:	1906703a 	and	r3,r3,r4
 200e638:	800d883a 	mov	r6,r16
 200e63c:	003fe906 	br	200e5e4 <__alt_data_end+0xff00e5e4>
 200e640:	000d883a 	mov	r6,zero
 200e644:	000b883a 	mov	r5,zero
 200e648:	0007883a 	mov	r3,zero
 200e64c:	0005883a 	mov	r2,zero
 200e650:	003fe406 	br	200e5e4 <__alt_data_end+0xff00e5e4>
 200e654:	0123c83a 	sub	r17,zero,r4
 200e658:	003fd106 	br	200e5a0 <__alt_data_end+0xff00e5a0>

0200e65c <__floatunsidf>:
 200e65c:	defffe04 	addi	sp,sp,-8
 200e660:	dc000015 	stw	r16,0(sp)
 200e664:	dfc00115 	stw	ra,4(sp)
 200e668:	2021883a 	mov	r16,r4
 200e66c:	20002226 	beq	r4,zero,200e6f8 <__floatunsidf+0x9c>
 200e670:	200e7040 	call	200e704 <__clzsi2>
 200e674:	01010784 	movi	r4,1054
 200e678:	2089c83a 	sub	r4,r4,r2
 200e67c:	01810cc4 	movi	r6,1075
 200e680:	310dc83a 	sub	r6,r6,r4
 200e684:	00c007c4 	movi	r3,31
 200e688:	1980120e 	bge	r3,r6,200e6d4 <__floatunsidf+0x78>
 200e68c:	00c104c4 	movi	r3,1043
 200e690:	1907c83a 	sub	r3,r3,r4
 200e694:	80ca983a 	sll	r5,r16,r3
 200e698:	00800434 	movhi	r2,16
 200e69c:	10bfffc4 	addi	r2,r2,-1
 200e6a0:	2101ffcc 	andi	r4,r4,2047
 200e6a4:	0021883a 	mov	r16,zero
 200e6a8:	288a703a 	and	r5,r5,r2
 200e6ac:	2008953a 	slli	r4,r4,20
 200e6b0:	00c00434 	movhi	r3,16
 200e6b4:	18ffffc4 	addi	r3,r3,-1
 200e6b8:	28c6703a 	and	r3,r5,r3
 200e6bc:	8005883a 	mov	r2,r16
 200e6c0:	1906b03a 	or	r3,r3,r4
 200e6c4:	dfc00117 	ldw	ra,4(sp)
 200e6c8:	dc000017 	ldw	r16,0(sp)
 200e6cc:	dec00204 	addi	sp,sp,8
 200e6d0:	f800283a 	ret
 200e6d4:	00c002c4 	movi	r3,11
 200e6d8:	188bc83a 	sub	r5,r3,r2
 200e6dc:	814ad83a 	srl	r5,r16,r5
 200e6e0:	00c00434 	movhi	r3,16
 200e6e4:	18ffffc4 	addi	r3,r3,-1
 200e6e8:	81a0983a 	sll	r16,r16,r6
 200e6ec:	2101ffcc 	andi	r4,r4,2047
 200e6f0:	28ca703a 	and	r5,r5,r3
 200e6f4:	003fed06 	br	200e6ac <__alt_data_end+0xff00e6ac>
 200e6f8:	0009883a 	mov	r4,zero
 200e6fc:	000b883a 	mov	r5,zero
 200e700:	003fea06 	br	200e6ac <__alt_data_end+0xff00e6ac>

0200e704 <__clzsi2>:
 200e704:	00bfffd4 	movui	r2,65535
 200e708:	11000536 	bltu	r2,r4,200e720 <__clzsi2+0x1c>
 200e70c:	00803fc4 	movi	r2,255
 200e710:	11000f36 	bltu	r2,r4,200e750 <__clzsi2+0x4c>
 200e714:	00800804 	movi	r2,32
 200e718:	0007883a 	mov	r3,zero
 200e71c:	00000506 	br	200e734 <__clzsi2+0x30>
 200e720:	00804034 	movhi	r2,256
 200e724:	10bfffc4 	addi	r2,r2,-1
 200e728:	11000c2e 	bgeu	r2,r4,200e75c <__clzsi2+0x58>
 200e72c:	00800204 	movi	r2,8
 200e730:	00c00604 	movi	r3,24
 200e734:	20c8d83a 	srl	r4,r4,r3
 200e738:	00c08074 	movhi	r3,513
 200e73c:	18c47304 	addi	r3,r3,4556
 200e740:	1909883a 	add	r4,r3,r4
 200e744:	20c00003 	ldbu	r3,0(r4)
 200e748:	10c5c83a 	sub	r2,r2,r3
 200e74c:	f800283a 	ret
 200e750:	00800604 	movi	r2,24
 200e754:	00c00204 	movi	r3,8
 200e758:	003ff606 	br	200e734 <__alt_data_end+0xff00e734>
 200e75c:	00800404 	movi	r2,16
 200e760:	1007883a 	mov	r3,r2
 200e764:	003ff306 	br	200e734 <__alt_data_end+0xff00e734>

0200e768 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e768:	defffe04 	addi	sp,sp,-8
 200e76c:	dfc00115 	stw	ra,4(sp)
 200e770:	df000015 	stw	fp,0(sp)
 200e774:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200e778:	d0a00b17 	ldw	r2,-32724(gp)
 200e77c:	10000326 	beq	r2,zero,200e78c <alt_get_errno+0x24>
 200e780:	d0a00b17 	ldw	r2,-32724(gp)
 200e784:	103ee83a 	callr	r2
 200e788:	00000106 	br	200e790 <alt_get_errno+0x28>
 200e78c:	d0a6d204 	addi	r2,gp,-25784
}
 200e790:	e037883a 	mov	sp,fp
 200e794:	dfc00117 	ldw	ra,4(sp)
 200e798:	df000017 	ldw	fp,0(sp)
 200e79c:	dec00204 	addi	sp,sp,8
 200e7a0:	f800283a 	ret

0200e7a4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 200e7a4:	defffb04 	addi	sp,sp,-20
 200e7a8:	dfc00415 	stw	ra,16(sp)
 200e7ac:	df000315 	stw	fp,12(sp)
 200e7b0:	df000304 	addi	fp,sp,12
 200e7b4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 200e7b8:	e0bfff17 	ldw	r2,-4(fp)
 200e7bc:	10000816 	blt	r2,zero,200e7e0 <close+0x3c>
 200e7c0:	01400304 	movi	r5,12
 200e7c4:	e13fff17 	ldw	r4,-4(fp)
 200e7c8:	20018280 	call	2001828 <__mulsi3>
 200e7cc:	1007883a 	mov	r3,r2
 200e7d0:	00808074 	movhi	r2,513
 200e7d4:	1086f304 	addi	r2,r2,7116
 200e7d8:	1885883a 	add	r2,r3,r2
 200e7dc:	00000106 	br	200e7e4 <close+0x40>
 200e7e0:	0005883a 	mov	r2,zero
 200e7e4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 200e7e8:	e0bffd17 	ldw	r2,-12(fp)
 200e7ec:	10001926 	beq	r2,zero,200e854 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 200e7f0:	e0bffd17 	ldw	r2,-12(fp)
 200e7f4:	10800017 	ldw	r2,0(r2)
 200e7f8:	10800417 	ldw	r2,16(r2)
 200e7fc:	10000626 	beq	r2,zero,200e818 <close+0x74>
 200e800:	e0bffd17 	ldw	r2,-12(fp)
 200e804:	10800017 	ldw	r2,0(r2)
 200e808:	10800417 	ldw	r2,16(r2)
 200e80c:	e13ffd17 	ldw	r4,-12(fp)
 200e810:	103ee83a 	callr	r2
 200e814:	00000106 	br	200e81c <close+0x78>
 200e818:	0005883a 	mov	r2,zero
 200e81c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 200e820:	e13fff17 	ldw	r4,-4(fp)
 200e824:	200ee8c0 	call	200ee8c <alt_release_fd>
    if (rval < 0)
 200e828:	e0bffe17 	ldw	r2,-8(fp)
 200e82c:	1000070e 	bge	r2,zero,200e84c <close+0xa8>
    {
      ALT_ERRNO = -rval;
 200e830:	200e7680 	call	200e768 <alt_get_errno>
 200e834:	1007883a 	mov	r3,r2
 200e838:	e0bffe17 	ldw	r2,-8(fp)
 200e83c:	0085c83a 	sub	r2,zero,r2
 200e840:	18800015 	stw	r2,0(r3)
      return -1;
 200e844:	00bfffc4 	movi	r2,-1
 200e848:	00000706 	br	200e868 <close+0xc4>
    }
    return 0;
 200e84c:	0005883a 	mov	r2,zero
 200e850:	00000506 	br	200e868 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200e854:	200e7680 	call	200e768 <alt_get_errno>
 200e858:	1007883a 	mov	r3,r2
 200e85c:	00801444 	movi	r2,81
 200e860:	18800015 	stw	r2,0(r3)
    return -1;
 200e864:	00bfffc4 	movi	r2,-1
  }
}
 200e868:	e037883a 	mov	sp,fp
 200e86c:	dfc00117 	ldw	ra,4(sp)
 200e870:	df000017 	ldw	fp,0(sp)
 200e874:	dec00204 	addi	sp,sp,8
 200e878:	f800283a 	ret

0200e87c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 200e87c:	defffc04 	addi	sp,sp,-16
 200e880:	df000315 	stw	fp,12(sp)
 200e884:	df000304 	addi	fp,sp,12
 200e888:	e13ffd15 	stw	r4,-12(fp)
 200e88c:	e17ffe15 	stw	r5,-8(fp)
 200e890:	e1bfff15 	stw	r6,-4(fp)
  return len;
 200e894:	e0bfff17 	ldw	r2,-4(fp)
}
 200e898:	e037883a 	mov	sp,fp
 200e89c:	df000017 	ldw	fp,0(sp)
 200e8a0:	dec00104 	addi	sp,sp,4
 200e8a4:	f800283a 	ret

0200e8a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e8a8:	defffe04 	addi	sp,sp,-8
 200e8ac:	dfc00115 	stw	ra,4(sp)
 200e8b0:	df000015 	stw	fp,0(sp)
 200e8b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200e8b8:	d0a00b17 	ldw	r2,-32724(gp)
 200e8bc:	10000326 	beq	r2,zero,200e8cc <alt_get_errno+0x24>
 200e8c0:	d0a00b17 	ldw	r2,-32724(gp)
 200e8c4:	103ee83a 	callr	r2
 200e8c8:	00000106 	br	200e8d0 <alt_get_errno+0x28>
 200e8cc:	d0a6d204 	addi	r2,gp,-25784
}
 200e8d0:	e037883a 	mov	sp,fp
 200e8d4:	dfc00117 	ldw	ra,4(sp)
 200e8d8:	df000017 	ldw	fp,0(sp)
 200e8dc:	dec00204 	addi	sp,sp,8
 200e8e0:	f800283a 	ret

0200e8e4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 200e8e4:	defffb04 	addi	sp,sp,-20
 200e8e8:	dfc00415 	stw	ra,16(sp)
 200e8ec:	df000315 	stw	fp,12(sp)
 200e8f0:	df000304 	addi	fp,sp,12
 200e8f4:	e13ffe15 	stw	r4,-8(fp)
 200e8f8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200e8fc:	e0bffe17 	ldw	r2,-8(fp)
 200e900:	10000816 	blt	r2,zero,200e924 <fstat+0x40>
 200e904:	01400304 	movi	r5,12
 200e908:	e13ffe17 	ldw	r4,-8(fp)
 200e90c:	20018280 	call	2001828 <__mulsi3>
 200e910:	1007883a 	mov	r3,r2
 200e914:	00808074 	movhi	r2,513
 200e918:	1086f304 	addi	r2,r2,7116
 200e91c:	1885883a 	add	r2,r3,r2
 200e920:	00000106 	br	200e928 <fstat+0x44>
 200e924:	0005883a 	mov	r2,zero
 200e928:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 200e92c:	e0bffd17 	ldw	r2,-12(fp)
 200e930:	10001026 	beq	r2,zero,200e974 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 200e934:	e0bffd17 	ldw	r2,-12(fp)
 200e938:	10800017 	ldw	r2,0(r2)
 200e93c:	10800817 	ldw	r2,32(r2)
 200e940:	10000726 	beq	r2,zero,200e960 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 200e944:	e0bffd17 	ldw	r2,-12(fp)
 200e948:	10800017 	ldw	r2,0(r2)
 200e94c:	10800817 	ldw	r2,32(r2)
 200e950:	e17fff17 	ldw	r5,-4(fp)
 200e954:	e13ffd17 	ldw	r4,-12(fp)
 200e958:	103ee83a 	callr	r2
 200e95c:	00000a06 	br	200e988 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 200e960:	e0bfff17 	ldw	r2,-4(fp)
 200e964:	00c80004 	movi	r3,8192
 200e968:	10c00115 	stw	r3,4(r2)
      return 0;
 200e96c:	0005883a 	mov	r2,zero
 200e970:	00000506 	br	200e988 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200e974:	200e8a80 	call	200e8a8 <alt_get_errno>
 200e978:	1007883a 	mov	r3,r2
 200e97c:	00801444 	movi	r2,81
 200e980:	18800015 	stw	r2,0(r3)
    return -1;
 200e984:	00bfffc4 	movi	r2,-1
  }
}
 200e988:	e037883a 	mov	sp,fp
 200e98c:	dfc00117 	ldw	ra,4(sp)
 200e990:	df000017 	ldw	fp,0(sp)
 200e994:	dec00204 	addi	sp,sp,8
 200e998:	f800283a 	ret

0200e99c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e99c:	defffe04 	addi	sp,sp,-8
 200e9a0:	dfc00115 	stw	ra,4(sp)
 200e9a4:	df000015 	stw	fp,0(sp)
 200e9a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200e9ac:	d0a00b17 	ldw	r2,-32724(gp)
 200e9b0:	10000326 	beq	r2,zero,200e9c0 <alt_get_errno+0x24>
 200e9b4:	d0a00b17 	ldw	r2,-32724(gp)
 200e9b8:	103ee83a 	callr	r2
 200e9bc:	00000106 	br	200e9c4 <alt_get_errno+0x28>
 200e9c0:	d0a6d204 	addi	r2,gp,-25784
}
 200e9c4:	e037883a 	mov	sp,fp
 200e9c8:	dfc00117 	ldw	ra,4(sp)
 200e9cc:	df000017 	ldw	fp,0(sp)
 200e9d0:	dec00204 	addi	sp,sp,8
 200e9d4:	f800283a 	ret

0200e9d8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 200e9d8:	deffed04 	addi	sp,sp,-76
 200e9dc:	dfc01215 	stw	ra,72(sp)
 200e9e0:	df001115 	stw	fp,68(sp)
 200e9e4:	df001104 	addi	fp,sp,68
 200e9e8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200e9ec:	e0bfff17 	ldw	r2,-4(fp)
 200e9f0:	10000816 	blt	r2,zero,200ea14 <isatty+0x3c>
 200e9f4:	01400304 	movi	r5,12
 200e9f8:	e13fff17 	ldw	r4,-4(fp)
 200e9fc:	20018280 	call	2001828 <__mulsi3>
 200ea00:	1007883a 	mov	r3,r2
 200ea04:	00808074 	movhi	r2,513
 200ea08:	1086f304 	addi	r2,r2,7116
 200ea0c:	1885883a 	add	r2,r3,r2
 200ea10:	00000106 	br	200ea18 <isatty+0x40>
 200ea14:	0005883a 	mov	r2,zero
 200ea18:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 200ea1c:	e0bfef17 	ldw	r2,-68(fp)
 200ea20:	10000e26 	beq	r2,zero,200ea5c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 200ea24:	e0bfef17 	ldw	r2,-68(fp)
 200ea28:	10800017 	ldw	r2,0(r2)
 200ea2c:	10800817 	ldw	r2,32(r2)
 200ea30:	1000021e 	bne	r2,zero,200ea3c <isatty+0x64>
    {
      return 1;
 200ea34:	00800044 	movi	r2,1
 200ea38:	00000d06 	br	200ea70 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 200ea3c:	e0bff004 	addi	r2,fp,-64
 200ea40:	100b883a 	mov	r5,r2
 200ea44:	e13fff17 	ldw	r4,-4(fp)
 200ea48:	200e8e40 	call	200e8e4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 200ea4c:	e0bff117 	ldw	r2,-60(fp)
 200ea50:	10880020 	cmpeqi	r2,r2,8192
 200ea54:	10803fcc 	andi	r2,r2,255
 200ea58:	00000506 	br	200ea70 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200ea5c:	200e99c0 	call	200e99c <alt_get_errno>
 200ea60:	1007883a 	mov	r3,r2
 200ea64:	00801444 	movi	r2,81
 200ea68:	18800015 	stw	r2,0(r3)
    return 0;
 200ea6c:	0005883a 	mov	r2,zero
  }
}
 200ea70:	e037883a 	mov	sp,fp
 200ea74:	dfc00117 	ldw	ra,4(sp)
 200ea78:	df000017 	ldw	fp,0(sp)
 200ea7c:	dec00204 	addi	sp,sp,8
 200ea80:	f800283a 	ret

0200ea84 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 200ea84:	defffc04 	addi	sp,sp,-16
 200ea88:	df000315 	stw	fp,12(sp)
 200ea8c:	df000304 	addi	fp,sp,12
 200ea90:	e13ffd15 	stw	r4,-12(fp)
 200ea94:	e17ffe15 	stw	r5,-8(fp)
 200ea98:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 200ea9c:	e0fffe17 	ldw	r3,-8(fp)
 200eaa0:	e0bffd17 	ldw	r2,-12(fp)
 200eaa4:	18800c26 	beq	r3,r2,200ead8 <alt_load_section+0x54>
  {
    while( to != end )
 200eaa8:	00000806 	br	200eacc <alt_load_section+0x48>
    {
      *to++ = *from++;
 200eaac:	e0bffe17 	ldw	r2,-8(fp)
 200eab0:	10c00104 	addi	r3,r2,4
 200eab4:	e0fffe15 	stw	r3,-8(fp)
 200eab8:	e0fffd17 	ldw	r3,-12(fp)
 200eabc:	19000104 	addi	r4,r3,4
 200eac0:	e13ffd15 	stw	r4,-12(fp)
 200eac4:	18c00017 	ldw	r3,0(r3)
 200eac8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 200eacc:	e0fffe17 	ldw	r3,-8(fp)
 200ead0:	e0bfff17 	ldw	r2,-4(fp)
 200ead4:	18bff51e 	bne	r3,r2,200eaac <__alt_data_end+0xff00eaac>
    {
      *to++ = *from++;
    }
  }
}
 200ead8:	0001883a 	nop
 200eadc:	e037883a 	mov	sp,fp
 200eae0:	df000017 	ldw	fp,0(sp)
 200eae4:	dec00104 	addi	sp,sp,4
 200eae8:	f800283a 	ret

0200eaec <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 200eaec:	defffe04 	addi	sp,sp,-8
 200eaf0:	dfc00115 	stw	ra,4(sp)
 200eaf4:	df000015 	stw	fp,0(sp)
 200eaf8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 200eafc:	01808074 	movhi	r6,513
 200eb00:	318b7b04 	addi	r6,r6,11756
 200eb04:	01408074 	movhi	r5,513
 200eb08:	2944c004 	addi	r5,r5,4864
 200eb0c:	01008074 	movhi	r4,513
 200eb10:	210b7b04 	addi	r4,r4,11756
 200eb14:	200ea840 	call	200ea84 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 200eb18:	01808034 	movhi	r6,512
 200eb1c:	31808c04 	addi	r6,r6,560
 200eb20:	01408034 	movhi	r5,512
 200eb24:	29400804 	addi	r5,r5,32
 200eb28:	01008034 	movhi	r4,512
 200eb2c:	21000804 	addi	r4,r4,32
 200eb30:	200ea840 	call	200ea84 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 200eb34:	01808074 	movhi	r6,513
 200eb38:	3184c004 	addi	r6,r6,4864
 200eb3c:	01408074 	movhi	r5,513
 200eb40:	2943e204 	addi	r5,r5,3976
 200eb44:	01008074 	movhi	r4,513
 200eb48:	2103e204 	addi	r4,r4,3976
 200eb4c:	200ea840 	call	200ea84 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 200eb50:	200fed00 	call	200fed0 <alt_dcache_flush_all>
  alt_icache_flush_all();
 200eb54:	20100900 	call	2010090 <alt_icache_flush_all>
}
 200eb58:	0001883a 	nop
 200eb5c:	e037883a 	mov	sp,fp
 200eb60:	dfc00117 	ldw	ra,4(sp)
 200eb64:	df000017 	ldw	fp,0(sp)
 200eb68:	dec00204 	addi	sp,sp,8
 200eb6c:	f800283a 	ret

0200eb70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200eb70:	defffe04 	addi	sp,sp,-8
 200eb74:	dfc00115 	stw	ra,4(sp)
 200eb78:	df000015 	stw	fp,0(sp)
 200eb7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200eb80:	d0a00b17 	ldw	r2,-32724(gp)
 200eb84:	10000326 	beq	r2,zero,200eb94 <alt_get_errno+0x24>
 200eb88:	d0a00b17 	ldw	r2,-32724(gp)
 200eb8c:	103ee83a 	callr	r2
 200eb90:	00000106 	br	200eb98 <alt_get_errno+0x28>
 200eb94:	d0a6d204 	addi	r2,gp,-25784
}
 200eb98:	e037883a 	mov	sp,fp
 200eb9c:	dfc00117 	ldw	ra,4(sp)
 200eba0:	df000017 	ldw	fp,0(sp)
 200eba4:	dec00204 	addi	sp,sp,8
 200eba8:	f800283a 	ret

0200ebac <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 200ebac:	defff904 	addi	sp,sp,-28
 200ebb0:	dfc00615 	stw	ra,24(sp)
 200ebb4:	df000515 	stw	fp,20(sp)
 200ebb8:	df000504 	addi	fp,sp,20
 200ebbc:	e13ffd15 	stw	r4,-12(fp)
 200ebc0:	e17ffe15 	stw	r5,-8(fp)
 200ebc4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 200ebc8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200ebcc:	e0bffd17 	ldw	r2,-12(fp)
 200ebd0:	10000816 	blt	r2,zero,200ebf4 <lseek+0x48>
 200ebd4:	01400304 	movi	r5,12
 200ebd8:	e13ffd17 	ldw	r4,-12(fp)
 200ebdc:	20018280 	call	2001828 <__mulsi3>
 200ebe0:	1007883a 	mov	r3,r2
 200ebe4:	00808074 	movhi	r2,513
 200ebe8:	1086f304 	addi	r2,r2,7116
 200ebec:	1885883a 	add	r2,r3,r2
 200ebf0:	00000106 	br	200ebf8 <lseek+0x4c>
 200ebf4:	0005883a 	mov	r2,zero
 200ebf8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 200ebfc:	e0bffc17 	ldw	r2,-16(fp)
 200ec00:	10001026 	beq	r2,zero,200ec44 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 200ec04:	e0bffc17 	ldw	r2,-16(fp)
 200ec08:	10800017 	ldw	r2,0(r2)
 200ec0c:	10800717 	ldw	r2,28(r2)
 200ec10:	10000926 	beq	r2,zero,200ec38 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 200ec14:	e0bffc17 	ldw	r2,-16(fp)
 200ec18:	10800017 	ldw	r2,0(r2)
 200ec1c:	10800717 	ldw	r2,28(r2)
 200ec20:	e1bfff17 	ldw	r6,-4(fp)
 200ec24:	e17ffe17 	ldw	r5,-8(fp)
 200ec28:	e13ffc17 	ldw	r4,-16(fp)
 200ec2c:	103ee83a 	callr	r2
 200ec30:	e0bffb15 	stw	r2,-20(fp)
 200ec34:	00000506 	br	200ec4c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 200ec38:	00bfde84 	movi	r2,-134
 200ec3c:	e0bffb15 	stw	r2,-20(fp)
 200ec40:	00000206 	br	200ec4c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 200ec44:	00bfebc4 	movi	r2,-81
 200ec48:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 200ec4c:	e0bffb17 	ldw	r2,-20(fp)
 200ec50:	1000070e 	bge	r2,zero,200ec70 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 200ec54:	200eb700 	call	200eb70 <alt_get_errno>
 200ec58:	1007883a 	mov	r3,r2
 200ec5c:	e0bffb17 	ldw	r2,-20(fp)
 200ec60:	0085c83a 	sub	r2,zero,r2
 200ec64:	18800015 	stw	r2,0(r3)
    rc = -1;
 200ec68:	00bfffc4 	movi	r2,-1
 200ec6c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 200ec70:	e0bffb17 	ldw	r2,-20(fp)
}
 200ec74:	e037883a 	mov	sp,fp
 200ec78:	dfc00117 	ldw	ra,4(sp)
 200ec7c:	df000017 	ldw	fp,0(sp)
 200ec80:	dec00204 	addi	sp,sp,8
 200ec84:	f800283a 	ret

0200ec88 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 200ec88:	defffd04 	addi	sp,sp,-12
 200ec8c:	dfc00215 	stw	ra,8(sp)
 200ec90:	df000115 	stw	fp,4(sp)
 200ec94:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 200ec98:	0009883a 	mov	r4,zero
 200ec9c:	200f1600 	call	200f160 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 200eca0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 200eca4:	200f1980 	call	200f198 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 200eca8:	01808074 	movhi	r6,513
 200ecac:	3184b604 	addi	r6,r6,4824
 200ecb0:	01408074 	movhi	r5,513
 200ecb4:	2944b604 	addi	r5,r5,4824
 200ecb8:	01008074 	movhi	r4,513
 200ecbc:	2104b604 	addi	r4,r4,4824
 200ecc0:	20104340 	call	2010434 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 200ecc4:	200ffd00 	call	200ffd0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 200ecc8:	01008074 	movhi	r4,513
 200eccc:	21000c04 	addi	r4,r4,48
 200ecd0:	2010bf40 	call	2010bf4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 200ecd4:	d0a6d317 	ldw	r2,-25780(gp)
 200ecd8:	d0e6d417 	ldw	r3,-25776(gp)
 200ecdc:	d126d517 	ldw	r4,-25772(gp)
 200ece0:	200d883a 	mov	r6,r4
 200ece4:	180b883a 	mov	r5,r3
 200ece8:	1009883a 	mov	r4,r2
 200ecec:	20004f00 	call	20004f0 <main>
 200ecf0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 200ecf4:	01000044 	movi	r4,1
 200ecf8:	200e7a40 	call	200e7a4 <close>
  exit (result);
 200ecfc:	e13fff17 	ldw	r4,-4(fp)
 200ed00:	2010c080 	call	2010c08 <exit>

0200ed04 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 200ed04:	defffe04 	addi	sp,sp,-8
 200ed08:	df000115 	stw	fp,4(sp)
 200ed0c:	df000104 	addi	fp,sp,4
 200ed10:	e13fff15 	stw	r4,-4(fp)
}
 200ed14:	0001883a 	nop
 200ed18:	e037883a 	mov	sp,fp
 200ed1c:	df000017 	ldw	fp,0(sp)
 200ed20:	dec00104 	addi	sp,sp,4
 200ed24:	f800283a 	ret

0200ed28 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 200ed28:	defffe04 	addi	sp,sp,-8
 200ed2c:	df000115 	stw	fp,4(sp)
 200ed30:	df000104 	addi	fp,sp,4
 200ed34:	e13fff15 	stw	r4,-4(fp)
}
 200ed38:	0001883a 	nop
 200ed3c:	e037883a 	mov	sp,fp
 200ed40:	df000017 	ldw	fp,0(sp)
 200ed44:	dec00104 	addi	sp,sp,4
 200ed48:	f800283a 	ret

0200ed4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200ed4c:	defffe04 	addi	sp,sp,-8
 200ed50:	dfc00115 	stw	ra,4(sp)
 200ed54:	df000015 	stw	fp,0(sp)
 200ed58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200ed5c:	d0a00b17 	ldw	r2,-32724(gp)
 200ed60:	10000326 	beq	r2,zero,200ed70 <alt_get_errno+0x24>
 200ed64:	d0a00b17 	ldw	r2,-32724(gp)
 200ed68:	103ee83a 	callr	r2
 200ed6c:	00000106 	br	200ed74 <alt_get_errno+0x28>
 200ed70:	d0a6d204 	addi	r2,gp,-25784
}
 200ed74:	e037883a 	mov	sp,fp
 200ed78:	dfc00117 	ldw	ra,4(sp)
 200ed7c:	df000017 	ldw	fp,0(sp)
 200ed80:	dec00204 	addi	sp,sp,8
 200ed84:	f800283a 	ret

0200ed88 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 200ed88:	defff904 	addi	sp,sp,-28
 200ed8c:	dfc00615 	stw	ra,24(sp)
 200ed90:	df000515 	stw	fp,20(sp)
 200ed94:	df000504 	addi	fp,sp,20
 200ed98:	e13ffd15 	stw	r4,-12(fp)
 200ed9c:	e17ffe15 	stw	r5,-8(fp)
 200eda0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200eda4:	e0bffd17 	ldw	r2,-12(fp)
 200eda8:	10000816 	blt	r2,zero,200edcc <read+0x44>
 200edac:	01400304 	movi	r5,12
 200edb0:	e13ffd17 	ldw	r4,-12(fp)
 200edb4:	20018280 	call	2001828 <__mulsi3>
 200edb8:	1007883a 	mov	r3,r2
 200edbc:	00808074 	movhi	r2,513
 200edc0:	1086f304 	addi	r2,r2,7116
 200edc4:	1885883a 	add	r2,r3,r2
 200edc8:	00000106 	br	200edd0 <read+0x48>
 200edcc:	0005883a 	mov	r2,zero
 200edd0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 200edd4:	e0bffb17 	ldw	r2,-20(fp)
 200edd8:	10002226 	beq	r2,zero,200ee64 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 200eddc:	e0bffb17 	ldw	r2,-20(fp)
 200ede0:	10800217 	ldw	r2,8(r2)
 200ede4:	108000cc 	andi	r2,r2,3
 200ede8:	10800060 	cmpeqi	r2,r2,1
 200edec:	1000181e 	bne	r2,zero,200ee50 <read+0xc8>
        (fd->dev->read))
 200edf0:	e0bffb17 	ldw	r2,-20(fp)
 200edf4:	10800017 	ldw	r2,0(r2)
 200edf8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 200edfc:	10001426 	beq	r2,zero,200ee50 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 200ee00:	e0bffb17 	ldw	r2,-20(fp)
 200ee04:	10800017 	ldw	r2,0(r2)
 200ee08:	10800517 	ldw	r2,20(r2)
 200ee0c:	e0ffff17 	ldw	r3,-4(fp)
 200ee10:	180d883a 	mov	r6,r3
 200ee14:	e17ffe17 	ldw	r5,-8(fp)
 200ee18:	e13ffb17 	ldw	r4,-20(fp)
 200ee1c:	103ee83a 	callr	r2
 200ee20:	e0bffc15 	stw	r2,-16(fp)
 200ee24:	e0bffc17 	ldw	r2,-16(fp)
 200ee28:	1000070e 	bge	r2,zero,200ee48 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 200ee2c:	200ed4c0 	call	200ed4c <alt_get_errno>
 200ee30:	1007883a 	mov	r3,r2
 200ee34:	e0bffc17 	ldw	r2,-16(fp)
 200ee38:	0085c83a 	sub	r2,zero,r2
 200ee3c:	18800015 	stw	r2,0(r3)
          return -1;
 200ee40:	00bfffc4 	movi	r2,-1
 200ee44:	00000c06 	br	200ee78 <read+0xf0>
        }
        return rval;
 200ee48:	e0bffc17 	ldw	r2,-16(fp)
 200ee4c:	00000a06 	br	200ee78 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 200ee50:	200ed4c0 	call	200ed4c <alt_get_errno>
 200ee54:	1007883a 	mov	r3,r2
 200ee58:	00800344 	movi	r2,13
 200ee5c:	18800015 	stw	r2,0(r3)
 200ee60:	00000406 	br	200ee74 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 200ee64:	200ed4c0 	call	200ed4c <alt_get_errno>
 200ee68:	1007883a 	mov	r3,r2
 200ee6c:	00801444 	movi	r2,81
 200ee70:	18800015 	stw	r2,0(r3)
  }
  return -1;
 200ee74:	00bfffc4 	movi	r2,-1
}
 200ee78:	e037883a 	mov	sp,fp
 200ee7c:	dfc00117 	ldw	ra,4(sp)
 200ee80:	df000017 	ldw	fp,0(sp)
 200ee84:	dec00204 	addi	sp,sp,8
 200ee88:	f800283a 	ret

0200ee8c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 200ee8c:	defffc04 	addi	sp,sp,-16
 200ee90:	dfc00315 	stw	ra,12(sp)
 200ee94:	df000215 	stw	fp,8(sp)
 200ee98:	dc000115 	stw	r16,4(sp)
 200ee9c:	df000204 	addi	fp,sp,8
 200eea0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 200eea4:	e0bffe17 	ldw	r2,-8(fp)
 200eea8:	108000d0 	cmplti	r2,r2,3
 200eeac:	1000111e 	bne	r2,zero,200eef4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 200eeb0:	04008074 	movhi	r16,513
 200eeb4:	8406f304 	addi	r16,r16,7116
 200eeb8:	e0bffe17 	ldw	r2,-8(fp)
 200eebc:	01400304 	movi	r5,12
 200eec0:	1009883a 	mov	r4,r2
 200eec4:	20018280 	call	2001828 <__mulsi3>
 200eec8:	8085883a 	add	r2,r16,r2
 200eecc:	10800204 	addi	r2,r2,8
 200eed0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 200eed4:	04008074 	movhi	r16,513
 200eed8:	8406f304 	addi	r16,r16,7116
 200eedc:	e0bffe17 	ldw	r2,-8(fp)
 200eee0:	01400304 	movi	r5,12
 200eee4:	1009883a 	mov	r4,r2
 200eee8:	20018280 	call	2001828 <__mulsi3>
 200eeec:	8085883a 	add	r2,r16,r2
 200eef0:	10000015 	stw	zero,0(r2)
  }
}
 200eef4:	0001883a 	nop
 200eef8:	e6ffff04 	addi	sp,fp,-4
 200eefc:	dfc00217 	ldw	ra,8(sp)
 200ef00:	df000117 	ldw	fp,4(sp)
 200ef04:	dc000017 	ldw	r16,0(sp)
 200ef08:	dec00304 	addi	sp,sp,12
 200ef0c:	f800283a 	ret

0200ef10 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 200ef10:	defff904 	addi	sp,sp,-28
 200ef14:	df000615 	stw	fp,24(sp)
 200ef18:	df000604 	addi	fp,sp,24
 200ef1c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ef20:	0005303a 	rdctl	r2,status
 200ef24:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ef28:	e0fffe17 	ldw	r3,-8(fp)
 200ef2c:	00bfff84 	movi	r2,-2
 200ef30:	1884703a 	and	r2,r3,r2
 200ef34:	1001703a 	wrctl	status,r2
  
  return context;
 200ef38:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 200ef3c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 200ef40:	d0a00c17 	ldw	r2,-32720(gp)
 200ef44:	10c000c4 	addi	r3,r2,3
 200ef48:	00bfff04 	movi	r2,-4
 200ef4c:	1884703a 	and	r2,r3,r2
 200ef50:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 200ef54:	d0e00c17 	ldw	r3,-32720(gp)
 200ef58:	e0bfff17 	ldw	r2,-4(fp)
 200ef5c:	1887883a 	add	r3,r3,r2
 200ef60:	0080c034 	movhi	r2,768
 200ef64:	10800004 	addi	r2,r2,0
 200ef68:	10c0062e 	bgeu	r2,r3,200ef84 <sbrk+0x74>
 200ef6c:	e0bffb17 	ldw	r2,-20(fp)
 200ef70:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200ef74:	e0bffa17 	ldw	r2,-24(fp)
 200ef78:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 200ef7c:	00bfffc4 	movi	r2,-1
 200ef80:	00000b06 	br	200efb0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 200ef84:	d0a00c17 	ldw	r2,-32720(gp)
 200ef88:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 200ef8c:	d0e00c17 	ldw	r3,-32720(gp)
 200ef90:	e0bfff17 	ldw	r2,-4(fp)
 200ef94:	1885883a 	add	r2,r3,r2
 200ef98:	d0a00c15 	stw	r2,-32720(gp)
 200ef9c:	e0bffb17 	ldw	r2,-20(fp)
 200efa0:	e0bffc15 	stw	r2,-16(fp)
 200efa4:	e0bffc17 	ldw	r2,-16(fp)
 200efa8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 200efac:	e0bffd17 	ldw	r2,-12(fp)
} 
 200efb0:	e037883a 	mov	sp,fp
 200efb4:	df000017 	ldw	fp,0(sp)
 200efb8:	dec00104 	addi	sp,sp,4
 200efbc:	f800283a 	ret

0200efc0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 200efc0:	defffd04 	addi	sp,sp,-12
 200efc4:	dfc00215 	stw	ra,8(sp)
 200efc8:	df000115 	stw	fp,4(sp)
 200efcc:	df000104 	addi	fp,sp,4
 200efd0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 200efd4:	e13fff17 	ldw	r4,-4(fp)
 200efd8:	200fd780 	call	200fd78 <alt_busy_sleep>
}
 200efdc:	e037883a 	mov	sp,fp
 200efe0:	dfc00117 	ldw	ra,4(sp)
 200efe4:	df000017 	ldw	fp,0(sp)
 200efe8:	dec00204 	addi	sp,sp,8
 200efec:	f800283a 	ret

0200eff0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200eff0:	defffe04 	addi	sp,sp,-8
 200eff4:	dfc00115 	stw	ra,4(sp)
 200eff8:	df000015 	stw	fp,0(sp)
 200effc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200f000:	d0a00b17 	ldw	r2,-32724(gp)
 200f004:	10000326 	beq	r2,zero,200f014 <alt_get_errno+0x24>
 200f008:	d0a00b17 	ldw	r2,-32724(gp)
 200f00c:	103ee83a 	callr	r2
 200f010:	00000106 	br	200f018 <alt_get_errno+0x28>
 200f014:	d0a6d204 	addi	r2,gp,-25784
}
 200f018:	e037883a 	mov	sp,fp
 200f01c:	dfc00117 	ldw	ra,4(sp)
 200f020:	df000017 	ldw	fp,0(sp)
 200f024:	dec00204 	addi	sp,sp,8
 200f028:	f800283a 	ret

0200f02c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 200f02c:	defff904 	addi	sp,sp,-28
 200f030:	dfc00615 	stw	ra,24(sp)
 200f034:	df000515 	stw	fp,20(sp)
 200f038:	df000504 	addi	fp,sp,20
 200f03c:	e13ffd15 	stw	r4,-12(fp)
 200f040:	e17ffe15 	stw	r5,-8(fp)
 200f044:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200f048:	e0bffd17 	ldw	r2,-12(fp)
 200f04c:	10000816 	blt	r2,zero,200f070 <write+0x44>
 200f050:	01400304 	movi	r5,12
 200f054:	e13ffd17 	ldw	r4,-12(fp)
 200f058:	20018280 	call	2001828 <__mulsi3>
 200f05c:	1007883a 	mov	r3,r2
 200f060:	00808074 	movhi	r2,513
 200f064:	1086f304 	addi	r2,r2,7116
 200f068:	1885883a 	add	r2,r3,r2
 200f06c:	00000106 	br	200f074 <write+0x48>
 200f070:	0005883a 	mov	r2,zero
 200f074:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 200f078:	e0bffb17 	ldw	r2,-20(fp)
 200f07c:	10002126 	beq	r2,zero,200f104 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 200f080:	e0bffb17 	ldw	r2,-20(fp)
 200f084:	10800217 	ldw	r2,8(r2)
 200f088:	108000cc 	andi	r2,r2,3
 200f08c:	10001826 	beq	r2,zero,200f0f0 <write+0xc4>
 200f090:	e0bffb17 	ldw	r2,-20(fp)
 200f094:	10800017 	ldw	r2,0(r2)
 200f098:	10800617 	ldw	r2,24(r2)
 200f09c:	10001426 	beq	r2,zero,200f0f0 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 200f0a0:	e0bffb17 	ldw	r2,-20(fp)
 200f0a4:	10800017 	ldw	r2,0(r2)
 200f0a8:	10800617 	ldw	r2,24(r2)
 200f0ac:	e0ffff17 	ldw	r3,-4(fp)
 200f0b0:	180d883a 	mov	r6,r3
 200f0b4:	e17ffe17 	ldw	r5,-8(fp)
 200f0b8:	e13ffb17 	ldw	r4,-20(fp)
 200f0bc:	103ee83a 	callr	r2
 200f0c0:	e0bffc15 	stw	r2,-16(fp)
 200f0c4:	e0bffc17 	ldw	r2,-16(fp)
 200f0c8:	1000070e 	bge	r2,zero,200f0e8 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 200f0cc:	200eff00 	call	200eff0 <alt_get_errno>
 200f0d0:	1007883a 	mov	r3,r2
 200f0d4:	e0bffc17 	ldw	r2,-16(fp)
 200f0d8:	0085c83a 	sub	r2,zero,r2
 200f0dc:	18800015 	stw	r2,0(r3)
        return -1;
 200f0e0:	00bfffc4 	movi	r2,-1
 200f0e4:	00000c06 	br	200f118 <write+0xec>
      }
      return rval;
 200f0e8:	e0bffc17 	ldw	r2,-16(fp)
 200f0ec:	00000a06 	br	200f118 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 200f0f0:	200eff00 	call	200eff0 <alt_get_errno>
 200f0f4:	1007883a 	mov	r3,r2
 200f0f8:	00800344 	movi	r2,13
 200f0fc:	18800015 	stw	r2,0(r3)
 200f100:	00000406 	br	200f114 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 200f104:	200eff00 	call	200eff0 <alt_get_errno>
 200f108:	1007883a 	mov	r3,r2
 200f10c:	00801444 	movi	r2,81
 200f110:	18800015 	stw	r2,0(r3)
  }
  return -1;
 200f114:	00bfffc4 	movi	r2,-1
}
 200f118:	e037883a 	mov	sp,fp
 200f11c:	dfc00117 	ldw	ra,4(sp)
 200f120:	df000017 	ldw	fp,0(sp)
 200f124:	dec00204 	addi	sp,sp,8
 200f128:	f800283a 	ret

0200f12c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 200f12c:	defffd04 	addi	sp,sp,-12
 200f130:	dfc00215 	stw	ra,8(sp)
 200f134:	df000115 	stw	fp,4(sp)
 200f138:	df000104 	addi	fp,sp,4
 200f13c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 200f140:	d1600804 	addi	r5,gp,-32736
 200f144:	e13fff17 	ldw	r4,-4(fp)
 200f148:	200ff2c0 	call	200ff2c <alt_dev_llist_insert>
}
 200f14c:	e037883a 	mov	sp,fp
 200f150:	dfc00117 	ldw	ra,4(sp)
 200f154:	df000017 	ldw	fp,0(sp)
 200f158:	dec00204 	addi	sp,sp,8
 200f15c:	f800283a 	ret

0200f160 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 200f160:	defffd04 	addi	sp,sp,-12
 200f164:	dfc00215 	stw	ra,8(sp)
 200f168:	df000115 	stw	fp,4(sp)
 200f16c:	df000104 	addi	fp,sp,4
 200f170:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 200f174:	20108d80 	call	20108d8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 200f178:	00800044 	movi	r2,1
 200f17c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 200f180:	0001883a 	nop
 200f184:	e037883a 	mov	sp,fp
 200f188:	dfc00117 	ldw	ra,4(sp)
 200f18c:	df000017 	ldw	fp,0(sp)
 200f190:	dec00204 	addi	sp,sp,8
 200f194:	f800283a 	ret

0200f198 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 200f198:	defffe04 	addi	sp,sp,-8
 200f19c:	dfc00115 	stw	ra,4(sp)
 200f1a0:	df000015 	stw	fp,0(sp)
 200f1a4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 200f1a8:	000d883a 	mov	r6,zero
 200f1ac:	000b883a 	mov	r5,zero
 200f1b0:	01008074 	movhi	r4,513
 200f1b4:	21075d04 	addi	r4,r4,7540
 200f1b8:	200f3480 	call	200f348 <altera_avalon_jtag_uart_init>
 200f1bc:	01008074 	movhi	r4,513
 200f1c0:	21075304 	addi	r4,r4,7500
 200f1c4:	200f12c0 	call	200f12c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 200f1c8:	0001883a 	nop
}
 200f1cc:	0001883a 	nop
 200f1d0:	e037883a 	mov	sp,fp
 200f1d4:	dfc00117 	ldw	ra,4(sp)
 200f1d8:	df000017 	ldw	fp,0(sp)
 200f1dc:	dec00204 	addi	sp,sp,8
 200f1e0:	f800283a 	ret

0200f1e4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 200f1e4:	defffa04 	addi	sp,sp,-24
 200f1e8:	dfc00515 	stw	ra,20(sp)
 200f1ec:	df000415 	stw	fp,16(sp)
 200f1f0:	df000404 	addi	fp,sp,16
 200f1f4:	e13ffd15 	stw	r4,-12(fp)
 200f1f8:	e17ffe15 	stw	r5,-8(fp)
 200f1fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200f200:	e0bffd17 	ldw	r2,-12(fp)
 200f204:	10800017 	ldw	r2,0(r2)
 200f208:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 200f20c:	e0bffc17 	ldw	r2,-16(fp)
 200f210:	10c00a04 	addi	r3,r2,40
 200f214:	e0bffd17 	ldw	r2,-12(fp)
 200f218:	10800217 	ldw	r2,8(r2)
 200f21c:	100f883a 	mov	r7,r2
 200f220:	e1bfff17 	ldw	r6,-4(fp)
 200f224:	e17ffe17 	ldw	r5,-8(fp)
 200f228:	1809883a 	mov	r4,r3
 200f22c:	200f80c0 	call	200f80c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 200f230:	e037883a 	mov	sp,fp
 200f234:	dfc00117 	ldw	ra,4(sp)
 200f238:	df000017 	ldw	fp,0(sp)
 200f23c:	dec00204 	addi	sp,sp,8
 200f240:	f800283a 	ret

0200f244 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 200f244:	defffa04 	addi	sp,sp,-24
 200f248:	dfc00515 	stw	ra,20(sp)
 200f24c:	df000415 	stw	fp,16(sp)
 200f250:	df000404 	addi	fp,sp,16
 200f254:	e13ffd15 	stw	r4,-12(fp)
 200f258:	e17ffe15 	stw	r5,-8(fp)
 200f25c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200f260:	e0bffd17 	ldw	r2,-12(fp)
 200f264:	10800017 	ldw	r2,0(r2)
 200f268:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 200f26c:	e0bffc17 	ldw	r2,-16(fp)
 200f270:	10c00a04 	addi	r3,r2,40
 200f274:	e0bffd17 	ldw	r2,-12(fp)
 200f278:	10800217 	ldw	r2,8(r2)
 200f27c:	100f883a 	mov	r7,r2
 200f280:	e1bfff17 	ldw	r6,-4(fp)
 200f284:	e17ffe17 	ldw	r5,-8(fp)
 200f288:	1809883a 	mov	r4,r3
 200f28c:	200fa280 	call	200fa28 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 200f290:	e037883a 	mov	sp,fp
 200f294:	dfc00117 	ldw	ra,4(sp)
 200f298:	df000017 	ldw	fp,0(sp)
 200f29c:	dec00204 	addi	sp,sp,8
 200f2a0:	f800283a 	ret

0200f2a4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 200f2a4:	defffc04 	addi	sp,sp,-16
 200f2a8:	dfc00315 	stw	ra,12(sp)
 200f2ac:	df000215 	stw	fp,8(sp)
 200f2b0:	df000204 	addi	fp,sp,8
 200f2b4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200f2b8:	e0bfff17 	ldw	r2,-4(fp)
 200f2bc:	10800017 	ldw	r2,0(r2)
 200f2c0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 200f2c4:	e0bffe17 	ldw	r2,-8(fp)
 200f2c8:	10c00a04 	addi	r3,r2,40
 200f2cc:	e0bfff17 	ldw	r2,-4(fp)
 200f2d0:	10800217 	ldw	r2,8(r2)
 200f2d4:	100b883a 	mov	r5,r2
 200f2d8:	1809883a 	mov	r4,r3
 200f2dc:	200f6b40 	call	200f6b4 <altera_avalon_jtag_uart_close>
}
 200f2e0:	e037883a 	mov	sp,fp
 200f2e4:	dfc00117 	ldw	ra,4(sp)
 200f2e8:	df000017 	ldw	fp,0(sp)
 200f2ec:	dec00204 	addi	sp,sp,8
 200f2f0:	f800283a 	ret

0200f2f4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 200f2f4:	defffa04 	addi	sp,sp,-24
 200f2f8:	dfc00515 	stw	ra,20(sp)
 200f2fc:	df000415 	stw	fp,16(sp)
 200f300:	df000404 	addi	fp,sp,16
 200f304:	e13ffd15 	stw	r4,-12(fp)
 200f308:	e17ffe15 	stw	r5,-8(fp)
 200f30c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 200f310:	e0bffd17 	ldw	r2,-12(fp)
 200f314:	10800017 	ldw	r2,0(r2)
 200f318:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 200f31c:	e0bffc17 	ldw	r2,-16(fp)
 200f320:	10800a04 	addi	r2,r2,40
 200f324:	e1bfff17 	ldw	r6,-4(fp)
 200f328:	e17ffe17 	ldw	r5,-8(fp)
 200f32c:	1009883a 	mov	r4,r2
 200f330:	200f71c0 	call	200f71c <altera_avalon_jtag_uart_ioctl>
}
 200f334:	e037883a 	mov	sp,fp
 200f338:	dfc00117 	ldw	ra,4(sp)
 200f33c:	df000017 	ldw	fp,0(sp)
 200f340:	dec00204 	addi	sp,sp,8
 200f344:	f800283a 	ret

0200f348 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 200f348:	defffa04 	addi	sp,sp,-24
 200f34c:	dfc00515 	stw	ra,20(sp)
 200f350:	df000415 	stw	fp,16(sp)
 200f354:	df000404 	addi	fp,sp,16
 200f358:	e13ffd15 	stw	r4,-12(fp)
 200f35c:	e17ffe15 	stw	r5,-8(fp)
 200f360:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200f364:	e0bffd17 	ldw	r2,-12(fp)
 200f368:	00c00044 	movi	r3,1
 200f36c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 200f370:	e0bffd17 	ldw	r2,-12(fp)
 200f374:	10800017 	ldw	r2,0(r2)
 200f378:	10800104 	addi	r2,r2,4
 200f37c:	1007883a 	mov	r3,r2
 200f380:	e0bffd17 	ldw	r2,-12(fp)
 200f384:	10800817 	ldw	r2,32(r2)
 200f388:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 200f38c:	e0bffe17 	ldw	r2,-8(fp)
 200f390:	e0ffff17 	ldw	r3,-4(fp)
 200f394:	d8000015 	stw	zero,0(sp)
 200f398:	e1fffd17 	ldw	r7,-12(fp)
 200f39c:	01808074 	movhi	r6,513
 200f3a0:	31bd0204 	addi	r6,r6,-3064
 200f3a4:	180b883a 	mov	r5,r3
 200f3a8:	1009883a 	mov	r4,r2
 200f3ac:	20100b00 	call	20100b0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 200f3b0:	e0bffd17 	ldw	r2,-12(fp)
 200f3b4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 200f3b8:	e0bffd17 	ldw	r2,-12(fp)
 200f3bc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 200f3c0:	d0e6d717 	ldw	r3,-25764(gp)
 200f3c4:	e1fffd17 	ldw	r7,-12(fp)
 200f3c8:	01808074 	movhi	r6,513
 200f3cc:	31bd8504 	addi	r6,r6,-2540
 200f3d0:	180b883a 	mov	r5,r3
 200f3d4:	1009883a 	mov	r4,r2
 200f3d8:	200fc4c0 	call	200fc4c <alt_alarm_start>
 200f3dc:	1000040e 	bge	r2,zero,200f3f0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 200f3e0:	e0fffd17 	ldw	r3,-12(fp)
 200f3e4:	00a00034 	movhi	r2,32768
 200f3e8:	10bfffc4 	addi	r2,r2,-1
 200f3ec:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 200f3f0:	0001883a 	nop
 200f3f4:	e037883a 	mov	sp,fp
 200f3f8:	dfc00117 	ldw	ra,4(sp)
 200f3fc:	df000017 	ldw	fp,0(sp)
 200f400:	dec00204 	addi	sp,sp,8
 200f404:	f800283a 	ret

0200f408 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 200f408:	defff804 	addi	sp,sp,-32
 200f40c:	df000715 	stw	fp,28(sp)
 200f410:	df000704 	addi	fp,sp,28
 200f414:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 200f418:	e0bfff17 	ldw	r2,-4(fp)
 200f41c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 200f420:	e0bffb17 	ldw	r2,-20(fp)
 200f424:	10800017 	ldw	r2,0(r2)
 200f428:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200f42c:	e0bffc17 	ldw	r2,-16(fp)
 200f430:	10800104 	addi	r2,r2,4
 200f434:	10800037 	ldwio	r2,0(r2)
 200f438:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 200f43c:	e0bffd17 	ldw	r2,-12(fp)
 200f440:	1080c00c 	andi	r2,r2,768
 200f444:	10006d26 	beq	r2,zero,200f5fc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 200f448:	e0bffd17 	ldw	r2,-12(fp)
 200f44c:	1080400c 	andi	r2,r2,256
 200f450:	10003526 	beq	r2,zero,200f528 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 200f454:	00800074 	movhi	r2,1
 200f458:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200f45c:	e0bffb17 	ldw	r2,-20(fp)
 200f460:	10800a17 	ldw	r2,40(r2)
 200f464:	10800044 	addi	r2,r2,1
 200f468:	1081ffcc 	andi	r2,r2,2047
 200f46c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 200f470:	e0bffb17 	ldw	r2,-20(fp)
 200f474:	10c00b17 	ldw	r3,44(r2)
 200f478:	e0bffe17 	ldw	r2,-8(fp)
 200f47c:	18801526 	beq	r3,r2,200f4d4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 200f480:	e0bffc17 	ldw	r2,-16(fp)
 200f484:	10800037 	ldwio	r2,0(r2)
 200f488:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 200f48c:	e0bff917 	ldw	r2,-28(fp)
 200f490:	10a0000c 	andi	r2,r2,32768
 200f494:	10001126 	beq	r2,zero,200f4dc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 200f498:	e0bffb17 	ldw	r2,-20(fp)
 200f49c:	10800a17 	ldw	r2,40(r2)
 200f4a0:	e0fff917 	ldw	r3,-28(fp)
 200f4a4:	1809883a 	mov	r4,r3
 200f4a8:	e0fffb17 	ldw	r3,-20(fp)
 200f4ac:	1885883a 	add	r2,r3,r2
 200f4b0:	10800e04 	addi	r2,r2,56
 200f4b4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200f4b8:	e0bffb17 	ldw	r2,-20(fp)
 200f4bc:	10800a17 	ldw	r2,40(r2)
 200f4c0:	10800044 	addi	r2,r2,1
 200f4c4:	10c1ffcc 	andi	r3,r2,2047
 200f4c8:	e0bffb17 	ldw	r2,-20(fp)
 200f4cc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 200f4d0:	003fe206 	br	200f45c <__alt_data_end+0xff00f45c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 200f4d4:	0001883a 	nop
 200f4d8:	00000106 	br	200f4e0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 200f4dc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 200f4e0:	e0bff917 	ldw	r2,-28(fp)
 200f4e4:	10bfffec 	andhi	r2,r2,65535
 200f4e8:	10000f26 	beq	r2,zero,200f528 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200f4ec:	e0bffb17 	ldw	r2,-20(fp)
 200f4f0:	10c00817 	ldw	r3,32(r2)
 200f4f4:	00bfff84 	movi	r2,-2
 200f4f8:	1886703a 	and	r3,r3,r2
 200f4fc:	e0bffb17 	ldw	r2,-20(fp)
 200f500:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 200f504:	e0bffc17 	ldw	r2,-16(fp)
 200f508:	10800104 	addi	r2,r2,4
 200f50c:	1007883a 	mov	r3,r2
 200f510:	e0bffb17 	ldw	r2,-20(fp)
 200f514:	10800817 	ldw	r2,32(r2)
 200f518:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200f51c:	e0bffc17 	ldw	r2,-16(fp)
 200f520:	10800104 	addi	r2,r2,4
 200f524:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 200f528:	e0bffd17 	ldw	r2,-12(fp)
 200f52c:	1080800c 	andi	r2,r2,512
 200f530:	103fbe26 	beq	r2,zero,200f42c <__alt_data_end+0xff00f42c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 200f534:	e0bffd17 	ldw	r2,-12(fp)
 200f538:	1004d43a 	srli	r2,r2,16
 200f53c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 200f540:	00001406 	br	200f594 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 200f544:	e0bffc17 	ldw	r2,-16(fp)
 200f548:	e0fffb17 	ldw	r3,-20(fp)
 200f54c:	18c00d17 	ldw	r3,52(r3)
 200f550:	e13ffb17 	ldw	r4,-20(fp)
 200f554:	20c7883a 	add	r3,r4,r3
 200f558:	18c20e04 	addi	r3,r3,2104
 200f55c:	18c00003 	ldbu	r3,0(r3)
 200f560:	18c03fcc 	andi	r3,r3,255
 200f564:	18c0201c 	xori	r3,r3,128
 200f568:	18ffe004 	addi	r3,r3,-128
 200f56c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200f570:	e0bffb17 	ldw	r2,-20(fp)
 200f574:	10800d17 	ldw	r2,52(r2)
 200f578:	10800044 	addi	r2,r2,1
 200f57c:	10c1ffcc 	andi	r3,r2,2047
 200f580:	e0bffb17 	ldw	r2,-20(fp)
 200f584:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 200f588:	e0bffa17 	ldw	r2,-24(fp)
 200f58c:	10bfffc4 	addi	r2,r2,-1
 200f590:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 200f594:	e0bffa17 	ldw	r2,-24(fp)
 200f598:	10000526 	beq	r2,zero,200f5b0 <altera_avalon_jtag_uart_irq+0x1a8>
 200f59c:	e0bffb17 	ldw	r2,-20(fp)
 200f5a0:	10c00d17 	ldw	r3,52(r2)
 200f5a4:	e0bffb17 	ldw	r2,-20(fp)
 200f5a8:	10800c17 	ldw	r2,48(r2)
 200f5ac:	18bfe51e 	bne	r3,r2,200f544 <__alt_data_end+0xff00f544>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 200f5b0:	e0bffa17 	ldw	r2,-24(fp)
 200f5b4:	103f9d26 	beq	r2,zero,200f42c <__alt_data_end+0xff00f42c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 200f5b8:	e0bffb17 	ldw	r2,-20(fp)
 200f5bc:	10c00817 	ldw	r3,32(r2)
 200f5c0:	00bfff44 	movi	r2,-3
 200f5c4:	1886703a 	and	r3,r3,r2
 200f5c8:	e0bffb17 	ldw	r2,-20(fp)
 200f5cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200f5d0:	e0bffb17 	ldw	r2,-20(fp)
 200f5d4:	10800017 	ldw	r2,0(r2)
 200f5d8:	10800104 	addi	r2,r2,4
 200f5dc:	1007883a 	mov	r3,r2
 200f5e0:	e0bffb17 	ldw	r2,-20(fp)
 200f5e4:	10800817 	ldw	r2,32(r2)
 200f5e8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200f5ec:	e0bffc17 	ldw	r2,-16(fp)
 200f5f0:	10800104 	addi	r2,r2,4
 200f5f4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 200f5f8:	003f8c06 	br	200f42c <__alt_data_end+0xff00f42c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 200f5fc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 200f600:	0001883a 	nop
 200f604:	e037883a 	mov	sp,fp
 200f608:	df000017 	ldw	fp,0(sp)
 200f60c:	dec00104 	addi	sp,sp,4
 200f610:	f800283a 	ret

0200f614 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 200f614:	defff804 	addi	sp,sp,-32
 200f618:	df000715 	stw	fp,28(sp)
 200f61c:	df000704 	addi	fp,sp,28
 200f620:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 200f624:	e0bffb17 	ldw	r2,-20(fp)
 200f628:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 200f62c:	e0bff917 	ldw	r2,-28(fp)
 200f630:	10800017 	ldw	r2,0(r2)
 200f634:	10800104 	addi	r2,r2,4
 200f638:	10800037 	ldwio	r2,0(r2)
 200f63c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 200f640:	e0bffa17 	ldw	r2,-24(fp)
 200f644:	1081000c 	andi	r2,r2,1024
 200f648:	10000b26 	beq	r2,zero,200f678 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 200f64c:	e0bff917 	ldw	r2,-28(fp)
 200f650:	10800017 	ldw	r2,0(r2)
 200f654:	10800104 	addi	r2,r2,4
 200f658:	1007883a 	mov	r3,r2
 200f65c:	e0bff917 	ldw	r2,-28(fp)
 200f660:	10800817 	ldw	r2,32(r2)
 200f664:	10810014 	ori	r2,r2,1024
 200f668:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 200f66c:	e0bff917 	ldw	r2,-28(fp)
 200f670:	10000915 	stw	zero,36(r2)
 200f674:	00000a06 	br	200f6a0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 200f678:	e0bff917 	ldw	r2,-28(fp)
 200f67c:	10c00917 	ldw	r3,36(r2)
 200f680:	00a00034 	movhi	r2,32768
 200f684:	10bfff04 	addi	r2,r2,-4
 200f688:	10c00536 	bltu	r2,r3,200f6a0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 200f68c:	e0bff917 	ldw	r2,-28(fp)
 200f690:	10800917 	ldw	r2,36(r2)
 200f694:	10c00044 	addi	r3,r2,1
 200f698:	e0bff917 	ldw	r2,-28(fp)
 200f69c:	10c00915 	stw	r3,36(r2)
 200f6a0:	d0a6d717 	ldw	r2,-25764(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 200f6a4:	e037883a 	mov	sp,fp
 200f6a8:	df000017 	ldw	fp,0(sp)
 200f6ac:	dec00104 	addi	sp,sp,4
 200f6b0:	f800283a 	ret

0200f6b4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 200f6b4:	defffd04 	addi	sp,sp,-12
 200f6b8:	df000215 	stw	fp,8(sp)
 200f6bc:	df000204 	addi	fp,sp,8
 200f6c0:	e13ffe15 	stw	r4,-8(fp)
 200f6c4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 200f6c8:	00000506 	br	200f6e0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 200f6cc:	e0bfff17 	ldw	r2,-4(fp)
 200f6d0:	1090000c 	andi	r2,r2,16384
 200f6d4:	10000226 	beq	r2,zero,200f6e0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 200f6d8:	00bffd44 	movi	r2,-11
 200f6dc:	00000b06 	br	200f70c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 200f6e0:	e0bffe17 	ldw	r2,-8(fp)
 200f6e4:	10c00d17 	ldw	r3,52(r2)
 200f6e8:	e0bffe17 	ldw	r2,-8(fp)
 200f6ec:	10800c17 	ldw	r2,48(r2)
 200f6f0:	18800526 	beq	r3,r2,200f708 <altera_avalon_jtag_uart_close+0x54>
 200f6f4:	e0bffe17 	ldw	r2,-8(fp)
 200f6f8:	10c00917 	ldw	r3,36(r2)
 200f6fc:	e0bffe17 	ldw	r2,-8(fp)
 200f700:	10800117 	ldw	r2,4(r2)
 200f704:	18bff136 	bltu	r3,r2,200f6cc <__alt_data_end+0xff00f6cc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 200f708:	0005883a 	mov	r2,zero
}
 200f70c:	e037883a 	mov	sp,fp
 200f710:	df000017 	ldw	fp,0(sp)
 200f714:	dec00104 	addi	sp,sp,4
 200f718:	f800283a 	ret

0200f71c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 200f71c:	defffa04 	addi	sp,sp,-24
 200f720:	df000515 	stw	fp,20(sp)
 200f724:	df000504 	addi	fp,sp,20
 200f728:	e13ffd15 	stw	r4,-12(fp)
 200f72c:	e17ffe15 	stw	r5,-8(fp)
 200f730:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 200f734:	00bff9c4 	movi	r2,-25
 200f738:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 200f73c:	e0bffe17 	ldw	r2,-8(fp)
 200f740:	10da8060 	cmpeqi	r3,r2,27137
 200f744:	1800031e 	bne	r3,zero,200f754 <altera_avalon_jtag_uart_ioctl+0x38>
 200f748:	109a80a0 	cmpeqi	r2,r2,27138
 200f74c:	1000181e 	bne	r2,zero,200f7b0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 200f750:	00002906 	br	200f7f8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 200f754:	e0bffd17 	ldw	r2,-12(fp)
 200f758:	10c00117 	ldw	r3,4(r2)
 200f75c:	00a00034 	movhi	r2,32768
 200f760:	10bfffc4 	addi	r2,r2,-1
 200f764:	18802126 	beq	r3,r2,200f7ec <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 200f768:	e0bfff17 	ldw	r2,-4(fp)
 200f76c:	10800017 	ldw	r2,0(r2)
 200f770:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 200f774:	e0bffc17 	ldw	r2,-16(fp)
 200f778:	10800090 	cmplti	r2,r2,2
 200f77c:	1000061e 	bne	r2,zero,200f798 <altera_avalon_jtag_uart_ioctl+0x7c>
 200f780:	e0fffc17 	ldw	r3,-16(fp)
 200f784:	00a00034 	movhi	r2,32768
 200f788:	10bfffc4 	addi	r2,r2,-1
 200f78c:	18800226 	beq	r3,r2,200f798 <altera_avalon_jtag_uart_ioctl+0x7c>
 200f790:	e0bffc17 	ldw	r2,-16(fp)
 200f794:	00000206 	br	200f7a0 <altera_avalon_jtag_uart_ioctl+0x84>
 200f798:	00a00034 	movhi	r2,32768
 200f79c:	10bfff84 	addi	r2,r2,-2
 200f7a0:	e0fffd17 	ldw	r3,-12(fp)
 200f7a4:	18800115 	stw	r2,4(r3)
      rc = 0;
 200f7a8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 200f7ac:	00000f06 	br	200f7ec <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 200f7b0:	e0bffd17 	ldw	r2,-12(fp)
 200f7b4:	10c00117 	ldw	r3,4(r2)
 200f7b8:	00a00034 	movhi	r2,32768
 200f7bc:	10bfffc4 	addi	r2,r2,-1
 200f7c0:	18800c26 	beq	r3,r2,200f7f4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 200f7c4:	e0bffd17 	ldw	r2,-12(fp)
 200f7c8:	10c00917 	ldw	r3,36(r2)
 200f7cc:	e0bffd17 	ldw	r2,-12(fp)
 200f7d0:	10800117 	ldw	r2,4(r2)
 200f7d4:	1885803a 	cmpltu	r2,r3,r2
 200f7d8:	10c03fcc 	andi	r3,r2,255
 200f7dc:	e0bfff17 	ldw	r2,-4(fp)
 200f7e0:	10c00015 	stw	r3,0(r2)
      rc = 0;
 200f7e4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 200f7e8:	00000206 	br	200f7f4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 200f7ec:	0001883a 	nop
 200f7f0:	00000106 	br	200f7f8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 200f7f4:	0001883a 	nop

  default:
    break;
  }

  return rc;
 200f7f8:	e0bffb17 	ldw	r2,-20(fp)
}
 200f7fc:	e037883a 	mov	sp,fp
 200f800:	df000017 	ldw	fp,0(sp)
 200f804:	dec00104 	addi	sp,sp,4
 200f808:	f800283a 	ret

0200f80c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 200f80c:	defff304 	addi	sp,sp,-52
 200f810:	dfc00c15 	stw	ra,48(sp)
 200f814:	df000b15 	stw	fp,44(sp)
 200f818:	df000b04 	addi	fp,sp,44
 200f81c:	e13ffc15 	stw	r4,-16(fp)
 200f820:	e17ffd15 	stw	r5,-12(fp)
 200f824:	e1bffe15 	stw	r6,-8(fp)
 200f828:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 200f82c:	e0bffd17 	ldw	r2,-12(fp)
 200f830:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 200f834:	00004706 	br	200f954 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 200f838:	e0bffc17 	ldw	r2,-16(fp)
 200f83c:	10800a17 	ldw	r2,40(r2)
 200f840:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 200f844:	e0bffc17 	ldw	r2,-16(fp)
 200f848:	10800b17 	ldw	r2,44(r2)
 200f84c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 200f850:	e0fff717 	ldw	r3,-36(fp)
 200f854:	e0bff817 	ldw	r2,-32(fp)
 200f858:	18800536 	bltu	r3,r2,200f870 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 200f85c:	e0fff717 	ldw	r3,-36(fp)
 200f860:	e0bff817 	ldw	r2,-32(fp)
 200f864:	1885c83a 	sub	r2,r3,r2
 200f868:	e0bff615 	stw	r2,-40(fp)
 200f86c:	00000406 	br	200f880 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 200f870:	00c20004 	movi	r3,2048
 200f874:	e0bff817 	ldw	r2,-32(fp)
 200f878:	1885c83a 	sub	r2,r3,r2
 200f87c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 200f880:	e0bff617 	ldw	r2,-40(fp)
 200f884:	10001e26 	beq	r2,zero,200f900 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 200f888:	e0fffe17 	ldw	r3,-8(fp)
 200f88c:	e0bff617 	ldw	r2,-40(fp)
 200f890:	1880022e 	bgeu	r3,r2,200f89c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 200f894:	e0bffe17 	ldw	r2,-8(fp)
 200f898:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 200f89c:	e0bffc17 	ldw	r2,-16(fp)
 200f8a0:	10c00e04 	addi	r3,r2,56
 200f8a4:	e0bff817 	ldw	r2,-32(fp)
 200f8a8:	1885883a 	add	r2,r3,r2
 200f8ac:	e1bff617 	ldw	r6,-40(fp)
 200f8b0:	100b883a 	mov	r5,r2
 200f8b4:	e13ff517 	ldw	r4,-44(fp)
 200f8b8:	20074440 	call	2007444 <memcpy>
      ptr   += n;
 200f8bc:	e0fff517 	ldw	r3,-44(fp)
 200f8c0:	e0bff617 	ldw	r2,-40(fp)
 200f8c4:	1885883a 	add	r2,r3,r2
 200f8c8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 200f8cc:	e0fffe17 	ldw	r3,-8(fp)
 200f8d0:	e0bff617 	ldw	r2,-40(fp)
 200f8d4:	1885c83a 	sub	r2,r3,r2
 200f8d8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200f8dc:	e0fff817 	ldw	r3,-32(fp)
 200f8e0:	e0bff617 	ldw	r2,-40(fp)
 200f8e4:	1885883a 	add	r2,r3,r2
 200f8e8:	10c1ffcc 	andi	r3,r2,2047
 200f8ec:	e0bffc17 	ldw	r2,-16(fp)
 200f8f0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 200f8f4:	e0bffe17 	ldw	r2,-8(fp)
 200f8f8:	00bfcf16 	blt	zero,r2,200f838 <__alt_data_end+0xff00f838>
 200f8fc:	00000106 	br	200f904 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 200f900:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 200f904:	e0fff517 	ldw	r3,-44(fp)
 200f908:	e0bffd17 	ldw	r2,-12(fp)
 200f90c:	1880141e 	bne	r3,r2,200f960 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 200f910:	e0bfff17 	ldw	r2,-4(fp)
 200f914:	1090000c 	andi	r2,r2,16384
 200f918:	1000131e 	bne	r2,zero,200f968 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 200f91c:	0001883a 	nop
 200f920:	e0bffc17 	ldw	r2,-16(fp)
 200f924:	10c00a17 	ldw	r3,40(r2)
 200f928:	e0bff717 	ldw	r2,-36(fp)
 200f92c:	1880051e 	bne	r3,r2,200f944 <altera_avalon_jtag_uart_read+0x138>
 200f930:	e0bffc17 	ldw	r2,-16(fp)
 200f934:	10c00917 	ldw	r3,36(r2)
 200f938:	e0bffc17 	ldw	r2,-16(fp)
 200f93c:	10800117 	ldw	r2,4(r2)
 200f940:	18bff736 	bltu	r3,r2,200f920 <__alt_data_end+0xff00f920>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 200f944:	e0bffc17 	ldw	r2,-16(fp)
 200f948:	10c00a17 	ldw	r3,40(r2)
 200f94c:	e0bff717 	ldw	r2,-36(fp)
 200f950:	18800726 	beq	r3,r2,200f970 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 200f954:	e0bffe17 	ldw	r2,-8(fp)
 200f958:	00bfb716 	blt	zero,r2,200f838 <__alt_data_end+0xff00f838>
 200f95c:	00000506 	br	200f974 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 200f960:	0001883a 	nop
 200f964:	00000306 	br	200f974 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 200f968:	0001883a 	nop
 200f96c:	00000106 	br	200f974 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 200f970:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 200f974:	e0fff517 	ldw	r3,-44(fp)
 200f978:	e0bffd17 	ldw	r2,-12(fp)
 200f97c:	18801826 	beq	r3,r2,200f9e0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200f980:	0005303a 	rdctl	r2,status
 200f984:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200f988:	e0fffb17 	ldw	r3,-20(fp)
 200f98c:	00bfff84 	movi	r2,-2
 200f990:	1884703a 	and	r2,r3,r2
 200f994:	1001703a 	wrctl	status,r2
  
  return context;
 200f998:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 200f99c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200f9a0:	e0bffc17 	ldw	r2,-16(fp)
 200f9a4:	10800817 	ldw	r2,32(r2)
 200f9a8:	10c00054 	ori	r3,r2,1
 200f9ac:	e0bffc17 	ldw	r2,-16(fp)
 200f9b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200f9b4:	e0bffc17 	ldw	r2,-16(fp)
 200f9b8:	10800017 	ldw	r2,0(r2)
 200f9bc:	10800104 	addi	r2,r2,4
 200f9c0:	1007883a 	mov	r3,r2
 200f9c4:	e0bffc17 	ldw	r2,-16(fp)
 200f9c8:	10800817 	ldw	r2,32(r2)
 200f9cc:	18800035 	stwio	r2,0(r3)
 200f9d0:	e0bffa17 	ldw	r2,-24(fp)
 200f9d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200f9d8:	e0bff917 	ldw	r2,-28(fp)
 200f9dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 200f9e0:	e0fff517 	ldw	r3,-44(fp)
 200f9e4:	e0bffd17 	ldw	r2,-12(fp)
 200f9e8:	18800426 	beq	r3,r2,200f9fc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 200f9ec:	e0fff517 	ldw	r3,-44(fp)
 200f9f0:	e0bffd17 	ldw	r2,-12(fp)
 200f9f4:	1885c83a 	sub	r2,r3,r2
 200f9f8:	00000606 	br	200fa14 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 200f9fc:	e0bfff17 	ldw	r2,-4(fp)
 200fa00:	1090000c 	andi	r2,r2,16384
 200fa04:	10000226 	beq	r2,zero,200fa10 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 200fa08:	00bffd44 	movi	r2,-11
 200fa0c:	00000106 	br	200fa14 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 200fa10:	00bffec4 	movi	r2,-5
}
 200fa14:	e037883a 	mov	sp,fp
 200fa18:	dfc00117 	ldw	ra,4(sp)
 200fa1c:	df000017 	ldw	fp,0(sp)
 200fa20:	dec00204 	addi	sp,sp,8
 200fa24:	f800283a 	ret

0200fa28 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 200fa28:	defff304 	addi	sp,sp,-52
 200fa2c:	dfc00c15 	stw	ra,48(sp)
 200fa30:	df000b15 	stw	fp,44(sp)
 200fa34:	df000b04 	addi	fp,sp,44
 200fa38:	e13ffc15 	stw	r4,-16(fp)
 200fa3c:	e17ffd15 	stw	r5,-12(fp)
 200fa40:	e1bffe15 	stw	r6,-8(fp)
 200fa44:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 200fa48:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 200fa4c:	e0bffd17 	ldw	r2,-12(fp)
 200fa50:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 200fa54:	00003706 	br	200fb34 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 200fa58:	e0bffc17 	ldw	r2,-16(fp)
 200fa5c:	10800c17 	ldw	r2,48(r2)
 200fa60:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 200fa64:	e0bffc17 	ldw	r2,-16(fp)
 200fa68:	10800d17 	ldw	r2,52(r2)
 200fa6c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 200fa70:	e0fff917 	ldw	r3,-28(fp)
 200fa74:	e0bff517 	ldw	r2,-44(fp)
 200fa78:	1880062e 	bgeu	r3,r2,200fa94 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 200fa7c:	e0fff517 	ldw	r3,-44(fp)
 200fa80:	e0bff917 	ldw	r2,-28(fp)
 200fa84:	1885c83a 	sub	r2,r3,r2
 200fa88:	10bfffc4 	addi	r2,r2,-1
 200fa8c:	e0bff615 	stw	r2,-40(fp)
 200fa90:	00000b06 	br	200fac0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 200fa94:	e0bff517 	ldw	r2,-44(fp)
 200fa98:	10000526 	beq	r2,zero,200fab0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 200fa9c:	00c20004 	movi	r3,2048
 200faa0:	e0bff917 	ldw	r2,-28(fp)
 200faa4:	1885c83a 	sub	r2,r3,r2
 200faa8:	e0bff615 	stw	r2,-40(fp)
 200faac:	00000406 	br	200fac0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 200fab0:	00c1ffc4 	movi	r3,2047
 200fab4:	e0bff917 	ldw	r2,-28(fp)
 200fab8:	1885c83a 	sub	r2,r3,r2
 200fabc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 200fac0:	e0bff617 	ldw	r2,-40(fp)
 200fac4:	10001e26 	beq	r2,zero,200fb40 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 200fac8:	e0fffe17 	ldw	r3,-8(fp)
 200facc:	e0bff617 	ldw	r2,-40(fp)
 200fad0:	1880022e 	bgeu	r3,r2,200fadc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 200fad4:	e0bffe17 	ldw	r2,-8(fp)
 200fad8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 200fadc:	e0bffc17 	ldw	r2,-16(fp)
 200fae0:	10c20e04 	addi	r3,r2,2104
 200fae4:	e0bff917 	ldw	r2,-28(fp)
 200fae8:	1885883a 	add	r2,r3,r2
 200faec:	e1bff617 	ldw	r6,-40(fp)
 200faf0:	e17ffd17 	ldw	r5,-12(fp)
 200faf4:	1009883a 	mov	r4,r2
 200faf8:	20074440 	call	2007444 <memcpy>
      ptr   += n;
 200fafc:	e0fffd17 	ldw	r3,-12(fp)
 200fb00:	e0bff617 	ldw	r2,-40(fp)
 200fb04:	1885883a 	add	r2,r3,r2
 200fb08:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 200fb0c:	e0fffe17 	ldw	r3,-8(fp)
 200fb10:	e0bff617 	ldw	r2,-40(fp)
 200fb14:	1885c83a 	sub	r2,r3,r2
 200fb18:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200fb1c:	e0fff917 	ldw	r3,-28(fp)
 200fb20:	e0bff617 	ldw	r2,-40(fp)
 200fb24:	1885883a 	add	r2,r3,r2
 200fb28:	10c1ffcc 	andi	r3,r2,2047
 200fb2c:	e0bffc17 	ldw	r2,-16(fp)
 200fb30:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 200fb34:	e0bffe17 	ldw	r2,-8(fp)
 200fb38:	00bfc716 	blt	zero,r2,200fa58 <__alt_data_end+0xff00fa58>
 200fb3c:	00000106 	br	200fb44 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 200fb40:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200fb44:	0005303a 	rdctl	r2,status
 200fb48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200fb4c:	e0fffb17 	ldw	r3,-20(fp)
 200fb50:	00bfff84 	movi	r2,-2
 200fb54:	1884703a 	and	r2,r3,r2
 200fb58:	1001703a 	wrctl	status,r2
  
  return context;
 200fb5c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 200fb60:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 200fb64:	e0bffc17 	ldw	r2,-16(fp)
 200fb68:	10800817 	ldw	r2,32(r2)
 200fb6c:	10c00094 	ori	r3,r2,2
 200fb70:	e0bffc17 	ldw	r2,-16(fp)
 200fb74:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200fb78:	e0bffc17 	ldw	r2,-16(fp)
 200fb7c:	10800017 	ldw	r2,0(r2)
 200fb80:	10800104 	addi	r2,r2,4
 200fb84:	1007883a 	mov	r3,r2
 200fb88:	e0bffc17 	ldw	r2,-16(fp)
 200fb8c:	10800817 	ldw	r2,32(r2)
 200fb90:	18800035 	stwio	r2,0(r3)
 200fb94:	e0bffa17 	ldw	r2,-24(fp)
 200fb98:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200fb9c:	e0bff817 	ldw	r2,-32(fp)
 200fba0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 200fba4:	e0bffe17 	ldw	r2,-8(fp)
 200fba8:	0080100e 	bge	zero,r2,200fbec <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 200fbac:	e0bfff17 	ldw	r2,-4(fp)
 200fbb0:	1090000c 	andi	r2,r2,16384
 200fbb4:	1000101e 	bne	r2,zero,200fbf8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 200fbb8:	0001883a 	nop
 200fbbc:	e0bffc17 	ldw	r2,-16(fp)
 200fbc0:	10c00d17 	ldw	r3,52(r2)
 200fbc4:	e0bff517 	ldw	r2,-44(fp)
 200fbc8:	1880051e 	bne	r3,r2,200fbe0 <altera_avalon_jtag_uart_write+0x1b8>
 200fbcc:	e0bffc17 	ldw	r2,-16(fp)
 200fbd0:	10c00917 	ldw	r3,36(r2)
 200fbd4:	e0bffc17 	ldw	r2,-16(fp)
 200fbd8:	10800117 	ldw	r2,4(r2)
 200fbdc:	18bff736 	bltu	r3,r2,200fbbc <__alt_data_end+0xff00fbbc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 200fbe0:	e0bffc17 	ldw	r2,-16(fp)
 200fbe4:	10800917 	ldw	r2,36(r2)
 200fbe8:	1000051e 	bne	r2,zero,200fc00 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 200fbec:	e0bffe17 	ldw	r2,-8(fp)
 200fbf0:	00bfd016 	blt	zero,r2,200fb34 <__alt_data_end+0xff00fb34>
 200fbf4:	00000306 	br	200fc04 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 200fbf8:	0001883a 	nop
 200fbfc:	00000106 	br	200fc04 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 200fc00:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 200fc04:	e0fffd17 	ldw	r3,-12(fp)
 200fc08:	e0bff717 	ldw	r2,-36(fp)
 200fc0c:	18800426 	beq	r3,r2,200fc20 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 200fc10:	e0fffd17 	ldw	r3,-12(fp)
 200fc14:	e0bff717 	ldw	r2,-36(fp)
 200fc18:	1885c83a 	sub	r2,r3,r2
 200fc1c:	00000606 	br	200fc38 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 200fc20:	e0bfff17 	ldw	r2,-4(fp)
 200fc24:	1090000c 	andi	r2,r2,16384
 200fc28:	10000226 	beq	r2,zero,200fc34 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 200fc2c:	00bffd44 	movi	r2,-11
 200fc30:	00000106 	br	200fc38 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 200fc34:	00bffec4 	movi	r2,-5
}
 200fc38:	e037883a 	mov	sp,fp
 200fc3c:	dfc00117 	ldw	ra,4(sp)
 200fc40:	df000017 	ldw	fp,0(sp)
 200fc44:	dec00204 	addi	sp,sp,8
 200fc48:	f800283a 	ret

0200fc4c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 200fc4c:	defff504 	addi	sp,sp,-44
 200fc50:	df000a15 	stw	fp,40(sp)
 200fc54:	df000a04 	addi	fp,sp,40
 200fc58:	e13ffc15 	stw	r4,-16(fp)
 200fc5c:	e17ffd15 	stw	r5,-12(fp)
 200fc60:	e1bffe15 	stw	r6,-8(fp)
 200fc64:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 200fc68:	e03ff615 	stw	zero,-40(fp)
 200fc6c:	d0a6d717 	ldw	r2,-25764(gp)
  
  if (alt_ticks_per_second ())
 200fc70:	10003c26 	beq	r2,zero,200fd64 <alt_alarm_start+0x118>
  {
    if (alarm)
 200fc74:	e0bffc17 	ldw	r2,-16(fp)
 200fc78:	10003826 	beq	r2,zero,200fd5c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 200fc7c:	e0bffc17 	ldw	r2,-16(fp)
 200fc80:	e0fffe17 	ldw	r3,-8(fp)
 200fc84:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 200fc88:	e0bffc17 	ldw	r2,-16(fp)
 200fc8c:	e0ffff17 	ldw	r3,-4(fp)
 200fc90:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200fc94:	0005303a 	rdctl	r2,status
 200fc98:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200fc9c:	e0fff917 	ldw	r3,-28(fp)
 200fca0:	00bfff84 	movi	r2,-2
 200fca4:	1884703a 	and	r2,r3,r2
 200fca8:	1001703a 	wrctl	status,r2
  
  return context;
 200fcac:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 200fcb0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 200fcb4:	d0a6d817 	ldw	r2,-25760(gp)
      
      current_nticks = alt_nticks();
 200fcb8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 200fcbc:	e0fffd17 	ldw	r3,-12(fp)
 200fcc0:	e0bff617 	ldw	r2,-40(fp)
 200fcc4:	1885883a 	add	r2,r3,r2
 200fcc8:	10c00044 	addi	r3,r2,1
 200fccc:	e0bffc17 	ldw	r2,-16(fp)
 200fcd0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 200fcd4:	e0bffc17 	ldw	r2,-16(fp)
 200fcd8:	10c00217 	ldw	r3,8(r2)
 200fcdc:	e0bff617 	ldw	r2,-40(fp)
 200fce0:	1880042e 	bgeu	r3,r2,200fcf4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 200fce4:	e0bffc17 	ldw	r2,-16(fp)
 200fce8:	00c00044 	movi	r3,1
 200fcec:	10c00405 	stb	r3,16(r2)
 200fcf0:	00000206 	br	200fcfc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 200fcf4:	e0bffc17 	ldw	r2,-16(fp)
 200fcf8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 200fcfc:	e0bffc17 	ldw	r2,-16(fp)
 200fd00:	d0e00e04 	addi	r3,gp,-32712
 200fd04:	e0fffa15 	stw	r3,-24(fp)
 200fd08:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 200fd0c:	e0bffb17 	ldw	r2,-20(fp)
 200fd10:	e0fffa17 	ldw	r3,-24(fp)
 200fd14:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 200fd18:	e0bffa17 	ldw	r2,-24(fp)
 200fd1c:	10c00017 	ldw	r3,0(r2)
 200fd20:	e0bffb17 	ldw	r2,-20(fp)
 200fd24:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 200fd28:	e0bffa17 	ldw	r2,-24(fp)
 200fd2c:	10800017 	ldw	r2,0(r2)
 200fd30:	e0fffb17 	ldw	r3,-20(fp)
 200fd34:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 200fd38:	e0bffa17 	ldw	r2,-24(fp)
 200fd3c:	e0fffb17 	ldw	r3,-20(fp)
 200fd40:	10c00015 	stw	r3,0(r2)
 200fd44:	e0bff817 	ldw	r2,-32(fp)
 200fd48:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200fd4c:	e0bff717 	ldw	r2,-36(fp)
 200fd50:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 200fd54:	0005883a 	mov	r2,zero
 200fd58:	00000306 	br	200fd68 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 200fd5c:	00bffa84 	movi	r2,-22
 200fd60:	00000106 	br	200fd68 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 200fd64:	00bfde84 	movi	r2,-134
  }
}
 200fd68:	e037883a 	mov	sp,fp
 200fd6c:	df000017 	ldw	fp,0(sp)
 200fd70:	dec00104 	addi	sp,sp,4
 200fd74:	f800283a 	ret

0200fd78 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 200fd78:	defffa04 	addi	sp,sp,-24
 200fd7c:	dfc00515 	stw	ra,20(sp)
 200fd80:	df000415 	stw	fp,16(sp)
 200fd84:	df000404 	addi	fp,sp,16
 200fd88:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 200fd8c:	00800244 	movi	r2,9
 200fd90:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 200fd94:	014003f4 	movhi	r5,15
 200fd98:	29509004 	addi	r5,r5,16960
 200fd9c:	e13ffd17 	ldw	r4,-12(fp)
 200fda0:	20018280 	call	2001828 <__mulsi3>
 200fda4:	100b883a 	mov	r5,r2
 200fda8:	0100bef4 	movhi	r4,763
 200fdac:	213c2004 	addi	r4,r4,-3968
 200fdb0:	200be080 	call	200be08 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 200fdb4:	100b883a 	mov	r5,r2
 200fdb8:	01200034 	movhi	r4,32768
 200fdbc:	213fffc4 	addi	r4,r4,-1
 200fdc0:	200be080 	call	200be08 <__udivsi3>
 200fdc4:	100b883a 	mov	r5,r2
 200fdc8:	e13fff17 	ldw	r4,-4(fp)
 200fdcc:	200be080 	call	200be08 <__udivsi3>
 200fdd0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 200fdd4:	e0bffe17 	ldw	r2,-8(fp)
 200fdd8:	10002a26 	beq	r2,zero,200fe84 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 200fddc:	e03ffc15 	stw	zero,-16(fp)
 200fde0:	00001706 	br	200fe40 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 200fde4:	00a00034 	movhi	r2,32768
 200fde8:	10bfffc4 	addi	r2,r2,-1
 200fdec:	10bfffc4 	addi	r2,r2,-1
 200fdf0:	103ffe1e 	bne	r2,zero,200fdec <__alt_data_end+0xff00fdec>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 200fdf4:	014003f4 	movhi	r5,15
 200fdf8:	29509004 	addi	r5,r5,16960
 200fdfc:	e13ffd17 	ldw	r4,-12(fp)
 200fe00:	20018280 	call	2001828 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 200fe04:	100b883a 	mov	r5,r2
 200fe08:	0100bef4 	movhi	r4,763
 200fe0c:	213c2004 	addi	r4,r4,-3968
 200fe10:	200be080 	call	200be08 <__udivsi3>
 200fe14:	100b883a 	mov	r5,r2
 200fe18:	01200034 	movhi	r4,32768
 200fe1c:	213fffc4 	addi	r4,r4,-1
 200fe20:	200be080 	call	200be08 <__udivsi3>
 200fe24:	1007883a 	mov	r3,r2
 200fe28:	e0bfff17 	ldw	r2,-4(fp)
 200fe2c:	10c5c83a 	sub	r2,r2,r3
 200fe30:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 200fe34:	e0bffc17 	ldw	r2,-16(fp)
 200fe38:	10800044 	addi	r2,r2,1
 200fe3c:	e0bffc15 	stw	r2,-16(fp)
 200fe40:	e0fffc17 	ldw	r3,-16(fp)
 200fe44:	e0bffe17 	ldw	r2,-8(fp)
 200fe48:	18bfe616 	blt	r3,r2,200fde4 <__alt_data_end+0xff00fde4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 200fe4c:	014003f4 	movhi	r5,15
 200fe50:	29509004 	addi	r5,r5,16960
 200fe54:	e13ffd17 	ldw	r4,-12(fp)
 200fe58:	20018280 	call	2001828 <__mulsi3>
 200fe5c:	100b883a 	mov	r5,r2
 200fe60:	0100bef4 	movhi	r4,763
 200fe64:	213c2004 	addi	r4,r4,-3968
 200fe68:	200be080 	call	200be08 <__udivsi3>
 200fe6c:	e17fff17 	ldw	r5,-4(fp)
 200fe70:	1009883a 	mov	r4,r2
 200fe74:	20018280 	call	2001828 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 200fe78:	10bfffc4 	addi	r2,r2,-1
 200fe7c:	103ffe1e 	bne	r2,zero,200fe78 <__alt_data_end+0xff00fe78>
 200fe80:	00000d06 	br	200feb8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 200fe84:	014003f4 	movhi	r5,15
 200fe88:	29509004 	addi	r5,r5,16960
 200fe8c:	e13ffd17 	ldw	r4,-12(fp)
 200fe90:	20018280 	call	2001828 <__mulsi3>
 200fe94:	100b883a 	mov	r5,r2
 200fe98:	0100bef4 	movhi	r4,763
 200fe9c:	213c2004 	addi	r4,r4,-3968
 200fea0:	200be080 	call	200be08 <__udivsi3>
 200fea4:	e17fff17 	ldw	r5,-4(fp)
 200fea8:	1009883a 	mov	r4,r2
 200feac:	20018280 	call	2001828 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 200feb0:	10bfffc4 	addi	r2,r2,-1
 200feb4:	00bffe16 	blt	zero,r2,200feb0 <__alt_data_end+0xff00feb0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 200feb8:	0005883a 	mov	r2,zero
}
 200febc:	e037883a 	mov	sp,fp
 200fec0:	dfc00117 	ldw	ra,4(sp)
 200fec4:	df000017 	ldw	fp,0(sp)
 200fec8:	dec00204 	addi	sp,sp,8
 200fecc:	f800283a 	ret

0200fed0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 200fed0:	deffff04 	addi	sp,sp,-4
 200fed4:	df000015 	stw	fp,0(sp)
 200fed8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 200fedc:	0001883a 	nop
 200fee0:	e037883a 	mov	sp,fp
 200fee4:	df000017 	ldw	fp,0(sp)
 200fee8:	dec00104 	addi	sp,sp,4
 200feec:	f800283a 	ret

0200fef0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200fef0:	defffe04 	addi	sp,sp,-8
 200fef4:	dfc00115 	stw	ra,4(sp)
 200fef8:	df000015 	stw	fp,0(sp)
 200fefc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200ff00:	d0a00b17 	ldw	r2,-32724(gp)
 200ff04:	10000326 	beq	r2,zero,200ff14 <alt_get_errno+0x24>
 200ff08:	d0a00b17 	ldw	r2,-32724(gp)
 200ff0c:	103ee83a 	callr	r2
 200ff10:	00000106 	br	200ff18 <alt_get_errno+0x28>
 200ff14:	d0a6d204 	addi	r2,gp,-25784
}
 200ff18:	e037883a 	mov	sp,fp
 200ff1c:	dfc00117 	ldw	ra,4(sp)
 200ff20:	df000017 	ldw	fp,0(sp)
 200ff24:	dec00204 	addi	sp,sp,8
 200ff28:	f800283a 	ret

0200ff2c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 200ff2c:	defffa04 	addi	sp,sp,-24
 200ff30:	dfc00515 	stw	ra,20(sp)
 200ff34:	df000415 	stw	fp,16(sp)
 200ff38:	df000404 	addi	fp,sp,16
 200ff3c:	e13ffe15 	stw	r4,-8(fp)
 200ff40:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 200ff44:	e0bffe17 	ldw	r2,-8(fp)
 200ff48:	10000326 	beq	r2,zero,200ff58 <alt_dev_llist_insert+0x2c>
 200ff4c:	e0bffe17 	ldw	r2,-8(fp)
 200ff50:	10800217 	ldw	r2,8(r2)
 200ff54:	1000061e 	bne	r2,zero,200ff70 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 200ff58:	200fef00 	call	200fef0 <alt_get_errno>
 200ff5c:	1007883a 	mov	r3,r2
 200ff60:	00800584 	movi	r2,22
 200ff64:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 200ff68:	00bffa84 	movi	r2,-22
 200ff6c:	00001306 	br	200ffbc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 200ff70:	e0bffe17 	ldw	r2,-8(fp)
 200ff74:	e0ffff17 	ldw	r3,-4(fp)
 200ff78:	e0fffc15 	stw	r3,-16(fp)
 200ff7c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 200ff80:	e0bffd17 	ldw	r2,-12(fp)
 200ff84:	e0fffc17 	ldw	r3,-16(fp)
 200ff88:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 200ff8c:	e0bffc17 	ldw	r2,-16(fp)
 200ff90:	10c00017 	ldw	r3,0(r2)
 200ff94:	e0bffd17 	ldw	r2,-12(fp)
 200ff98:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 200ff9c:	e0bffc17 	ldw	r2,-16(fp)
 200ffa0:	10800017 	ldw	r2,0(r2)
 200ffa4:	e0fffd17 	ldw	r3,-12(fp)
 200ffa8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 200ffac:	e0bffc17 	ldw	r2,-16(fp)
 200ffb0:	e0fffd17 	ldw	r3,-12(fp)
 200ffb4:	10c00015 	stw	r3,0(r2)

  return 0;  
 200ffb8:	0005883a 	mov	r2,zero
}
 200ffbc:	e037883a 	mov	sp,fp
 200ffc0:	dfc00117 	ldw	ra,4(sp)
 200ffc4:	df000017 	ldw	fp,0(sp)
 200ffc8:	dec00204 	addi	sp,sp,8
 200ffcc:	f800283a 	ret

0200ffd0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 200ffd0:	defffd04 	addi	sp,sp,-12
 200ffd4:	dfc00215 	stw	ra,8(sp)
 200ffd8:	df000115 	stw	fp,4(sp)
 200ffdc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 200ffe0:	00808074 	movhi	r2,513
 200ffe4:	1083e104 	addi	r2,r2,3972
 200ffe8:	e0bfff15 	stw	r2,-4(fp)
 200ffec:	00000606 	br	2010008 <_do_ctors+0x38>
        (*ctor) (); 
 200fff0:	e0bfff17 	ldw	r2,-4(fp)
 200fff4:	10800017 	ldw	r2,0(r2)
 200fff8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 200fffc:	e0bfff17 	ldw	r2,-4(fp)
 2010000:	10bfff04 	addi	r2,r2,-4
 2010004:	e0bfff15 	stw	r2,-4(fp)
 2010008:	e0ffff17 	ldw	r3,-4(fp)
 201000c:	00808074 	movhi	r2,513
 2010010:	1083e204 	addi	r2,r2,3976
 2010014:	18bff62e 	bgeu	r3,r2,200fff0 <__alt_data_end+0xff00fff0>
        (*ctor) (); 
}
 2010018:	0001883a 	nop
 201001c:	e037883a 	mov	sp,fp
 2010020:	dfc00117 	ldw	ra,4(sp)
 2010024:	df000017 	ldw	fp,0(sp)
 2010028:	dec00204 	addi	sp,sp,8
 201002c:	f800283a 	ret

02010030 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2010030:	defffd04 	addi	sp,sp,-12
 2010034:	dfc00215 	stw	ra,8(sp)
 2010038:	df000115 	stw	fp,4(sp)
 201003c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2010040:	00808074 	movhi	r2,513
 2010044:	1083e104 	addi	r2,r2,3972
 2010048:	e0bfff15 	stw	r2,-4(fp)
 201004c:	00000606 	br	2010068 <_do_dtors+0x38>
        (*dtor) (); 
 2010050:	e0bfff17 	ldw	r2,-4(fp)
 2010054:	10800017 	ldw	r2,0(r2)
 2010058:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 201005c:	e0bfff17 	ldw	r2,-4(fp)
 2010060:	10bfff04 	addi	r2,r2,-4
 2010064:	e0bfff15 	stw	r2,-4(fp)
 2010068:	e0ffff17 	ldw	r3,-4(fp)
 201006c:	00808074 	movhi	r2,513
 2010070:	1083e204 	addi	r2,r2,3976
 2010074:	18bff62e 	bgeu	r3,r2,2010050 <__alt_data_end+0xff010050>
        (*dtor) (); 
}
 2010078:	0001883a 	nop
 201007c:	e037883a 	mov	sp,fp
 2010080:	dfc00117 	ldw	ra,4(sp)
 2010084:	df000017 	ldw	fp,0(sp)
 2010088:	dec00204 	addi	sp,sp,8
 201008c:	f800283a 	ret

02010090 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 2010090:	deffff04 	addi	sp,sp,-4
 2010094:	df000015 	stw	fp,0(sp)
 2010098:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 201009c:	0001883a 	nop
 20100a0:	e037883a 	mov	sp,fp
 20100a4:	df000017 	ldw	fp,0(sp)
 20100a8:	dec00104 	addi	sp,sp,4
 20100ac:	f800283a 	ret

020100b0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 20100b0:	defff904 	addi	sp,sp,-28
 20100b4:	dfc00615 	stw	ra,24(sp)
 20100b8:	df000515 	stw	fp,20(sp)
 20100bc:	df000504 	addi	fp,sp,20
 20100c0:	e13ffc15 	stw	r4,-16(fp)
 20100c4:	e17ffd15 	stw	r5,-12(fp)
 20100c8:	e1bffe15 	stw	r6,-8(fp)
 20100cc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 20100d0:	e0800217 	ldw	r2,8(fp)
 20100d4:	d8800015 	stw	r2,0(sp)
 20100d8:	e1ffff17 	ldw	r7,-4(fp)
 20100dc:	e1bffe17 	ldw	r6,-8(fp)
 20100e0:	e17ffd17 	ldw	r5,-12(fp)
 20100e4:	e13ffc17 	ldw	r4,-16(fp)
 20100e8:	20102600 	call	2010260 <alt_iic_isr_register>
}  
 20100ec:	e037883a 	mov	sp,fp
 20100f0:	dfc00117 	ldw	ra,4(sp)
 20100f4:	df000017 	ldw	fp,0(sp)
 20100f8:	dec00204 	addi	sp,sp,8
 20100fc:	f800283a 	ret

02010100 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 2010100:	defff904 	addi	sp,sp,-28
 2010104:	df000615 	stw	fp,24(sp)
 2010108:	df000604 	addi	fp,sp,24
 201010c:	e13ffe15 	stw	r4,-8(fp)
 2010110:	e17fff15 	stw	r5,-4(fp)
 2010114:	e0bfff17 	ldw	r2,-4(fp)
 2010118:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201011c:	0005303a 	rdctl	r2,status
 2010120:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010124:	e0fffb17 	ldw	r3,-20(fp)
 2010128:	00bfff84 	movi	r2,-2
 201012c:	1884703a 	and	r2,r3,r2
 2010130:	1001703a 	wrctl	status,r2
  
  return context;
 2010134:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2010138:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 201013c:	00c00044 	movi	r3,1
 2010140:	e0bffa17 	ldw	r2,-24(fp)
 2010144:	1884983a 	sll	r2,r3,r2
 2010148:	1007883a 	mov	r3,r2
 201014c:	d0a6d617 	ldw	r2,-25768(gp)
 2010150:	1884b03a 	or	r2,r3,r2
 2010154:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2010158:	d0a6d617 	ldw	r2,-25768(gp)
 201015c:	100170fa 	wrctl	ienable,r2
 2010160:	e0bffc17 	ldw	r2,-16(fp)
 2010164:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010168:	e0bffd17 	ldw	r2,-12(fp)
 201016c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2010170:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 2010174:	0001883a 	nop
}
 2010178:	e037883a 	mov	sp,fp
 201017c:	df000017 	ldw	fp,0(sp)
 2010180:	dec00104 	addi	sp,sp,4
 2010184:	f800283a 	ret

02010188 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 2010188:	defff904 	addi	sp,sp,-28
 201018c:	df000615 	stw	fp,24(sp)
 2010190:	df000604 	addi	fp,sp,24
 2010194:	e13ffe15 	stw	r4,-8(fp)
 2010198:	e17fff15 	stw	r5,-4(fp)
 201019c:	e0bfff17 	ldw	r2,-4(fp)
 20101a0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20101a4:	0005303a 	rdctl	r2,status
 20101a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20101ac:	e0fffb17 	ldw	r3,-20(fp)
 20101b0:	00bfff84 	movi	r2,-2
 20101b4:	1884703a 	and	r2,r3,r2
 20101b8:	1001703a 	wrctl	status,r2
  
  return context;
 20101bc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 20101c0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 20101c4:	00c00044 	movi	r3,1
 20101c8:	e0bffa17 	ldw	r2,-24(fp)
 20101cc:	1884983a 	sll	r2,r3,r2
 20101d0:	0084303a 	nor	r2,zero,r2
 20101d4:	1007883a 	mov	r3,r2
 20101d8:	d0a6d617 	ldw	r2,-25768(gp)
 20101dc:	1884703a 	and	r2,r3,r2
 20101e0:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 20101e4:	d0a6d617 	ldw	r2,-25768(gp)
 20101e8:	100170fa 	wrctl	ienable,r2
 20101ec:	e0bffc17 	ldw	r2,-16(fp)
 20101f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20101f4:	e0bffd17 	ldw	r2,-12(fp)
 20101f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 20101fc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 2010200:	0001883a 	nop
}
 2010204:	e037883a 	mov	sp,fp
 2010208:	df000017 	ldw	fp,0(sp)
 201020c:	dec00104 	addi	sp,sp,4
 2010210:	f800283a 	ret

02010214 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 2010214:	defffc04 	addi	sp,sp,-16
 2010218:	df000315 	stw	fp,12(sp)
 201021c:	df000304 	addi	fp,sp,12
 2010220:	e13ffe15 	stw	r4,-8(fp)
 2010224:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 2010228:	000530fa 	rdctl	r2,ienable
 201022c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 2010230:	00c00044 	movi	r3,1
 2010234:	e0bfff17 	ldw	r2,-4(fp)
 2010238:	1884983a 	sll	r2,r3,r2
 201023c:	1007883a 	mov	r3,r2
 2010240:	e0bffd17 	ldw	r2,-12(fp)
 2010244:	1884703a 	and	r2,r3,r2
 2010248:	1004c03a 	cmpne	r2,r2,zero
 201024c:	10803fcc 	andi	r2,r2,255
}
 2010250:	e037883a 	mov	sp,fp
 2010254:	df000017 	ldw	fp,0(sp)
 2010258:	dec00104 	addi	sp,sp,4
 201025c:	f800283a 	ret

02010260 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2010260:	defff504 	addi	sp,sp,-44
 2010264:	dfc00a15 	stw	ra,40(sp)
 2010268:	df000915 	stw	fp,36(sp)
 201026c:	df000904 	addi	fp,sp,36
 2010270:	e13ffc15 	stw	r4,-16(fp)
 2010274:	e17ffd15 	stw	r5,-12(fp)
 2010278:	e1bffe15 	stw	r6,-8(fp)
 201027c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 2010280:	00bffa84 	movi	r2,-22
 2010284:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 2010288:	e0bffd17 	ldw	r2,-12(fp)
 201028c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2010290:	e0bff817 	ldw	r2,-32(fp)
 2010294:	10800808 	cmpgei	r2,r2,32
 2010298:	1000271e 	bne	r2,zero,2010338 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201029c:	0005303a 	rdctl	r2,status
 20102a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20102a4:	e0fffb17 	ldw	r3,-20(fp)
 20102a8:	00bfff84 	movi	r2,-2
 20102ac:	1884703a 	and	r2,r3,r2
 20102b0:	1001703a 	wrctl	status,r2
  
  return context;
 20102b4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 20102b8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 20102bc:	008081b4 	movhi	r2,518
 20102c0:	10be4f04 	addi	r2,r2,-1732
 20102c4:	e0fff817 	ldw	r3,-32(fp)
 20102c8:	180690fa 	slli	r3,r3,3
 20102cc:	10c5883a 	add	r2,r2,r3
 20102d0:	e0fffe17 	ldw	r3,-8(fp)
 20102d4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 20102d8:	008081b4 	movhi	r2,518
 20102dc:	10be4f04 	addi	r2,r2,-1732
 20102e0:	e0fff817 	ldw	r3,-32(fp)
 20102e4:	180690fa 	slli	r3,r3,3
 20102e8:	10c5883a 	add	r2,r2,r3
 20102ec:	10800104 	addi	r2,r2,4
 20102f0:	e0ffff17 	ldw	r3,-4(fp)
 20102f4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 20102f8:	e0bffe17 	ldw	r2,-8(fp)
 20102fc:	10000526 	beq	r2,zero,2010314 <alt_iic_isr_register+0xb4>
 2010300:	e0bff817 	ldw	r2,-32(fp)
 2010304:	100b883a 	mov	r5,r2
 2010308:	e13ffc17 	ldw	r4,-16(fp)
 201030c:	20101000 	call	2010100 <alt_ic_irq_enable>
 2010310:	00000406 	br	2010324 <alt_iic_isr_register+0xc4>
 2010314:	e0bff817 	ldw	r2,-32(fp)
 2010318:	100b883a 	mov	r5,r2
 201031c:	e13ffc17 	ldw	r4,-16(fp)
 2010320:	20101880 	call	2010188 <alt_ic_irq_disable>
 2010324:	e0bff715 	stw	r2,-36(fp)
 2010328:	e0bffa17 	ldw	r2,-24(fp)
 201032c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010330:	e0bff917 	ldw	r2,-28(fp)
 2010334:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 2010338:	e0bff717 	ldw	r2,-36(fp)
}
 201033c:	e037883a 	mov	sp,fp
 2010340:	dfc00117 	ldw	ra,4(sp)
 2010344:	df000017 	ldw	fp,0(sp)
 2010348:	dec00204 	addi	sp,sp,8
 201034c:	f800283a 	ret

02010350 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2010350:	defff804 	addi	sp,sp,-32
 2010354:	dfc00715 	stw	ra,28(sp)
 2010358:	df000615 	stw	fp,24(sp)
 201035c:	dc000515 	stw	r16,20(sp)
 2010360:	df000604 	addi	fp,sp,24
 2010364:	e13ffb15 	stw	r4,-20(fp)
 2010368:	e17ffc15 	stw	r5,-16(fp)
 201036c:	e1bffd15 	stw	r6,-12(fp)
 2010370:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 2010374:	e1bffe17 	ldw	r6,-8(fp)
 2010378:	e17ffd17 	ldw	r5,-12(fp)
 201037c:	e13ffc17 	ldw	r4,-16(fp)
 2010380:	20105d80 	call	20105d8 <open>
 2010384:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 2010388:	e0bffa17 	ldw	r2,-24(fp)
 201038c:	10002216 	blt	r2,zero,2010418 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 2010390:	04008074 	movhi	r16,513
 2010394:	8406f304 	addi	r16,r16,7116
 2010398:	e0bffa17 	ldw	r2,-24(fp)
 201039c:	01400304 	movi	r5,12
 20103a0:	1009883a 	mov	r4,r2
 20103a4:	20018280 	call	2001828 <__mulsi3>
 20103a8:	8085883a 	add	r2,r16,r2
 20103ac:	10c00017 	ldw	r3,0(r2)
 20103b0:	e0bffb17 	ldw	r2,-20(fp)
 20103b4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 20103b8:	04008074 	movhi	r16,513
 20103bc:	8406f304 	addi	r16,r16,7116
 20103c0:	e0bffa17 	ldw	r2,-24(fp)
 20103c4:	01400304 	movi	r5,12
 20103c8:	1009883a 	mov	r4,r2
 20103cc:	20018280 	call	2001828 <__mulsi3>
 20103d0:	8085883a 	add	r2,r16,r2
 20103d4:	10800104 	addi	r2,r2,4
 20103d8:	10c00017 	ldw	r3,0(r2)
 20103dc:	e0bffb17 	ldw	r2,-20(fp)
 20103e0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 20103e4:	04008074 	movhi	r16,513
 20103e8:	8406f304 	addi	r16,r16,7116
 20103ec:	e0bffa17 	ldw	r2,-24(fp)
 20103f0:	01400304 	movi	r5,12
 20103f4:	1009883a 	mov	r4,r2
 20103f8:	20018280 	call	2001828 <__mulsi3>
 20103fc:	8085883a 	add	r2,r16,r2
 2010400:	10800204 	addi	r2,r2,8
 2010404:	10c00017 	ldw	r3,0(r2)
 2010408:	e0bffb17 	ldw	r2,-20(fp)
 201040c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2010410:	e13ffa17 	ldw	r4,-24(fp)
 2010414:	200ee8c0 	call	200ee8c <alt_release_fd>
  }
} 
 2010418:	0001883a 	nop
 201041c:	e6ffff04 	addi	sp,fp,-4
 2010420:	dfc00217 	ldw	ra,8(sp)
 2010424:	df000117 	ldw	fp,4(sp)
 2010428:	dc000017 	ldw	r16,0(sp)
 201042c:	dec00304 	addi	sp,sp,12
 2010430:	f800283a 	ret

02010434 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2010434:	defffb04 	addi	sp,sp,-20
 2010438:	dfc00415 	stw	ra,16(sp)
 201043c:	df000315 	stw	fp,12(sp)
 2010440:	df000304 	addi	fp,sp,12
 2010444:	e13ffd15 	stw	r4,-12(fp)
 2010448:	e17ffe15 	stw	r5,-8(fp)
 201044c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2010450:	01c07fc4 	movi	r7,511
 2010454:	01800044 	movi	r6,1
 2010458:	e17ffd17 	ldw	r5,-12(fp)
 201045c:	01008074 	movhi	r4,513
 2010460:	2106f604 	addi	r4,r4,7128
 2010464:	20103500 	call	2010350 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2010468:	01c07fc4 	movi	r7,511
 201046c:	000d883a 	mov	r6,zero
 2010470:	e17ffe17 	ldw	r5,-8(fp)
 2010474:	01008074 	movhi	r4,513
 2010478:	2106f304 	addi	r4,r4,7116
 201047c:	20103500 	call	2010350 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2010480:	01c07fc4 	movi	r7,511
 2010484:	01800044 	movi	r6,1
 2010488:	e17fff17 	ldw	r5,-4(fp)
 201048c:	01008074 	movhi	r4,513
 2010490:	2106f904 	addi	r4,r4,7140
 2010494:	20103500 	call	2010350 <alt_open_fd>
}  
 2010498:	0001883a 	nop
 201049c:	e037883a 	mov	sp,fp
 20104a0:	dfc00117 	ldw	ra,4(sp)
 20104a4:	df000017 	ldw	fp,0(sp)
 20104a8:	dec00204 	addi	sp,sp,8
 20104ac:	f800283a 	ret

020104b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20104b0:	defffe04 	addi	sp,sp,-8
 20104b4:	dfc00115 	stw	ra,4(sp)
 20104b8:	df000015 	stw	fp,0(sp)
 20104bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20104c0:	d0a00b17 	ldw	r2,-32724(gp)
 20104c4:	10000326 	beq	r2,zero,20104d4 <alt_get_errno+0x24>
 20104c8:	d0a00b17 	ldw	r2,-32724(gp)
 20104cc:	103ee83a 	callr	r2
 20104d0:	00000106 	br	20104d8 <alt_get_errno+0x28>
 20104d4:	d0a6d204 	addi	r2,gp,-25784
}
 20104d8:	e037883a 	mov	sp,fp
 20104dc:	dfc00117 	ldw	ra,4(sp)
 20104e0:	df000017 	ldw	fp,0(sp)
 20104e4:	dec00204 	addi	sp,sp,8
 20104e8:	f800283a 	ret

020104ec <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 20104ec:	defffb04 	addi	sp,sp,-20
 20104f0:	dfc00415 	stw	ra,16(sp)
 20104f4:	df000315 	stw	fp,12(sp)
 20104f8:	dc000215 	stw	r16,8(sp)
 20104fc:	df000304 	addi	fp,sp,12
 2010500:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2010504:	e0bffe17 	ldw	r2,-8(fp)
 2010508:	10800217 	ldw	r2,8(r2)
 201050c:	10d00034 	orhi	r3,r2,16384
 2010510:	e0bffe17 	ldw	r2,-8(fp)
 2010514:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2010518:	e03ffd15 	stw	zero,-12(fp)
 201051c:	00002306 	br	20105ac <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2010520:	04008074 	movhi	r16,513
 2010524:	8406f304 	addi	r16,r16,7116
 2010528:	e0bffd17 	ldw	r2,-12(fp)
 201052c:	01400304 	movi	r5,12
 2010530:	1009883a 	mov	r4,r2
 2010534:	20018280 	call	2001828 <__mulsi3>
 2010538:	8085883a 	add	r2,r16,r2
 201053c:	10c00017 	ldw	r3,0(r2)
 2010540:	e0bffe17 	ldw	r2,-8(fp)
 2010544:	10800017 	ldw	r2,0(r2)
 2010548:	1880151e 	bne	r3,r2,20105a0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 201054c:	04008074 	movhi	r16,513
 2010550:	8406f304 	addi	r16,r16,7116
 2010554:	e0bffd17 	ldw	r2,-12(fp)
 2010558:	01400304 	movi	r5,12
 201055c:	1009883a 	mov	r4,r2
 2010560:	20018280 	call	2001828 <__mulsi3>
 2010564:	8085883a 	add	r2,r16,r2
 2010568:	10800204 	addi	r2,r2,8
 201056c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2010570:	10000b0e 	bge	r2,zero,20105a0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 2010574:	01400304 	movi	r5,12
 2010578:	e13ffd17 	ldw	r4,-12(fp)
 201057c:	20018280 	call	2001828 <__mulsi3>
 2010580:	1007883a 	mov	r3,r2
 2010584:	00808074 	movhi	r2,513
 2010588:	1086f304 	addi	r2,r2,7116
 201058c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2010590:	e0bffe17 	ldw	r2,-8(fp)
 2010594:	18800226 	beq	r3,r2,20105a0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 2010598:	00bffcc4 	movi	r2,-13
 201059c:	00000806 	br	20105c0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 20105a0:	e0bffd17 	ldw	r2,-12(fp)
 20105a4:	10800044 	addi	r2,r2,1
 20105a8:	e0bffd15 	stw	r2,-12(fp)
 20105ac:	d0a00a17 	ldw	r2,-32728(gp)
 20105b0:	1007883a 	mov	r3,r2
 20105b4:	e0bffd17 	ldw	r2,-12(fp)
 20105b8:	18bfd92e 	bgeu	r3,r2,2010520 <__alt_data_end+0xff010520>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 20105bc:	0005883a 	mov	r2,zero
}
 20105c0:	e6ffff04 	addi	sp,fp,-4
 20105c4:	dfc00217 	ldw	ra,8(sp)
 20105c8:	df000117 	ldw	fp,4(sp)
 20105cc:	dc000017 	ldw	r16,0(sp)
 20105d0:	dec00304 	addi	sp,sp,12
 20105d4:	f800283a 	ret

020105d8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 20105d8:	defff604 	addi	sp,sp,-40
 20105dc:	dfc00915 	stw	ra,36(sp)
 20105e0:	df000815 	stw	fp,32(sp)
 20105e4:	df000804 	addi	fp,sp,32
 20105e8:	e13ffd15 	stw	r4,-12(fp)
 20105ec:	e17ffe15 	stw	r5,-8(fp)
 20105f0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 20105f4:	00bfffc4 	movi	r2,-1
 20105f8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 20105fc:	00bffb44 	movi	r2,-19
 2010600:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 2010604:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2010608:	d1600804 	addi	r5,gp,-32736
 201060c:	e13ffd17 	ldw	r4,-12(fp)
 2010610:	20108fc0 	call	20108fc <alt_find_dev>
 2010614:	e0bff815 	stw	r2,-32(fp)
 2010618:	e0bff817 	ldw	r2,-32(fp)
 201061c:	1000051e 	bne	r2,zero,2010634 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2010620:	e13ffd17 	ldw	r4,-12(fp)
 2010624:	201098c0 	call	201098c <alt_find_file>
 2010628:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 201062c:	00800044 	movi	r2,1
 2010630:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2010634:	e0bff817 	ldw	r2,-32(fp)
 2010638:	10002b26 	beq	r2,zero,20106e8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 201063c:	e13ff817 	ldw	r4,-32(fp)
 2010640:	2010a940 	call	2010a94 <alt_get_fd>
 2010644:	e0bff915 	stw	r2,-28(fp)
 2010648:	e0bff917 	ldw	r2,-28(fp)
 201064c:	1000030e 	bge	r2,zero,201065c <open+0x84>
    {
      status = index;
 2010650:	e0bff917 	ldw	r2,-28(fp)
 2010654:	e0bffa15 	stw	r2,-24(fp)
 2010658:	00002506 	br	20106f0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 201065c:	01400304 	movi	r5,12
 2010660:	e13ff917 	ldw	r4,-28(fp)
 2010664:	20018280 	call	2001828 <__mulsi3>
 2010668:	1007883a 	mov	r3,r2
 201066c:	00808074 	movhi	r2,513
 2010670:	1086f304 	addi	r2,r2,7116
 2010674:	1885883a 	add	r2,r3,r2
 2010678:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 201067c:	e0fffe17 	ldw	r3,-8(fp)
 2010680:	00900034 	movhi	r2,16384
 2010684:	10bfffc4 	addi	r2,r2,-1
 2010688:	1886703a 	and	r3,r3,r2
 201068c:	e0bffc17 	ldw	r2,-16(fp)
 2010690:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2010694:	e0bffb17 	ldw	r2,-20(fp)
 2010698:	1000051e 	bne	r2,zero,20106b0 <open+0xd8>
 201069c:	e13ffc17 	ldw	r4,-16(fp)
 20106a0:	20104ec0 	call	20104ec <alt_file_locked>
 20106a4:	e0bffa15 	stw	r2,-24(fp)
 20106a8:	e0bffa17 	ldw	r2,-24(fp)
 20106ac:	10001016 	blt	r2,zero,20106f0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 20106b0:	e0bff817 	ldw	r2,-32(fp)
 20106b4:	10800317 	ldw	r2,12(r2)
 20106b8:	10000826 	beq	r2,zero,20106dc <open+0x104>
 20106bc:	e0bff817 	ldw	r2,-32(fp)
 20106c0:	10800317 	ldw	r2,12(r2)
 20106c4:	e1ffff17 	ldw	r7,-4(fp)
 20106c8:	e1bffe17 	ldw	r6,-8(fp)
 20106cc:	e17ffd17 	ldw	r5,-12(fp)
 20106d0:	e13ffc17 	ldw	r4,-16(fp)
 20106d4:	103ee83a 	callr	r2
 20106d8:	00000106 	br	20106e0 <open+0x108>
 20106dc:	0005883a 	mov	r2,zero
 20106e0:	e0bffa15 	stw	r2,-24(fp)
 20106e4:	00000206 	br	20106f0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 20106e8:	00bffb44 	movi	r2,-19
 20106ec:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 20106f0:	e0bffa17 	ldw	r2,-24(fp)
 20106f4:	1000090e 	bge	r2,zero,201071c <open+0x144>
  {
    alt_release_fd (index);  
 20106f8:	e13ff917 	ldw	r4,-28(fp)
 20106fc:	200ee8c0 	call	200ee8c <alt_release_fd>
    ALT_ERRNO = -status;
 2010700:	20104b00 	call	20104b0 <alt_get_errno>
 2010704:	1007883a 	mov	r3,r2
 2010708:	e0bffa17 	ldw	r2,-24(fp)
 201070c:	0085c83a 	sub	r2,zero,r2
 2010710:	18800015 	stw	r2,0(r3)
    return -1;
 2010714:	00bfffc4 	movi	r2,-1
 2010718:	00000106 	br	2010720 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 201071c:	e0bff917 	ldw	r2,-28(fp)
}
 2010720:	e037883a 	mov	sp,fp
 2010724:	dfc00117 	ldw	ra,4(sp)
 2010728:	df000017 	ldw	fp,0(sp)
 201072c:	dec00204 	addi	sp,sp,8
 2010730:	f800283a 	ret

02010734 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2010734:	defffa04 	addi	sp,sp,-24
 2010738:	df000515 	stw	fp,20(sp)
 201073c:	df000504 	addi	fp,sp,20
 2010740:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010744:	0005303a 	rdctl	r2,status
 2010748:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201074c:	e0fffc17 	ldw	r3,-16(fp)
 2010750:	00bfff84 	movi	r2,-2
 2010754:	1884703a 	and	r2,r3,r2
 2010758:	1001703a 	wrctl	status,r2
  
  return context;
 201075c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2010760:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 2010764:	e0bfff17 	ldw	r2,-4(fp)
 2010768:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 201076c:	e0bffd17 	ldw	r2,-12(fp)
 2010770:	10800017 	ldw	r2,0(r2)
 2010774:	e0fffd17 	ldw	r3,-12(fp)
 2010778:	18c00117 	ldw	r3,4(r3)
 201077c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 2010780:	e0bffd17 	ldw	r2,-12(fp)
 2010784:	10800117 	ldw	r2,4(r2)
 2010788:	e0fffd17 	ldw	r3,-12(fp)
 201078c:	18c00017 	ldw	r3,0(r3)
 2010790:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2010794:	e0bffd17 	ldw	r2,-12(fp)
 2010798:	e0fffd17 	ldw	r3,-12(fp)
 201079c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 20107a0:	e0bffd17 	ldw	r2,-12(fp)
 20107a4:	e0fffd17 	ldw	r3,-12(fp)
 20107a8:	10c00015 	stw	r3,0(r2)
 20107ac:	e0bffb17 	ldw	r2,-20(fp)
 20107b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20107b4:	e0bffe17 	ldw	r2,-8(fp)
 20107b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 20107bc:	0001883a 	nop
 20107c0:	e037883a 	mov	sp,fp
 20107c4:	df000017 	ldw	fp,0(sp)
 20107c8:	dec00104 	addi	sp,sp,4
 20107cc:	f800283a 	ret

020107d0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 20107d0:	defffb04 	addi	sp,sp,-20
 20107d4:	dfc00415 	stw	ra,16(sp)
 20107d8:	df000315 	stw	fp,12(sp)
 20107dc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 20107e0:	d0a00e17 	ldw	r2,-32712(gp)
 20107e4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 20107e8:	d0a6d817 	ldw	r2,-25760(gp)
 20107ec:	10800044 	addi	r2,r2,1
 20107f0:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 20107f4:	00002e06 	br	20108b0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 20107f8:	e0bffd17 	ldw	r2,-12(fp)
 20107fc:	10800017 	ldw	r2,0(r2)
 2010800:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2010804:	e0bffd17 	ldw	r2,-12(fp)
 2010808:	10800403 	ldbu	r2,16(r2)
 201080c:	10803fcc 	andi	r2,r2,255
 2010810:	10000426 	beq	r2,zero,2010824 <alt_tick+0x54>
 2010814:	d0a6d817 	ldw	r2,-25760(gp)
 2010818:	1000021e 	bne	r2,zero,2010824 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 201081c:	e0bffd17 	ldw	r2,-12(fp)
 2010820:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2010824:	e0bffd17 	ldw	r2,-12(fp)
 2010828:	10800217 	ldw	r2,8(r2)
 201082c:	d0e6d817 	ldw	r3,-25760(gp)
 2010830:	18801d36 	bltu	r3,r2,20108a8 <alt_tick+0xd8>
 2010834:	e0bffd17 	ldw	r2,-12(fp)
 2010838:	10800403 	ldbu	r2,16(r2)
 201083c:	10803fcc 	andi	r2,r2,255
 2010840:	1000191e 	bne	r2,zero,20108a8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 2010844:	e0bffd17 	ldw	r2,-12(fp)
 2010848:	10800317 	ldw	r2,12(r2)
 201084c:	e0fffd17 	ldw	r3,-12(fp)
 2010850:	18c00517 	ldw	r3,20(r3)
 2010854:	1809883a 	mov	r4,r3
 2010858:	103ee83a 	callr	r2
 201085c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2010860:	e0bfff17 	ldw	r2,-4(fp)
 2010864:	1000031e 	bne	r2,zero,2010874 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 2010868:	e13ffd17 	ldw	r4,-12(fp)
 201086c:	20107340 	call	2010734 <alt_alarm_stop>
 2010870:	00000d06 	br	20108a8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 2010874:	e0bffd17 	ldw	r2,-12(fp)
 2010878:	10c00217 	ldw	r3,8(r2)
 201087c:	e0bfff17 	ldw	r2,-4(fp)
 2010880:	1887883a 	add	r3,r3,r2
 2010884:	e0bffd17 	ldw	r2,-12(fp)
 2010888:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 201088c:	e0bffd17 	ldw	r2,-12(fp)
 2010890:	10c00217 	ldw	r3,8(r2)
 2010894:	d0a6d817 	ldw	r2,-25760(gp)
 2010898:	1880032e 	bgeu	r3,r2,20108a8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 201089c:	e0bffd17 	ldw	r2,-12(fp)
 20108a0:	00c00044 	movi	r3,1
 20108a4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 20108a8:	e0bffe17 	ldw	r2,-8(fp)
 20108ac:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 20108b0:	e0fffd17 	ldw	r3,-12(fp)
 20108b4:	d0a00e04 	addi	r2,gp,-32712
 20108b8:	18bfcf1e 	bne	r3,r2,20107f8 <__alt_data_end+0xff0107f8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 20108bc:	0001883a 	nop
}
 20108c0:	0001883a 	nop
 20108c4:	e037883a 	mov	sp,fp
 20108c8:	dfc00117 	ldw	ra,4(sp)
 20108cc:	df000017 	ldw	fp,0(sp)
 20108d0:	dec00204 	addi	sp,sp,8
 20108d4:	f800283a 	ret

020108d8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 20108d8:	deffff04 	addi	sp,sp,-4
 20108dc:	df000015 	stw	fp,0(sp)
 20108e0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 20108e4:	000170fa 	wrctl	ienable,zero
}
 20108e8:	0001883a 	nop
 20108ec:	e037883a 	mov	sp,fp
 20108f0:	df000017 	ldw	fp,0(sp)
 20108f4:	dec00104 	addi	sp,sp,4
 20108f8:	f800283a 	ret

020108fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 20108fc:	defffa04 	addi	sp,sp,-24
 2010900:	dfc00515 	stw	ra,20(sp)
 2010904:	df000415 	stw	fp,16(sp)
 2010908:	df000404 	addi	fp,sp,16
 201090c:	e13ffe15 	stw	r4,-8(fp)
 2010910:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 2010914:	e0bfff17 	ldw	r2,-4(fp)
 2010918:	10800017 	ldw	r2,0(r2)
 201091c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 2010920:	e13ffe17 	ldw	r4,-8(fp)
 2010924:	20019900 	call	2001990 <strlen>
 2010928:	10800044 	addi	r2,r2,1
 201092c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2010930:	00000d06 	br	2010968 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 2010934:	e0bffc17 	ldw	r2,-16(fp)
 2010938:	10800217 	ldw	r2,8(r2)
 201093c:	e0fffd17 	ldw	r3,-12(fp)
 2010940:	180d883a 	mov	r6,r3
 2010944:	e17ffe17 	ldw	r5,-8(fp)
 2010948:	1009883a 	mov	r4,r2
 201094c:	2010c400 	call	2010c40 <memcmp>
 2010950:	1000021e 	bne	r2,zero,201095c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2010954:	e0bffc17 	ldw	r2,-16(fp)
 2010958:	00000706 	br	2010978 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 201095c:	e0bffc17 	ldw	r2,-16(fp)
 2010960:	10800017 	ldw	r2,0(r2)
 2010964:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2010968:	e0fffc17 	ldw	r3,-16(fp)
 201096c:	e0bfff17 	ldw	r2,-4(fp)
 2010970:	18bff01e 	bne	r3,r2,2010934 <__alt_data_end+0xff010934>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2010974:	0005883a 	mov	r2,zero
}
 2010978:	e037883a 	mov	sp,fp
 201097c:	dfc00117 	ldw	ra,4(sp)
 2010980:	df000017 	ldw	fp,0(sp)
 2010984:	dec00204 	addi	sp,sp,8
 2010988:	f800283a 	ret

0201098c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 201098c:	defffb04 	addi	sp,sp,-20
 2010990:	dfc00415 	stw	ra,16(sp)
 2010994:	df000315 	stw	fp,12(sp)
 2010998:	df000304 	addi	fp,sp,12
 201099c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 20109a0:	d0a00617 	ldw	r2,-32744(gp)
 20109a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 20109a8:	00003106 	br	2010a70 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 20109ac:	e0bffd17 	ldw	r2,-12(fp)
 20109b0:	10800217 	ldw	r2,8(r2)
 20109b4:	1009883a 	mov	r4,r2
 20109b8:	20019900 	call	2001990 <strlen>
 20109bc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 20109c0:	e0bffd17 	ldw	r2,-12(fp)
 20109c4:	10c00217 	ldw	r3,8(r2)
 20109c8:	e0bffe17 	ldw	r2,-8(fp)
 20109cc:	10bfffc4 	addi	r2,r2,-1
 20109d0:	1885883a 	add	r2,r3,r2
 20109d4:	10800003 	ldbu	r2,0(r2)
 20109d8:	10803fcc 	andi	r2,r2,255
 20109dc:	1080201c 	xori	r2,r2,128
 20109e0:	10bfe004 	addi	r2,r2,-128
 20109e4:	10800bd8 	cmpnei	r2,r2,47
 20109e8:	1000031e 	bne	r2,zero,20109f8 <alt_find_file+0x6c>
    {
      len -= 1;
 20109ec:	e0bffe17 	ldw	r2,-8(fp)
 20109f0:	10bfffc4 	addi	r2,r2,-1
 20109f4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 20109f8:	e0bffe17 	ldw	r2,-8(fp)
 20109fc:	e0ffff17 	ldw	r3,-4(fp)
 2010a00:	1885883a 	add	r2,r3,r2
 2010a04:	10800003 	ldbu	r2,0(r2)
 2010a08:	10803fcc 	andi	r2,r2,255
 2010a0c:	1080201c 	xori	r2,r2,128
 2010a10:	10bfe004 	addi	r2,r2,-128
 2010a14:	10800be0 	cmpeqi	r2,r2,47
 2010a18:	1000081e 	bne	r2,zero,2010a3c <alt_find_file+0xb0>
 2010a1c:	e0bffe17 	ldw	r2,-8(fp)
 2010a20:	e0ffff17 	ldw	r3,-4(fp)
 2010a24:	1885883a 	add	r2,r3,r2
 2010a28:	10800003 	ldbu	r2,0(r2)
 2010a2c:	10803fcc 	andi	r2,r2,255
 2010a30:	1080201c 	xori	r2,r2,128
 2010a34:	10bfe004 	addi	r2,r2,-128
 2010a38:	10000a1e 	bne	r2,zero,2010a64 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 2010a3c:	e0bffd17 	ldw	r2,-12(fp)
 2010a40:	10800217 	ldw	r2,8(r2)
 2010a44:	e0fffe17 	ldw	r3,-8(fp)
 2010a48:	180d883a 	mov	r6,r3
 2010a4c:	e17fff17 	ldw	r5,-4(fp)
 2010a50:	1009883a 	mov	r4,r2
 2010a54:	2010c400 	call	2010c40 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2010a58:	1000021e 	bne	r2,zero,2010a64 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2010a5c:	e0bffd17 	ldw	r2,-12(fp)
 2010a60:	00000706 	br	2010a80 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 2010a64:	e0bffd17 	ldw	r2,-12(fp)
 2010a68:	10800017 	ldw	r2,0(r2)
 2010a6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2010a70:	e0fffd17 	ldw	r3,-12(fp)
 2010a74:	d0a00604 	addi	r2,gp,-32744
 2010a78:	18bfcc1e 	bne	r3,r2,20109ac <__alt_data_end+0xff0109ac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 2010a7c:	0005883a 	mov	r2,zero
}
 2010a80:	e037883a 	mov	sp,fp
 2010a84:	dfc00117 	ldw	ra,4(sp)
 2010a88:	df000017 	ldw	fp,0(sp)
 2010a8c:	dec00204 	addi	sp,sp,8
 2010a90:	f800283a 	ret

02010a94 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2010a94:	defffa04 	addi	sp,sp,-24
 2010a98:	dfc00515 	stw	ra,20(sp)
 2010a9c:	df000415 	stw	fp,16(sp)
 2010aa0:	dc000315 	stw	r16,12(sp)
 2010aa4:	df000404 	addi	fp,sp,16
 2010aa8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 2010aac:	00bffa04 	movi	r2,-24
 2010ab0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2010ab4:	e03ffc15 	stw	zero,-16(fp)
 2010ab8:	00001d06 	br	2010b30 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 2010abc:	04008074 	movhi	r16,513
 2010ac0:	8406f304 	addi	r16,r16,7116
 2010ac4:	e0bffc17 	ldw	r2,-16(fp)
 2010ac8:	01400304 	movi	r5,12
 2010acc:	1009883a 	mov	r4,r2
 2010ad0:	20018280 	call	2001828 <__mulsi3>
 2010ad4:	8085883a 	add	r2,r16,r2
 2010ad8:	10800017 	ldw	r2,0(r2)
 2010adc:	1000111e 	bne	r2,zero,2010b24 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 2010ae0:	04008074 	movhi	r16,513
 2010ae4:	8406f304 	addi	r16,r16,7116
 2010ae8:	e0bffc17 	ldw	r2,-16(fp)
 2010aec:	01400304 	movi	r5,12
 2010af0:	1009883a 	mov	r4,r2
 2010af4:	20018280 	call	2001828 <__mulsi3>
 2010af8:	8085883a 	add	r2,r16,r2
 2010afc:	e0fffe17 	ldw	r3,-8(fp)
 2010b00:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 2010b04:	d0e00a17 	ldw	r3,-32728(gp)
 2010b08:	e0bffc17 	ldw	r2,-16(fp)
 2010b0c:	1880020e 	bge	r3,r2,2010b18 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 2010b10:	e0bffc17 	ldw	r2,-16(fp)
 2010b14:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 2010b18:	e0bffc17 	ldw	r2,-16(fp)
 2010b1c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 2010b20:	00000606 	br	2010b3c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2010b24:	e0bffc17 	ldw	r2,-16(fp)
 2010b28:	10800044 	addi	r2,r2,1
 2010b2c:	e0bffc15 	stw	r2,-16(fp)
 2010b30:	e0bffc17 	ldw	r2,-16(fp)
 2010b34:	10800810 	cmplti	r2,r2,32
 2010b38:	103fe01e 	bne	r2,zero,2010abc <__alt_data_end+0xff010abc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 2010b3c:	e0bffd17 	ldw	r2,-12(fp)
}
 2010b40:	e6ffff04 	addi	sp,fp,-4
 2010b44:	dfc00217 	ldw	ra,8(sp)
 2010b48:	df000117 	ldw	fp,4(sp)
 2010b4c:	dc000017 	ldw	r16,0(sp)
 2010b50:	dec00304 	addi	sp,sp,12
 2010b54:	f800283a 	ret

02010b58 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 2010b58:	defffe04 	addi	sp,sp,-8
 2010b5c:	df000115 	stw	fp,4(sp)
 2010b60:	df000104 	addi	fp,sp,4
 2010b64:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 2010b68:	e0bfff17 	ldw	r2,-4(fp)
 2010b6c:	10bffe84 	addi	r2,r2,-6
 2010b70:	10c00428 	cmpgeui	r3,r2,16
 2010b74:	18001a1e 	bne	r3,zero,2010be0 <alt_exception_cause_generated_bad_addr+0x88>
 2010b78:	100690ba 	slli	r3,r2,2
 2010b7c:	00808074 	movhi	r2,513
 2010b80:	1082e404 	addi	r2,r2,2960
 2010b84:	1885883a 	add	r2,r3,r2
 2010b88:	10800017 	ldw	r2,0(r2)
 2010b8c:	1000683a 	jmp	r2
 2010b90:	02010bd0 	cmplti	r8,zero,1071
 2010b94:	02010bd0 	cmplti	r8,zero,1071
 2010b98:	02010be0 	cmpeqi	r8,zero,1071
 2010b9c:	02010be0 	cmpeqi	r8,zero,1071
 2010ba0:	02010be0 	cmpeqi	r8,zero,1071
 2010ba4:	02010bd0 	cmplti	r8,zero,1071
 2010ba8:	02010bd8 	cmpnei	r8,zero,1071
 2010bac:	02010be0 	cmpeqi	r8,zero,1071
 2010bb0:	02010bd0 	cmplti	r8,zero,1071
 2010bb4:	02010bd0 	cmplti	r8,zero,1071
 2010bb8:	02010be0 	cmpeqi	r8,zero,1071
 2010bbc:	02010bd0 	cmplti	r8,zero,1071
 2010bc0:	02010bd8 	cmpnei	r8,zero,1071
 2010bc4:	02010be0 	cmpeqi	r8,zero,1071
 2010bc8:	02010be0 	cmpeqi	r8,zero,1071
 2010bcc:	02010bd0 	cmplti	r8,zero,1071
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 2010bd0:	00800044 	movi	r2,1
 2010bd4:	00000306 	br	2010be4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 2010bd8:	0005883a 	mov	r2,zero
 2010bdc:	00000106 	br	2010be4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 2010be0:	0005883a 	mov	r2,zero
  }
}
 2010be4:	e037883a 	mov	sp,fp
 2010be8:	df000017 	ldw	fp,0(sp)
 2010bec:	dec00104 	addi	sp,sp,4
 2010bf0:	f800283a 	ret

02010bf4 <atexit>:
 2010bf4:	200b883a 	mov	r5,r4
 2010bf8:	000f883a 	mov	r7,zero
 2010bfc:	000d883a 	mov	r6,zero
 2010c00:	0009883a 	mov	r4,zero
 2010c04:	2010cbc1 	jmpi	2010cbc <__register_exitproc>

02010c08 <exit>:
 2010c08:	defffe04 	addi	sp,sp,-8
 2010c0c:	000b883a 	mov	r5,zero
 2010c10:	dc000015 	stw	r16,0(sp)
 2010c14:	dfc00115 	stw	ra,4(sp)
 2010c18:	2021883a 	mov	r16,r4
 2010c1c:	2010dd40 	call	2010dd4 <__call_exitprocs>
 2010c20:	00808074 	movhi	r2,513
 2010c24:	108b6b04 	addi	r2,r2,11692
 2010c28:	11000017 	ldw	r4,0(r2)
 2010c2c:	20800f17 	ldw	r2,60(r4)
 2010c30:	10000126 	beq	r2,zero,2010c38 <exit+0x30>
 2010c34:	103ee83a 	callr	r2
 2010c38:	8009883a 	mov	r4,r16
 2010c3c:	2010f540 	call	2010f54 <_exit>

02010c40 <memcmp>:
 2010c40:	01c000c4 	movi	r7,3
 2010c44:	3980192e 	bgeu	r7,r6,2010cac <memcmp+0x6c>
 2010c48:	2144b03a 	or	r2,r4,r5
 2010c4c:	11c4703a 	and	r2,r2,r7
 2010c50:	10000f26 	beq	r2,zero,2010c90 <memcmp+0x50>
 2010c54:	20800003 	ldbu	r2,0(r4)
 2010c58:	28c00003 	ldbu	r3,0(r5)
 2010c5c:	10c0151e 	bne	r2,r3,2010cb4 <memcmp+0x74>
 2010c60:	31bfff84 	addi	r6,r6,-2
 2010c64:	01ffffc4 	movi	r7,-1
 2010c68:	00000406 	br	2010c7c <memcmp+0x3c>
 2010c6c:	20800003 	ldbu	r2,0(r4)
 2010c70:	28c00003 	ldbu	r3,0(r5)
 2010c74:	31bfffc4 	addi	r6,r6,-1
 2010c78:	10c00e1e 	bne	r2,r3,2010cb4 <memcmp+0x74>
 2010c7c:	21000044 	addi	r4,r4,1
 2010c80:	29400044 	addi	r5,r5,1
 2010c84:	31fff91e 	bne	r6,r7,2010c6c <__alt_data_end+0xff010c6c>
 2010c88:	0005883a 	mov	r2,zero
 2010c8c:	f800283a 	ret
 2010c90:	20c00017 	ldw	r3,0(r4)
 2010c94:	28800017 	ldw	r2,0(r5)
 2010c98:	18bfee1e 	bne	r3,r2,2010c54 <__alt_data_end+0xff010c54>
 2010c9c:	31bfff04 	addi	r6,r6,-4
 2010ca0:	21000104 	addi	r4,r4,4
 2010ca4:	29400104 	addi	r5,r5,4
 2010ca8:	39bff936 	bltu	r7,r6,2010c90 <__alt_data_end+0xff010c90>
 2010cac:	303fe91e 	bne	r6,zero,2010c54 <__alt_data_end+0xff010c54>
 2010cb0:	003ff506 	br	2010c88 <__alt_data_end+0xff010c88>
 2010cb4:	10c5c83a 	sub	r2,r2,r3
 2010cb8:	f800283a 	ret

02010cbc <__register_exitproc>:
 2010cbc:	defffa04 	addi	sp,sp,-24
 2010cc0:	dc000315 	stw	r16,12(sp)
 2010cc4:	04008074 	movhi	r16,513
 2010cc8:	840b6b04 	addi	r16,r16,11692
 2010ccc:	80c00017 	ldw	r3,0(r16)
 2010cd0:	dc400415 	stw	r17,16(sp)
 2010cd4:	dfc00515 	stw	ra,20(sp)
 2010cd8:	18805217 	ldw	r2,328(r3)
 2010cdc:	2023883a 	mov	r17,r4
 2010ce0:	10003726 	beq	r2,zero,2010dc0 <__register_exitproc+0x104>
 2010ce4:	10c00117 	ldw	r3,4(r2)
 2010ce8:	010007c4 	movi	r4,31
 2010cec:	20c00e16 	blt	r4,r3,2010d28 <__register_exitproc+0x6c>
 2010cf0:	1a000044 	addi	r8,r3,1
 2010cf4:	8800221e 	bne	r17,zero,2010d80 <__register_exitproc+0xc4>
 2010cf8:	18c00084 	addi	r3,r3,2
 2010cfc:	18c7883a 	add	r3,r3,r3
 2010d00:	18c7883a 	add	r3,r3,r3
 2010d04:	12000115 	stw	r8,4(r2)
 2010d08:	10c7883a 	add	r3,r2,r3
 2010d0c:	19400015 	stw	r5,0(r3)
 2010d10:	0005883a 	mov	r2,zero
 2010d14:	dfc00517 	ldw	ra,20(sp)
 2010d18:	dc400417 	ldw	r17,16(sp)
 2010d1c:	dc000317 	ldw	r16,12(sp)
 2010d20:	dec00604 	addi	sp,sp,24
 2010d24:	f800283a 	ret
 2010d28:	00800034 	movhi	r2,0
 2010d2c:	10800004 	addi	r2,r2,0
 2010d30:	10002626 	beq	r2,zero,2010dcc <__register_exitproc+0x110>
 2010d34:	01006404 	movi	r4,400
 2010d38:	d9400015 	stw	r5,0(sp)
 2010d3c:	d9800115 	stw	r6,4(sp)
 2010d40:	d9c00215 	stw	r7,8(sp)
 2010d44:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 2010d48:	d9400017 	ldw	r5,0(sp)
 2010d4c:	d9800117 	ldw	r6,4(sp)
 2010d50:	d9c00217 	ldw	r7,8(sp)
 2010d54:	10001d26 	beq	r2,zero,2010dcc <__register_exitproc+0x110>
 2010d58:	81000017 	ldw	r4,0(r16)
 2010d5c:	10000115 	stw	zero,4(r2)
 2010d60:	02000044 	movi	r8,1
 2010d64:	22405217 	ldw	r9,328(r4)
 2010d68:	0007883a 	mov	r3,zero
 2010d6c:	12400015 	stw	r9,0(r2)
 2010d70:	20805215 	stw	r2,328(r4)
 2010d74:	10006215 	stw	zero,392(r2)
 2010d78:	10006315 	stw	zero,396(r2)
 2010d7c:	883fde26 	beq	r17,zero,2010cf8 <__alt_data_end+0xff010cf8>
 2010d80:	18c9883a 	add	r4,r3,r3
 2010d84:	2109883a 	add	r4,r4,r4
 2010d88:	1109883a 	add	r4,r2,r4
 2010d8c:	21802215 	stw	r6,136(r4)
 2010d90:	01800044 	movi	r6,1
 2010d94:	12406217 	ldw	r9,392(r2)
 2010d98:	30cc983a 	sll	r6,r6,r3
 2010d9c:	4992b03a 	or	r9,r9,r6
 2010da0:	12406215 	stw	r9,392(r2)
 2010da4:	21c04215 	stw	r7,264(r4)
 2010da8:	01000084 	movi	r4,2
 2010dac:	893fd21e 	bne	r17,r4,2010cf8 <__alt_data_end+0xff010cf8>
 2010db0:	11006317 	ldw	r4,396(r2)
 2010db4:	218cb03a 	or	r6,r4,r6
 2010db8:	11806315 	stw	r6,396(r2)
 2010dbc:	003fce06 	br	2010cf8 <__alt_data_end+0xff010cf8>
 2010dc0:	18805304 	addi	r2,r3,332
 2010dc4:	18805215 	stw	r2,328(r3)
 2010dc8:	003fc606 	br	2010ce4 <__alt_data_end+0xff010ce4>
 2010dcc:	00bfffc4 	movi	r2,-1
 2010dd0:	003fd006 	br	2010d14 <__alt_data_end+0xff010d14>

02010dd4 <__call_exitprocs>:
 2010dd4:	defff504 	addi	sp,sp,-44
 2010dd8:	df000915 	stw	fp,36(sp)
 2010ddc:	dd400615 	stw	r21,24(sp)
 2010de0:	dc800315 	stw	r18,12(sp)
 2010de4:	dfc00a15 	stw	ra,40(sp)
 2010de8:	ddc00815 	stw	r23,32(sp)
 2010dec:	dd800715 	stw	r22,28(sp)
 2010df0:	dd000515 	stw	r20,20(sp)
 2010df4:	dcc00415 	stw	r19,16(sp)
 2010df8:	dc400215 	stw	r17,8(sp)
 2010dfc:	dc000115 	stw	r16,4(sp)
 2010e00:	d9000015 	stw	r4,0(sp)
 2010e04:	2839883a 	mov	fp,r5
 2010e08:	04800044 	movi	r18,1
 2010e0c:	057fffc4 	movi	r21,-1
 2010e10:	00808074 	movhi	r2,513
 2010e14:	108b6b04 	addi	r2,r2,11692
 2010e18:	12000017 	ldw	r8,0(r2)
 2010e1c:	45005217 	ldw	r20,328(r8)
 2010e20:	44c05204 	addi	r19,r8,328
 2010e24:	a0001c26 	beq	r20,zero,2010e98 <__call_exitprocs+0xc4>
 2010e28:	a0800117 	ldw	r2,4(r20)
 2010e2c:	15ffffc4 	addi	r23,r2,-1
 2010e30:	b8000d16 	blt	r23,zero,2010e68 <__call_exitprocs+0x94>
 2010e34:	14000044 	addi	r16,r2,1
 2010e38:	8421883a 	add	r16,r16,r16
 2010e3c:	8421883a 	add	r16,r16,r16
 2010e40:	84402004 	addi	r17,r16,128
 2010e44:	a463883a 	add	r17,r20,r17
 2010e48:	a421883a 	add	r16,r20,r16
 2010e4c:	e0001e26 	beq	fp,zero,2010ec8 <__call_exitprocs+0xf4>
 2010e50:	80804017 	ldw	r2,256(r16)
 2010e54:	e0801c26 	beq	fp,r2,2010ec8 <__call_exitprocs+0xf4>
 2010e58:	bdffffc4 	addi	r23,r23,-1
 2010e5c:	843fff04 	addi	r16,r16,-4
 2010e60:	8c7fff04 	addi	r17,r17,-4
 2010e64:	bd7ff91e 	bne	r23,r21,2010e4c <__alt_data_end+0xff010e4c>
 2010e68:	00800034 	movhi	r2,0
 2010e6c:	10800004 	addi	r2,r2,0
 2010e70:	10000926 	beq	r2,zero,2010e98 <__call_exitprocs+0xc4>
 2010e74:	a0800117 	ldw	r2,4(r20)
 2010e78:	1000301e 	bne	r2,zero,2010f3c <__call_exitprocs+0x168>
 2010e7c:	a0800017 	ldw	r2,0(r20)
 2010e80:	10003226 	beq	r2,zero,2010f4c <__call_exitprocs+0x178>
 2010e84:	a009883a 	mov	r4,r20
 2010e88:	98800015 	stw	r2,0(r19)
 2010e8c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 2010e90:	9d000017 	ldw	r20,0(r19)
 2010e94:	a03fe41e 	bne	r20,zero,2010e28 <__alt_data_end+0xff010e28>
 2010e98:	dfc00a17 	ldw	ra,40(sp)
 2010e9c:	df000917 	ldw	fp,36(sp)
 2010ea0:	ddc00817 	ldw	r23,32(sp)
 2010ea4:	dd800717 	ldw	r22,28(sp)
 2010ea8:	dd400617 	ldw	r21,24(sp)
 2010eac:	dd000517 	ldw	r20,20(sp)
 2010eb0:	dcc00417 	ldw	r19,16(sp)
 2010eb4:	dc800317 	ldw	r18,12(sp)
 2010eb8:	dc400217 	ldw	r17,8(sp)
 2010ebc:	dc000117 	ldw	r16,4(sp)
 2010ec0:	dec00b04 	addi	sp,sp,44
 2010ec4:	f800283a 	ret
 2010ec8:	a0800117 	ldw	r2,4(r20)
 2010ecc:	80c00017 	ldw	r3,0(r16)
 2010ed0:	10bfffc4 	addi	r2,r2,-1
 2010ed4:	15c01426 	beq	r2,r23,2010f28 <__call_exitprocs+0x154>
 2010ed8:	80000015 	stw	zero,0(r16)
 2010edc:	183fde26 	beq	r3,zero,2010e58 <__alt_data_end+0xff010e58>
 2010ee0:	95c8983a 	sll	r4,r18,r23
 2010ee4:	a0806217 	ldw	r2,392(r20)
 2010ee8:	a5800117 	ldw	r22,4(r20)
 2010eec:	2084703a 	and	r2,r4,r2
 2010ef0:	10000b26 	beq	r2,zero,2010f20 <__call_exitprocs+0x14c>
 2010ef4:	a0806317 	ldw	r2,396(r20)
 2010ef8:	2088703a 	and	r4,r4,r2
 2010efc:	20000c1e 	bne	r4,zero,2010f30 <__call_exitprocs+0x15c>
 2010f00:	89400017 	ldw	r5,0(r17)
 2010f04:	d9000017 	ldw	r4,0(sp)
 2010f08:	183ee83a 	callr	r3
 2010f0c:	a0800117 	ldw	r2,4(r20)
 2010f10:	15bfbf1e 	bne	r2,r22,2010e10 <__alt_data_end+0xff010e10>
 2010f14:	98800017 	ldw	r2,0(r19)
 2010f18:	153fcf26 	beq	r2,r20,2010e58 <__alt_data_end+0xff010e58>
 2010f1c:	003fbc06 	br	2010e10 <__alt_data_end+0xff010e10>
 2010f20:	183ee83a 	callr	r3
 2010f24:	003ff906 	br	2010f0c <__alt_data_end+0xff010f0c>
 2010f28:	a5c00115 	stw	r23,4(r20)
 2010f2c:	003feb06 	br	2010edc <__alt_data_end+0xff010edc>
 2010f30:	89000017 	ldw	r4,0(r17)
 2010f34:	183ee83a 	callr	r3
 2010f38:	003ff406 	br	2010f0c <__alt_data_end+0xff010f0c>
 2010f3c:	a0800017 	ldw	r2,0(r20)
 2010f40:	a027883a 	mov	r19,r20
 2010f44:	1029883a 	mov	r20,r2
 2010f48:	003fb606 	br	2010e24 <__alt_data_end+0xff010e24>
 2010f4c:	0005883a 	mov	r2,zero
 2010f50:	003ffb06 	br	2010f40 <__alt_data_end+0xff010f40>

02010f54 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 2010f54:	defffd04 	addi	sp,sp,-12
 2010f58:	df000215 	stw	fp,8(sp)
 2010f5c:	df000204 	addi	fp,sp,8
 2010f60:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 2010f64:	0001883a 	nop
 2010f68:	e0bfff17 	ldw	r2,-4(fp)
 2010f6c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 2010f70:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2010f74:	10000226 	beq	r2,zero,2010f80 <_exit+0x2c>
    ALT_SIM_FAIL();
 2010f78:	002af070 	cmpltui	zero,zero,43969
 2010f7c:	00000106 	br	2010f84 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 2010f80:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2010f84:	003fff06 	br	2010f84 <__alt_data_end+0xff010f84>
